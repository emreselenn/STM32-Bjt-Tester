
Bjt_Tester_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008598  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08008738  08008738  00009738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  0000a244  2**0
                  CONTENTS
  4 .ARM          00000008  08008b18  08008b18  00009b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b20  08008b20  0000a244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b20  08008b20  00009b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b24  08008b24  00009b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  08008b28  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000244  08008d6c  0000a244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08008d6c  0000a554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001139e  00000000  00000000  0000a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243a  00000000  00000000  0001b612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9d  00000000  00000000  0001eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e45  00000000  00000000  0001f8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144b7  00000000  00000000  00038732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e0d3  00000000  00000000  0004cbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eacbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e0  00000000  00000000  000ead00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f06e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008720 	.word	0x08008720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	08008720 	.word	0x08008720

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f043 030c 	orr.w	r3, r3, #12
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
 8000ed6:	f043 030c 	orr.w	r3, r3, #12
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ee8:	f107 0208 	add.w	r2, r7, #8
 8000eec:	2364      	movs	r3, #100	@ 0x64
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	217e      	movs	r1, #126	@ 0x7e
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <lcd_send_cmd+0x5c>)
 8000ef6:	f002 fcf5 	bl	80038e4 <HAL_I2C_Master_Transmit>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200002a8 	.word	0x200002a8

08000f08 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 030d 	orr.w	r3, r3, #13
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 0309 	orr.w	r3, r3, #9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f48:	f107 0208 	add.w	r2, r7, #8
 8000f4c:	2364      	movs	r3, #100	@ 0x64
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2304      	movs	r3, #4
 8000f52:	217e      	movs	r1, #126	@ 0x7e
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <lcd_send_data+0x5c>)
 8000f56:	f002 fcc5 	bl	80038e4 <HAL_I2C_Master_Transmit>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002a8 	.word	0x200002a8

08000f68 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <lcd_put_cur+0x18>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <lcd_put_cur+0x22>
 8000f7e:	e009      	b.n	8000f94 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f86:	603b      	str	r3, [r7, #0]
            break;
 8000f88:	e004      	b.n	8000f94 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f90:	603b      	str	r3, [r7, #0]
            break;
 8000f92:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff85 	bl	8000ea8 <lcd_send_cmd>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <lcd_init>:


void lcd_init (void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000faa:	2032      	movs	r0, #50	@ 0x32
 8000fac:	f001 fca0 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fb0:	2030      	movs	r0, #48	@ 0x30
 8000fb2:	f7ff ff79 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fb6:	2005      	movs	r0, #5
 8000fb8:	f001 fc9a 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fbc:	2030      	movs	r0, #48	@ 0x30
 8000fbe:	f7ff ff73 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f001 fc94 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fc8:	2030      	movs	r0, #48	@ 0x30
 8000fca:	f7ff ff6d 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f001 fc8e 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000fd4:	2020      	movs	r0, #32
 8000fd6:	f7ff ff67 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f001 fc88 	bl	80028f0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000fe0:	2028      	movs	r0, #40	@ 0x28
 8000fe2:	f7ff ff61 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f001 fc82 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fec:	2008      	movs	r0, #8
 8000fee:	f7ff ff5b 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f001 fc7c 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ff55 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 fc76 	bl	80028f0 <HAL_Delay>
	HAL_Delay(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f001 fc73 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800100a:	2006      	movs	r0, #6
 800100c:	f7ff ff4c 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f001 fc6d 	bl	80028f0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001016:	200c      	movs	r0, #12
 8001018:	f7ff ff46 	bl	8000ea8 <lcd_send_cmd>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001028:	e006      	b.n	8001038 <lcd_send_string+0x18>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff68 	bl	8000f08 <lcd_send_data>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f4      	bne.n	800102a <lcd_send_string+0xa>
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <Read_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_ADC(uint32_t channel) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	613b      	str	r3, [r7, #16]

	// ADC kanalını seç ve başlat
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <Read_ADC+0x54>)
 8001072:	f001 fe25 	bl	8002cc0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001076:	480a      	ldr	r0, [pc, #40]	@ (80010a0 <Read_ADC+0x54>)
 8001078:	f001 fca2 	bl	80029c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <Read_ADC+0x54>)
 8001082:	f001 fd84 	bl	8002b8e <HAL_ADC_PollForConversion>
	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001086:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <Read_ADC+0x54>)
 8001088:	f001 fe0c 	bl	8002ca4 <HAL_ADC_GetValue>
 800108c:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 800108e:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <Read_ADC+0x54>)
 8001090:	f001 fd4a 	bl	8002b28 <HAL_ADC_Stop>
	return adc_value;
 8001094:	69fb      	ldr	r3, [r7, #28]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000260 	.word	0x20000260
 80010a4:	00000000 	.word	0x00000000

080010a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010ae:	f001 fbad 	bl	800280c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010b2:	f000 feeb 	bl	8001e8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010b6:	f001 f881 	bl	80021bc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80010ba:	f001 f855 	bl	8002168 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80010be:	f000 ff51 	bl	8001f64 <MX_ADC1_Init>
	MX_TIM1_Init();
 80010c2:	f000 ffcf 	bl	8002064 <MX_TIM1_Init>
	MX_I2C1_Init();
 80010c6:	f000 ff9f 	bl	8002008 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 80010ca:	f7ff ff6c 	bl	8000fa6 <lcd_init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010ce:	2100      	movs	r1, #0
 80010d0:	483c      	ldr	r0, [pc, #240]	@ (80011c4 <main+0x11c>)
 80010d2:	f003 fc63 	bl	800499c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80010d6:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <main+0x11c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2140      	movs	r1, #64	@ 0x40
 80010e2:	4839      	ldr	r0, [pc, #228]	@ (80011c8 <main+0x120>)
 80010e4:	f002 faa0 	bl	8003628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	4836      	ldr	r0, [pc, #216]	@ (80011c8 <main+0x120>)
 80010ee:	f002 fa9b 	bl	8003628 <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		flag = 0;
 80010f2:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <main+0x124>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 80010f8:	4b32      	ldr	r3, [pc, #200]	@ (80011c4 <main+0x11c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2264      	movs	r2, #100	@ 0x64
 80010fe:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	4830      	ldr	r0, [pc, #192]	@ (80011c8 <main+0x120>)
 8001106:	f002 fa8f 	bl	8003628 <HAL_GPIO_WritePin>

		HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	@ 0x64
 800110c:	f001 fbf0 	bl	80028f0 <HAL_Delay>

		voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ff9b 	bl	800104c <Read_ADC>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <main+0x128>)
 800111c:	601a      	str	r2, [r3, #0]
		volt2 = (voltage2 / 1023 * 5.0);
 800111e:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <main+0x128>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2c      	ldr	r2, [pc, #176]	@ (80011d4 <main+0x12c>)
 8001124:	fb82 1203 	smull	r1, r2, r2, r3
 8001128:	441a      	add	r2, r3
 800112a:	1252      	asrs	r2, r2, #9
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9ff 	bl	8000534 <__aeabi_i2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <main+0x130>)
 800113c:	f7ff fa64 	bl	8000608 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd0e 	bl	8000b68 <__aeabi_d2iz>
 800114c:	4603      	mov	r3, r0
 800114e:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <main+0x134>)
 8001150:	6013      	str	r3, [r2, #0]

		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001152:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <main+0x11c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <main+0x120>)
 8001160:	f002 fa62 	bl	8003628 <HAL_GPIO_WritePin>

		HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	@ 0x64
 8001166:	f001 fbc3 	bl	80028f0 <HAL_Delay>

		voltage3 = Read_ADC(ADC_CHANNEL_8);
 800116a:	2008      	movs	r0, #8
 800116c:	f7ff ff6e 	bl	800104c <Read_ADC>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <main+0x138>)
 8001176:	601a      	str	r2, [r3, #0]

		difference = abs(voltage3 - voltage2);
 8001178:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <main+0x138>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <main+0x128>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	bfb8      	it	lt
 8001186:	425b      	neglt	r3, r3
 8001188:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <main+0x13c>)
 800118a:	6013      	str	r3, [r2, #0]

		if (difference < threshold) {
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <main+0x13c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <main+0x140>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	da2d      	bge.n	80011f4 <main+0x14c>
			HAL_UART_Transmit(&huart2, error, strlen(error), 100);
 8001198:	4814      	ldr	r0, [pc, #80]	@ (80011ec <main+0x144>)
 800119a:	f7ff f871 	bl	8000280 <strlen>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	2364      	movs	r3, #100	@ 0x64
 80011a4:	4911      	ldr	r1, [pc, #68]	@ (80011ec <main+0x144>)
 80011a6:	4812      	ldr	r0, [pc, #72]	@ (80011f0 <main+0x148>)
 80011a8:	f004 f8b8 	bl	800531c <HAL_UART_Transmit>
			lcd_put_cur(0, 0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff feda 	bl	8000f68 <lcd_put_cur>
			lcd_send_string(error);
 80011b4:	480d      	ldr	r0, [pc, #52]	@ (80011ec <main+0x144>)
 80011b6:	f7ff ff33 	bl	8001020 <lcd_send_string>
			HAL_Delay(300);
 80011ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011be:	f001 fb97 	bl	80028f0 <HAL_Delay>
 80011c2:	e796      	b.n	80010f2 <main+0x4a>
 80011c4:	200002fc 	.word	0x200002fc
 80011c8:	40020000 	.word	0x40020000
 80011cc:	200003b4 	.word	0x200003b4
 80011d0:	2000038c 	.word	0x2000038c
 80011d4:	80200803 	.word	0x80200803
 80011d8:	40140000 	.word	0x40140000
 80011dc:	200003a8 	.word	0x200003a8
 80011e0:	20000394 	.word	0x20000394
 80011e4:	200003b8 	.word	0x200003b8
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000054 	.word	0x20000054
 80011f0:	20000344 	.word	0x20000344
		}

		//BJT İS NPN
		else if (voltage3 > voltage2) {
 80011f4:	4bbc      	ldr	r3, [pc, #752]	@ (80014e8 <main+0x440>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4bbc      	ldr	r3, [pc, #752]	@ (80014ec <main+0x444>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f340 8353 	ble.w	80018a8 <main+0x800>

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8001202:	4bbb      	ldr	r3, [pc, #748]	@ (80014f0 <main+0x448>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2264      	movs	r2, #100	@ 0x64
 8001208:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	2140      	movs	r1, #64	@ 0x40
 800120e:	48b9      	ldr	r0, [pc, #740]	@ (80014f4 <main+0x44c>)
 8001210:	f002 fa0a 	bl	8003628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2180      	movs	r1, #128	@ 0x80
 8001218:	48b6      	ldr	r0, [pc, #728]	@ (80014f4 <main+0x44c>)
 800121a:	f002 fa05 	bl	8003628 <HAL_GPIO_WritePin>

			HAL_Delay(100);
 800121e:	2064      	movs	r0, #100	@ 0x64
 8001220:	f001 fb66 	bl	80028f0 <HAL_Delay>

			voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ff11 	bl	800104c <Read_ADC>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4baf      	ldr	r3, [pc, #700]	@ (80014ec <main+0x444>)
 8001230:	601a      	str	r2, [r3, #0]
			volt2 = (voltage2 / 1023 * 5.0);
 8001232:	4bae      	ldr	r3, [pc, #696]	@ (80014ec <main+0x444>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4ab0      	ldr	r2, [pc, #704]	@ (80014f8 <main+0x450>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	441a      	add	r2, r3
 800123e:	1252      	asrs	r2, r2, #9
 8001240:	17db      	asrs	r3, r3, #31
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f975 	bl	8000534 <__aeabi_i2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4bab      	ldr	r3, [pc, #684]	@ (80014fc <main+0x454>)
 8001250:	f7ff f9da 	bl	8000608 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc84 	bl	8000b68 <__aeabi_d2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	4aa7      	ldr	r2, [pc, #668]	@ (8001500 <main+0x458>)
 8001264:	6013      	str	r3, [r2, #0]

			voltage3 = Read_ADC(ADC_CHANNEL_8);
 8001266:	2008      	movs	r0, #8
 8001268:	f7ff fef0 	bl	800104c <Read_ADC>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b9d      	ldr	r3, [pc, #628]	@ (80014e8 <main+0x440>)
 8001272:	601a      	str	r2, [r3, #0]
			volt3 = (voltage3 / 1023 * 5.0);
 8001274:	4b9c      	ldr	r3, [pc, #624]	@ (80014e8 <main+0x440>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a9f      	ldr	r2, [pc, #636]	@ (80014f8 <main+0x450>)
 800127a:	fb82 1203 	smull	r1, r2, r2, r3
 800127e:	441a      	add	r2, r3
 8001280:	1252      	asrs	r2, r2, #9
 8001282:	17db      	asrs	r3, r3, #31
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f954 	bl	8000534 <__aeabi_i2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b9a      	ldr	r3, [pc, #616]	@ (80014fc <main+0x454>)
 8001292:	f7ff f9b9 	bl	8000608 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fc63 	bl	8000b68 <__aeabi_d2iz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a97      	ldr	r2, [pc, #604]	@ (8001504 <main+0x45c>)
 80012a6:	6013      	str	r3, [r2, #0]

			difference1 = abs(voltage3 - voltage2); //voltage difference between pin2 and pin3
 80012a8:	4b8f      	ldr	r3, [pc, #572]	@ (80014e8 <main+0x440>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b8f      	ldr	r3, [pc, #572]	@ (80014ec <main+0x444>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfb8      	it	lt
 80012b6:	425b      	neglt	r3, r3
 80012b8:	4a93      	ldr	r2, [pc, #588]	@ (8001508 <main+0x460>)
 80012ba:	6013      	str	r3, [r2, #0]

			HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	@ 0x64
 80012be:	f001 fb17 	bl	80028f0 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2140      	movs	r1, #64	@ 0x40
 80012c6:	488b      	ldr	r0, [pc, #556]	@ (80014f4 <main+0x44c>)
 80012c8:	f002 f9ae 	bl	8003628 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 80012cc:	4b88      	ldr	r3, [pc, #544]	@ (80014f0 <main+0x448>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2264      	movs	r2, #100	@ 0x64
 80012d2:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2180      	movs	r1, #128	@ 0x80
 80012d8:	4886      	ldr	r0, [pc, #536]	@ (80014f4 <main+0x44c>)
 80012da:	f002 f9a5 	bl	8003628 <HAL_GPIO_WritePin>

			HAL_Delay(100);
 80012de:	2064      	movs	r0, #100	@ 0x64
 80012e0:	f001 fb06 	bl	80028f0 <HAL_Delay>

			voltage1 = Read_ADC(ADC_CHANNEL_1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff feb1 	bl	800104c <Read_ADC>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b87      	ldr	r3, [pc, #540]	@ (800150c <main+0x464>)
 80012f0:	601a      	str	r2, [r3, #0]
			volt1 = (voltage1 / 1023 * 5.0);
 80012f2:	4b86      	ldr	r3, [pc, #536]	@ (800150c <main+0x464>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a80      	ldr	r2, [pc, #512]	@ (80014f8 <main+0x450>)
 80012f8:	fb82 1203 	smull	r1, r2, r2, r3
 80012fc:	441a      	add	r2, r3
 80012fe:	1252      	asrs	r2, r2, #9
 8001300:	17db      	asrs	r3, r3, #31
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f915 	bl	8000534 <__aeabi_i2d>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	4b7b      	ldr	r3, [pc, #492]	@ (80014fc <main+0x454>)
 8001310:	f7ff f97a 	bl	8000608 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc24 	bl	8000b68 <__aeabi_d2iz>
 8001320:	4603      	mov	r3, r0
 8001322:	4a7b      	ldr	r2, [pc, #492]	@ (8001510 <main+0x468>)
 8001324:	6013      	str	r3, [r2, #0]

			voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fe90 	bl	800104c <Read_ADC>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b6e      	ldr	r3, [pc, #440]	@ (80014ec <main+0x444>)
 8001332:	601a      	str	r2, [r3, #0]
			volt2 = (voltage2 / 1023 * 5.0);
 8001334:	4b6d      	ldr	r3, [pc, #436]	@ (80014ec <main+0x444>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a6f      	ldr	r2, [pc, #444]	@ (80014f8 <main+0x450>)
 800133a:	fb82 1203 	smull	r1, r2, r2, r3
 800133e:	441a      	add	r2, r3
 8001340:	1252      	asrs	r2, r2, #9
 8001342:	17db      	asrs	r3, r3, #31
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8f4 	bl	8000534 <__aeabi_i2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <main+0x454>)
 8001352:	f7ff f959 	bl	8000608 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc03 	bl	8000b68 <__aeabi_d2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	4a66      	ldr	r2, [pc, #408]	@ (8001500 <main+0x458>)
 8001366:	6013      	str	r3, [r2, #0]

			difference2 = abs(voltage2 - voltage1); //voltage difference between pin1 and pin2
 8001368:	4b60      	ldr	r3, [pc, #384]	@ (80014ec <main+0x444>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b67      	ldr	r3, [pc, #412]	@ (800150c <main+0x464>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfb8      	it	lt
 8001376:	425b      	neglt	r3, r3
 8001378:	4a66      	ldr	r2, [pc, #408]	@ (8001514 <main+0x46c>)
 800137a:	6013      	str	r3, [r2, #0]

			if (difference1 > difference2) {
 800137c:	4b62      	ldr	r3, [pc, #392]	@ (8001508 <main+0x460>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b64      	ldr	r3, [pc, #400]	@ (8001514 <main+0x46c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	f340 814f 	ble.w	8001628 <main+0x580>
				HAL_UART_Transmit(&huart2, npn1, strlen(npn1), 100);  //npn cbe
 800138a:	4863      	ldr	r0, [pc, #396]	@ (8001518 <main+0x470>)
 800138c:	f7fe ff78 	bl	8000280 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	2364      	movs	r3, #100	@ 0x64
 8001396:	4960      	ldr	r1, [pc, #384]	@ (8001518 <main+0x470>)
 8001398:	4860      	ldr	r0, [pc, #384]	@ (800151c <main+0x474>)
 800139a:	f003 ffbf 	bl	800531c <HAL_UART_Transmit>

				lcd_put_cur(0, 0);
 800139e:	2100      	movs	r1, #0
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fde1 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(npn1);
 80013a6:	485c      	ldr	r0, [pc, #368]	@ (8001518 <main+0x470>)
 80013a8:	f7ff fe3a 	bl	8001020 <lcd_send_string>
				HAL_Delay(300);
 80013ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013b0:	f001 fa9e 	bl	80028f0 <HAL_Delay>
//**********************************************************
				//b HESABI için confg
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2140      	movs	r1, #64	@ 0x40
 80013b8:	484e      	ldr	r0, [pc, #312]	@ (80014f4 <main+0x44c>)
 80013ba:	f002 f935 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 80013be:	4b4c      	ldr	r3, [pc, #304]	@ (80014f0 <main+0x448>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2264      	movs	r2, #100	@ 0x64
 80013c4:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2180      	movs	r1, #128	@ 0x80
 80013ca:	484a      	ldr	r0, [pc, #296]	@ (80014f4 <main+0x44c>)
 80013cc:	f002 f92c 	bl	8003628 <HAL_GPIO_WritePin>
				voltage1 = Read_ADC(ADC_CHANNEL_1);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fe3b 	bl	800104c <Read_ADC>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b4c      	ldr	r3, [pc, #304]	@ (800150c <main+0x464>)
 80013dc:	601a      	str	r2, [r3, #0]

				volt1 = (voltage1 / 4095 * 3.3);			 //vc
 80013de:	4b4b      	ldr	r3, [pc, #300]	@ (800150c <main+0x464>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001520 <main+0x478>)
 80013e4:	fb82 1203 	smull	r1, r2, r2, r3
 80013e8:	441a      	add	r2, r3
 80013ea:	12d2      	asrs	r2, r2, #11
 80013ec:	17db      	asrs	r3, r3, #31
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f89f 	bl	8000534 <__aeabi_i2d>
 80013f6:	a33a      	add	r3, pc, #232	@ (adr r3, 80014e0 <main+0x438>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f904 	bl	8000608 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fbae 	bl	8000b68 <__aeabi_d2iz>
 800140c:	4603      	mov	r3, r0
 800140e:	4a40      	ldr	r2, [pc, #256]	@ (8001510 <main+0x468>)
 8001410:	6013      	str	r3, [r2, #0]

				voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff fe1a 	bl	800104c <Read_ADC>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <main+0x444>)
 800141e:	601a      	str	r2, [r3, #0]
				volt2 = (voltage2 / 4095 * 3.3);			 //vb
 8001420:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <main+0x444>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a3e      	ldr	r2, [pc, #248]	@ (8001520 <main+0x478>)
 8001426:	fb82 1203 	smull	r1, r2, r2, r3
 800142a:	441a      	add	r2, r3
 800142c:	12d2      	asrs	r2, r2, #11
 800142e:	17db      	asrs	r3, r3, #31
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f87e 	bl	8000534 <__aeabi_i2d>
 8001438:	a329      	add	r3, pc, #164	@ (adr r3, 80014e0 <main+0x438>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f8e3 	bl	8000608 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fb8d 	bl	8000b68 <__aeabi_d2iz>
 800144e:	4603      	mov	r3, r0
 8001450:	4a2b      	ldr	r2, [pc, #172]	@ (8001500 <main+0x458>)
 8001452:	6013      	str	r3, [r2, #0]

				Ic = abs(voltage1 - 4095);
 8001454:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <main+0x464>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 800145c:	2b00      	cmp	r3, #0
 800145e:	bfb8      	it	lt
 8001460:	425b      	neglt	r3, r3
 8001462:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <main+0x47c>)
 8001464:	6013      	str	r3, [r2, #0]
				Ib = abs(voltage2 - 4095);
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <main+0x444>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 800146e:	2b00      	cmp	r3, #0
 8001470:	bfb8      	it	lt
 8001472:	425b      	neglt	r3, r3
 8001474:	4a2c      	ldr	r2, [pc, #176]	@ (8001528 <main+0x480>)
 8001476:	6013      	str	r3, [r2, #0]
				B = Ic / Ib;
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <main+0x47c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <main+0x480>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fb92 f3f3 	sdiv	r3, r2, r3
 8001484:	4a29      	ldr	r2, [pc, #164]	@ (800152c <main+0x484>)
 8001486:	6013      	str	r3, [r2, #0]
				sprintf(B1, "Bs= %d", B);
 8001488:	4b28      	ldr	r3, [pc, #160]	@ (800152c <main+0x484>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4928      	ldr	r1, [pc, #160]	@ (8001530 <main+0x488>)
 8001490:	4828      	ldr	r0, [pc, #160]	@ (8001534 <main+0x48c>)
 8001492:	f005 f819 	bl	80064c8 <siprintf>
				lcd_put_cur(1, 0);
 8001496:	2100      	movs	r1, #0
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff fd65 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(B1);
 800149e:	4825      	ldr	r0, [pc, #148]	@ (8001534 <main+0x48c>)
 80014a0:	f7ff fdbe 	bl	8001020 <lcd_send_string>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2140      	movs	r1, #64	@ 0x40
 80014a8:	4812      	ldr	r0, [pc, #72]	@ (80014f4 <main+0x44c>)
 80014aa:	f002 f8bd 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 31);
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <main+0x448>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	221f      	movs	r2, #31
 80014b4:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <main+0x44c>)
 80014bc:	f002 f8b4 	bl	8003628 <HAL_GPIO_WritePin>
				Ic = 0;
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <main+0x47c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
				Ib = 0;
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <main+0x480>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
				B3 = 0;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <main+0x490>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
				while (1) {

					if (flag == 10) {
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <main+0x494>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b0a      	cmp	r3, #10
 80014d8:	f000 8497 	beq.w	8001e0a <main+0xd62>
 80014dc:	e030      	b.n	8001540 <main+0x498>
 80014de:	bf00      	nop
 80014e0:	66666666 	.word	0x66666666
 80014e4:	400a6666 	.word	0x400a6666
 80014e8:	20000394 	.word	0x20000394
 80014ec:	2000038c 	.word	0x2000038c
 80014f0:	200002fc 	.word	0x200002fc
 80014f4:	40020000 	.word	0x40020000
 80014f8:	80200803 	.word	0x80200803
 80014fc:	40140000 	.word	0x40140000
 8001500:	200003a8 	.word	0x200003a8
 8001504:	200003b0 	.word	0x200003b0
 8001508:	200003bc 	.word	0x200003bc
 800150c:	20000390 	.word	0x20000390
 8001510:	200003ac 	.word	0x200003ac
 8001514:	200003c0 	.word	0x200003c0
 8001518:	20000018 	.word	0x20000018
 800151c:	20000344 	.word	0x20000344
 8001520:	80080081 	.word	0x80080081
 8001524:	20000398 	.word	0x20000398
 8001528:	2000039c 	.word	0x2000039c
 800152c:	200003a0 	.word	0x200003a0
 8001530:	08008738 	.word	0x08008738
 8001534:	200003c4 	.word	0x200003c4
 8001538:	200003a4 	.word	0x200003a4
 800153c:	200003b4 	.word	0x200003b4
						break;
					}

					voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fd83 	bl	800104c <Read_ADC>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	4b2c      	ldr	r3, [pc, #176]	@ (80015fc <main+0x554>)
 800154c:	601a      	str	r2, [r3, #0]
					voltage1 = Read_ADC(ADC_CHANNEL_1);
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff fd7c 	bl	800104c <Read_ADC>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <main+0x558>)
 800155a:	601a      	str	r2, [r3, #0]
					Ic = abs(voltage1 - 4095);
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <main+0x558>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 8001564:	2b00      	cmp	r3, #0
 8001566:	bfb8      	it	lt
 8001568:	425b      	neglt	r3, r3
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <main+0x55c>)
 800156c:	6013      	str	r3, [r2, #0]
					Ib = abs(voltage2 - 1241);
 800156e:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <main+0x554>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f2a3 43d9 	subw	r3, r3, #1241	@ 0x4d9
 8001576:	2b00      	cmp	r3, #0
 8001578:	bfb8      	it	lt
 800157a:	425b      	neglt	r3, r3
 800157c:	4a22      	ldr	r2, [pc, #136]	@ (8001608 <main+0x560>)
 800157e:	6013      	str	r3, [r2, #0]
					B3 = Ic / Ib;
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <main+0x55c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <main+0x560>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fb92 f3f3 	sdiv	r3, r2, r3
 800158c:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <main+0x564>)
 800158e:	6013      	str	r3, [r2, #0]
					sprintf(B2,
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <main+0x564>)
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <main+0x554>)
 8001596:	681c      	ldr	r4, [r3, #0]
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <main+0x558>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1a      	ldr	r2, [pc, #104]	@ (8001608 <main+0x560>)
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	4918      	ldr	r1, [pc, #96]	@ (8001604 <main+0x55c>)
 80015a2:	6809      	ldr	r1, [r1, #0]
 80015a4:	9102      	str	r1, [sp, #8]
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4623      	mov	r3, r4
 80015ac:	4602      	mov	r2, r0
 80015ae:	4918      	ldr	r1, [pc, #96]	@ (8001610 <main+0x568>)
 80015b0:	4818      	ldr	r0, [pc, #96]	@ (8001614 <main+0x56c>)
 80015b2:	f004 ff89 	bl	80064c8 <siprintf>
							"Ba= %d voltage2=%d    voltateg1=%d   Ib=%d  ıc=%d\n\r",
							B3, voltage2, voltage1, Ib, Ic);
					sprintf(volta, "Ba= %d   ", B3);
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <main+0x564>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4916      	ldr	r1, [pc, #88]	@ (8001618 <main+0x570>)
 80015be:	4817      	ldr	r0, [pc, #92]	@ (800161c <main+0x574>)
 80015c0:	f004 ff82 	bl	80064c8 <siprintf>
					lcd_put_cur(1, 6);
 80015c4:	2106      	movs	r1, #6
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fcce 	bl	8000f68 <lcd_put_cur>
					lcd_send_string(volta);
 80015cc:	4813      	ldr	r0, [pc, #76]	@ (800161c <main+0x574>)
 80015ce:	f7ff fd27 	bl	8001020 <lcd_send_string>
					HAL_UART_Transmit(&huart2, B2, strlen(B2), 1000);
 80015d2:	4810      	ldr	r0, [pc, #64]	@ (8001614 <main+0x56c>)
 80015d4:	f7fe fe54 	bl	8000280 <strlen>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <main+0x56c>)
 80015e2:	480f      	ldr	r0, [pc, #60]	@ (8001620 <main+0x578>)
 80015e4:	f003 fe9a 	bl	800531c <HAL_UART_Transmit>
					flag++;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <main+0x57c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <main+0x57c>)
 80015f0:	6013      	str	r3, [r2, #0]
					HAL_Delay(1000);
 80015f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f6:	f001 f97b 	bl	80028f0 <HAL_Delay>
					if (flag == 10) {
 80015fa:	e76a      	b.n	80014d2 <main+0x42a>
 80015fc:	2000038c 	.word	0x2000038c
 8001600:	20000390 	.word	0x20000390
 8001604:	20000398 	.word	0x20000398
 8001608:	2000039c 	.word	0x2000039c
 800160c:	200003a4 	.word	0x200003a4
 8001610:	08008740 	.word	0x08008740
 8001614:	200003d8 	.word	0x200003d8
 8001618:	08008778 	.word	0x08008778
 800161c:	200003ec 	.word	0x200003ec
 8001620:	20000344 	.word	0x20000344
 8001624:	200003b4 	.word	0x200003b4

				}
				//***********************************************************
			}

			else if (difference1 <= difference2) {
 8001628:	4b89      	ldr	r3, [pc, #548]	@ (8001850 <main+0x7a8>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b89      	ldr	r3, [pc, #548]	@ (8001854 <main+0x7ac>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	f73f ad5e 	bgt.w	80010f2 <main+0x4a>
				HAL_UART_Transmit(&huart2, npn0, strlen(npn0), 100);//npn ebc
 8001636:	4888      	ldr	r0, [pc, #544]	@ (8001858 <main+0x7b0>)
 8001638:	f7fe fe22 	bl	8000280 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	2364      	movs	r3, #100	@ 0x64
 8001642:	4985      	ldr	r1, [pc, #532]	@ (8001858 <main+0x7b0>)
 8001644:	4885      	ldr	r0, [pc, #532]	@ (800185c <main+0x7b4>)
 8001646:	f003 fe69 	bl	800531c <HAL_UART_Transmit>
				// lcd_init ();
				//lcd_clear();
				lcd_put_cur(0, 0);
 800164a:	2100      	movs	r1, #0
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fc8b 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(npn0);
 8001652:	4881      	ldr	r0, [pc, #516]	@ (8001858 <main+0x7b0>)
 8001654:	f7ff fce4 	bl	8001020 <lcd_send_string>
				HAL_Delay(300);
 8001658:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800165c:	f001 f948 	bl	80028f0 <HAL_Delay>
				//**********************************************************
				//b HESABI için confg
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2140      	movs	r1, #64	@ 0x40
 8001664:	487e      	ldr	r0, [pc, #504]	@ (8001860 <main+0x7b8>)
 8001666:	f001 ffdf 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 800166a:	4b7e      	ldr	r3, [pc, #504]	@ (8001864 <main+0x7bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2264      	movs	r2, #100	@ 0x64
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
				// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001672:	2201      	movs	r2, #1
 8001674:	2180      	movs	r1, #128	@ 0x80
 8001676:	487a      	ldr	r0, [pc, #488]	@ (8001860 <main+0x7b8>)
 8001678:	f001 ffd6 	bl	8003628 <HAL_GPIO_WritePin>
				voltage1 = Read_ADC(ADC_CHANNEL_8);
 800167c:	2008      	movs	r0, #8
 800167e:	f7ff fce5 	bl	800104c <Read_ADC>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	4b78      	ldr	r3, [pc, #480]	@ (8001868 <main+0x7c0>)
 8001688:	601a      	str	r2, [r3, #0]

				volt1 = (voltage1 / 4095 * 3.3);			 				//vc
 800168a:	4b77      	ldr	r3, [pc, #476]	@ (8001868 <main+0x7c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a77      	ldr	r2, [pc, #476]	@ (800186c <main+0x7c4>)
 8001690:	fb82 1203 	smull	r1, r2, r2, r3
 8001694:	441a      	add	r2, r3
 8001696:	12d2      	asrs	r2, r2, #11
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff49 	bl	8000534 <__aeabi_i2d>
 80016a2:	a369      	add	r3, pc, #420	@ (adr r3, 8001848 <main+0x7a0>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ffae 	bl	8000608 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa58 	bl	8000b68 <__aeabi_d2iz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001870 <main+0x7c8>)
 80016bc:	6013      	str	r3, [r2, #0]

				voltage2 = Read_ADC(ADC_CHANNEL_0);
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff fcc4 	bl	800104c <Read_ADC>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001874 <main+0x7cc>)
 80016ca:	601a      	str	r2, [r3, #0]
				volt2 = (voltage2 / 4095 * 3.3);			 				//vb
 80016cc:	4b69      	ldr	r3, [pc, #420]	@ (8001874 <main+0x7cc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a66      	ldr	r2, [pc, #408]	@ (800186c <main+0x7c4>)
 80016d2:	fb82 1203 	smull	r1, r2, r2, r3
 80016d6:	441a      	add	r2, r3
 80016d8:	12d2      	asrs	r2, r2, #11
 80016da:	17db      	asrs	r3, r3, #31
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff28 	bl	8000534 <__aeabi_i2d>
 80016e4:	a358      	add	r3, pc, #352	@ (adr r3, 8001848 <main+0x7a0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff8d 	bl	8000608 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa37 	bl	8000b68 <__aeabi_d2iz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001878 <main+0x7d0>)
 80016fe:	6013      	str	r3, [r2, #0]

				Ic = abs(voltage1 - 4095);
 8001700:	4b59      	ldr	r3, [pc, #356]	@ (8001868 <main+0x7c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 8001708:	2b00      	cmp	r3, #0
 800170a:	bfb8      	it	lt
 800170c:	425b      	neglt	r3, r3
 800170e:	4a5b      	ldr	r2, [pc, #364]	@ (800187c <main+0x7d4>)
 8001710:	6013      	str	r3, [r2, #0]
				Ib = abs(voltage2 - 4095);
 8001712:	4b58      	ldr	r3, [pc, #352]	@ (8001874 <main+0x7cc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 800171a:	2b00      	cmp	r3, #0
 800171c:	bfb8      	it	lt
 800171e:	425b      	neglt	r3, r3
 8001720:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <main+0x7d8>)
 8001722:	6013      	str	r3, [r2, #0]
				B = Ic / Ib;
 8001724:	4b55      	ldr	r3, [pc, #340]	@ (800187c <main+0x7d4>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <main+0x7d8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001730:	4a54      	ldr	r2, [pc, #336]	@ (8001884 <main+0x7dc>)
 8001732:	6013      	str	r3, [r2, #0]
				sprintf(B1, "Bs= %d", B);
 8001734:	4b53      	ldr	r3, [pc, #332]	@ (8001884 <main+0x7dc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4953      	ldr	r1, [pc, #332]	@ (8001888 <main+0x7e0>)
 800173c:	4853      	ldr	r0, [pc, #332]	@ (800188c <main+0x7e4>)
 800173e:	f004 fec3 	bl	80064c8 <siprintf>
				lcd_put_cur(1, 0);
 8001742:	2100      	movs	r1, #0
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fc0f 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(B1);
 800174a:	4850      	ldr	r0, [pc, #320]	@ (800188c <main+0x7e4>)
 800174c:	f7ff fc68 	bl	8001020 <lcd_send_string>
				//lcd_send_data(B);

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2140      	movs	r1, #64	@ 0x40
 8001754:	4842      	ldr	r0, [pc, #264]	@ (8001860 <main+0x7b8>)
 8001756:	f001 ff67 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 31);
 800175a:	4b42      	ldr	r3, [pc, #264]	@ (8001864 <main+0x7bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	221f      	movs	r2, #31
 8001760:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001762:	2201      	movs	r2, #1
 8001764:	2180      	movs	r1, #128	@ 0x80
 8001766:	483e      	ldr	r0, [pc, #248]	@ (8001860 <main+0x7b8>)
 8001768:	f001 ff5e 	bl	8003628 <HAL_GPIO_WritePin>
				Ic = 0;
 800176c:	4b43      	ldr	r3, [pc, #268]	@ (800187c <main+0x7d4>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
				Ib = 0;
 8001772:	4b43      	ldr	r3, [pc, #268]	@ (8001880 <main+0x7d8>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
				B3 = 0;
 8001778:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <main+0x7e8>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

				while (1) {

					if (flag == 10) {
 800177e:	4b45      	ldr	r3, [pc, #276]	@ (8001894 <main+0x7ec>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b0a      	cmp	r3, #10
 8001784:	f000 8344 	beq.w	8001e10 <main+0xd68>
						break;
					}

					voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fc5f 	bl	800104c <Read_ADC>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <main+0x7cc>)
 8001794:	601a      	str	r2, [r3, #0]

					//	volt2 = (voltage2/4095*3.3);//vb

					voltage1 = Read_ADC(ADC_CHANNEL_8);
 8001796:	2008      	movs	r0, #8
 8001798:	f7ff fc58 	bl	800104c <Read_ADC>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <main+0x7c0>)
 80017a2:	601a      	str	r2, [r3, #0]

					//volt1 = (voltage1/4095*3.3);//vc

					Ic = abs(voltage1 - 4095);
 80017a4:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <main+0x7c0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bfb8      	it	lt
 80017b0:	425b      	neglt	r3, r3
 80017b2:	4a32      	ldr	r2, [pc, #200]	@ (800187c <main+0x7d4>)
 80017b4:	6013      	str	r3, [r2, #0]
					Ib = abs(voltage2 - 1241);
 80017b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001874 <main+0x7cc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f2a3 43d9 	subw	r3, r3, #1241	@ 0x4d9
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bfb8      	it	lt
 80017c2:	425b      	neglt	r3, r3
 80017c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001880 <main+0x7d8>)
 80017c6:	6013      	str	r3, [r2, #0]
					//									 Iac=Ic/2000;

					B3 = Ic / Ib;
 80017c8:	4b2c      	ldr	r3, [pc, #176]	@ (800187c <main+0x7d4>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <main+0x7d8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001890 <main+0x7e8>)
 80017d6:	6013      	str	r3, [r2, #0]

					// B3=Ic/Ib;
					sprintf(B2,
 80017d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <main+0x7e8>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <main+0x7cc>)
 80017de:	681c      	ldr	r4, [r3, #0]
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <main+0x7c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a26      	ldr	r2, [pc, #152]	@ (8001880 <main+0x7d8>)
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	4924      	ldr	r1, [pc, #144]	@ (800187c <main+0x7d4>)
 80017ea:	6809      	ldr	r1, [r1, #0]
 80017ec:	9102      	str	r1, [sp, #8]
 80017ee:	9201      	str	r2, [sp, #4]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4623      	mov	r3, r4
 80017f4:	4602      	mov	r2, r0
 80017f6:	4928      	ldr	r1, [pc, #160]	@ (8001898 <main+0x7f0>)
 80017f8:	4828      	ldr	r0, [pc, #160]	@ (800189c <main+0x7f4>)
 80017fa:	f004 fe65 	bl	80064c8 <siprintf>
							"Ba= %d voltage2=%d    voltateg1=%d   Ib=%d  ıc=%d\n\r",
							B3, voltage2, voltage1, Ib, Ic);
					sprintf(volta, "Ba= %d    ", B3);
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <main+0x7e8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4926      	ldr	r1, [pc, #152]	@ (80018a0 <main+0x7f8>)
 8001806:	4827      	ldr	r0, [pc, #156]	@ (80018a4 <main+0x7fc>)
 8001808:	f004 fe5e 	bl	80064c8 <siprintf>
					lcd_put_cur(1, 8);
 800180c:	2108      	movs	r1, #8
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff fbaa 	bl	8000f68 <lcd_put_cur>
					lcd_send_string(volta);
 8001814:	4823      	ldr	r0, [pc, #140]	@ (80018a4 <main+0x7fc>)
 8001816:	f7ff fc03 	bl	8001020 <lcd_send_string>
					HAL_UART_Transmit(&huart2, B2, strlen(B2), 1000);
 800181a:	4820      	ldr	r0, [pc, #128]	@ (800189c <main+0x7f4>)
 800181c:	f7fe fd30 	bl	8000280 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001828:	491c      	ldr	r1, [pc, #112]	@ (800189c <main+0x7f4>)
 800182a:	480c      	ldr	r0, [pc, #48]	@ (800185c <main+0x7b4>)
 800182c:	f003 fd76 	bl	800531c <HAL_UART_Transmit>

					HAL_Delay(1000);
 8001830:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001834:	f001 f85c 	bl	80028f0 <HAL_Delay>

					flag++;
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <main+0x7ec>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a15      	ldr	r2, [pc, #84]	@ (8001894 <main+0x7ec>)
 8001840:	6013      	str	r3, [r2, #0]
					if (flag == 10) {
 8001842:	e79c      	b.n	800177e <main+0x6d6>
 8001844:	f3af 8000 	nop.w
 8001848:	66666666 	.word	0x66666666
 800184c:	400a6666 	.word	0x400a6666
 8001850:	200003bc 	.word	0x200003bc
 8001854:	200003c0 	.word	0x200003c0
 8001858:	20000004 	.word	0x20000004
 800185c:	20000344 	.word	0x20000344
 8001860:	40020000 	.word	0x40020000
 8001864:	200002fc 	.word	0x200002fc
 8001868:	20000390 	.word	0x20000390
 800186c:	80080081 	.word	0x80080081
 8001870:	200003ac 	.word	0x200003ac
 8001874:	2000038c 	.word	0x2000038c
 8001878:	200003a8 	.word	0x200003a8
 800187c:	20000398 	.word	0x20000398
 8001880:	2000039c 	.word	0x2000039c
 8001884:	200003a0 	.word	0x200003a0
 8001888:	08008738 	.word	0x08008738
 800188c:	200003c4 	.word	0x200003c4
 8001890:	200003a4 	.word	0x200003a4
 8001894:	200003b4 	.word	0x200003b4
 8001898:	08008740 	.word	0x08008740
 800189c:	200003d8 	.word	0x200003d8
 80018a0:	08008784 	.word	0x08008784
 80018a4:	200003ec 	.word	0x200003ec

			}

		}
		//bjt pnp
		else if (voltage3 < voltage2) {
 80018a8:	4bb1      	ldr	r3, [pc, #708]	@ (8001b70 <main+0xac8>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4bb1      	ldr	r3, [pc, #708]	@ (8001b74 <main+0xacc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f280 8297 	bge.w	8001de4 <main+0xd3c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2140      	movs	r1, #64	@ 0x40
 80018ba:	48af      	ldr	r0, [pc, #700]	@ (8001b78 <main+0xad0>)
 80018bc:	f001 feb4 	bl	8003628 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018c0:	4bae      	ldr	r3, [pc, #696]	@ (8001b7c <main+0xad4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	@ 0x34
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	48aa      	ldr	r0, [pc, #680]	@ (8001b78 <main+0xad0>)
 80018ce:	f001 feab 	bl	8003628 <HAL_GPIO_WritePin>

			HAL_Delay(100);
 80018d2:	2064      	movs	r0, #100	@ 0x64
 80018d4:	f001 f80c 	bl	80028f0 <HAL_Delay>

			voltage2 = Read_ADC(ADC_CHANNEL_0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fbb7 	bl	800104c <Read_ADC>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	4ba4      	ldr	r3, [pc, #656]	@ (8001b74 <main+0xacc>)
 80018e4:	601a      	str	r2, [r3, #0]
			// volt2 = (voltage2/1023*5.0);
			voltage1 = Read_ADC(ADC_CHANNEL_1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff fbb0 	bl	800104c <Read_ADC>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4ba3      	ldr	r3, [pc, #652]	@ (8001b80 <main+0xad8>)
 80018f2:	601a      	str	r2, [r3, #0]

			// volt1 = (voltage1/1023*5.0);
			difference1 = abs(voltage1 - voltage2); //voltage difference between pin2 and pin1
 80018f4:	4ba2      	ldr	r3, [pc, #648]	@ (8001b80 <main+0xad8>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b9e      	ldr	r3, [pc, #632]	@ (8001b74 <main+0xacc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bfb8      	it	lt
 8001902:	425b      	neglt	r3, r3
 8001904:	4a9f      	ldr	r2, [pc, #636]	@ (8001b84 <main+0xadc>)
 8001906:	6013      	str	r3, [r2, #0]

			HAL_Delay(100);
 8001908:	2064      	movs	r0, #100	@ 0x64
 800190a:	f000 fff1 	bl	80028f0 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2140      	movs	r1, #64	@ 0x40
 8001912:	4899      	ldr	r0, [pc, #612]	@ (8001b78 <main+0xad0>)
 8001914:	f001 fe88 	bl	8003628 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001918:	4b98      	ldr	r3, [pc, #608]	@ (8001b7c <main+0xad4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	2180      	movs	r1, #128	@ 0x80
 8001924:	4894      	ldr	r0, [pc, #592]	@ (8001b78 <main+0xad0>)
 8001926:	f001 fe7f 	bl	8003628 <HAL_GPIO_WritePin>

			HAL_Delay(100);
 800192a:	2064      	movs	r0, #100	@ 0x64
 800192c:	f000 ffe0 	bl	80028f0 <HAL_Delay>

			voltage3 = Read_ADC(ADC_CHANNEL_8);
 8001930:	2008      	movs	r0, #8
 8001932:	f7ff fb8b 	bl	800104c <Read_ADC>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b8d      	ldr	r3, [pc, #564]	@ (8001b70 <main+0xac8>)
 800193c:	601a      	str	r2, [r3, #0]
			// volt3 = (voltage3/1023*5.0);

			voltage2 = Read_ADC(ADC_CHANNEL_0);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff fb84 	bl	800104c <Read_ADC>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b8a      	ldr	r3, [pc, #552]	@ (8001b74 <main+0xacc>)
 800194a:	601a      	str	r2, [r3, #0]
			//volt2 = (voltage2/1023*5.0);

			difference2 = abs(voltage2 - voltage3); //voltage difference between pin3 and pin2
 800194c:	4b89      	ldr	r3, [pc, #548]	@ (8001b74 <main+0xacc>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b87      	ldr	r3, [pc, #540]	@ (8001b70 <main+0xac8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	4a8a      	ldr	r2, [pc, #552]	@ (8001b88 <main+0xae0>)
 800195e:	6013      	str	r3, [r2, #0]

			if (difference1 > difference2) {
 8001960:	4b88      	ldr	r3, [pc, #544]	@ (8001b84 <main+0xadc>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b88      	ldr	r3, [pc, #544]	@ (8001b88 <main+0xae0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	f340 8134 	ble.w	8001bd6 <main+0xb2e>
				HAL_UART_Transmit(&huart2, pnp0, strlen(pnp0), 100);
 800196e:	4887      	ldr	r0, [pc, #540]	@ (8001b8c <main+0xae4>)
 8001970:	f7fe fc86 	bl	8000280 <strlen>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	2364      	movs	r3, #100	@ 0x64
 800197a:	4984      	ldr	r1, [pc, #528]	@ (8001b8c <main+0xae4>)
 800197c:	4884      	ldr	r0, [pc, #528]	@ (8001b90 <main+0xae8>)
 800197e:	f003 fccd 	bl	800531c <HAL_UART_Transmit>
				// lcd_init ();
				//lcd_clear();
				lcd_put_cur(0, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff faef 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(pnp0);
 800198a:	4880      	ldr	r0, [pc, #512]	@ (8001b8c <main+0xae4>)
 800198c:	f7ff fb48 	bl	8001020 <lcd_send_string>
				HAL_Delay(300);
 8001990:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001994:	f000 ffac 	bl	80028f0 <HAL_Delay>
				//****************************
				//b HESABI için confg
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	2140      	movs	r1, #64	@ 0x40
 800199c:	4876      	ldr	r0, [pc, #472]	@ (8001b78 <main+0xad0>)
 800199e:	f001 fe43 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80019a2:	4b76      	ldr	r3, [pc, #472]	@ (8001b7c <main+0xad4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	635a      	str	r2, [r3, #52]	@ 0x34
				// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	4872      	ldr	r0, [pc, #456]	@ (8001b78 <main+0xad0>)
 80019b0:	f001 fe3a 	bl	8003628 <HAL_GPIO_WritePin>
				voltage1 = Read_ADC(ADC_CHANNEL_8);
 80019b4:	2008      	movs	r0, #8
 80019b6:	f7ff fb49 	bl	800104c <Read_ADC>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b70      	ldr	r3, [pc, #448]	@ (8001b80 <main+0xad8>)
 80019c0:	601a      	str	r2, [r3, #0]

				volt1 = (voltage1 / 4095 * 3.3);							//vc
 80019c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001b80 <main+0xad8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a73      	ldr	r2, [pc, #460]	@ (8001b94 <main+0xaec>)
 80019c8:	fb82 1203 	smull	r1, r2, r2, r3
 80019cc:	441a      	add	r2, r3
 80019ce:	12d2      	asrs	r2, r2, #11
 80019d0:	17db      	asrs	r3, r3, #31
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdad 	bl	8000534 <__aeabi_i2d>
 80019da:	a363      	add	r3, pc, #396	@ (adr r3, 8001b68 <main+0xac0>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fe12 	bl	8000608 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8bc 	bl	8000b68 <__aeabi_d2iz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a69      	ldr	r2, [pc, #420]	@ (8001b98 <main+0xaf0>)
 80019f4:	6013      	str	r3, [r2, #0]

				voltage2 = Read_ADC(ADC_CHANNEL_0);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fb28 	bl	800104c <Read_ADC>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b5c      	ldr	r3, [pc, #368]	@ (8001b74 <main+0xacc>)
 8001a02:	601a      	str	r2, [r3, #0]
				volt2 = (voltage2 / 4095 * 3.3);							//vb
 8001a04:	4b5b      	ldr	r3, [pc, #364]	@ (8001b74 <main+0xacc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a62      	ldr	r2, [pc, #392]	@ (8001b94 <main+0xaec>)
 8001a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a0e:	441a      	add	r2, r3
 8001a10:	12d2      	asrs	r2, r2, #11
 8001a12:	17db      	asrs	r3, r3, #31
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd8c 	bl	8000534 <__aeabi_i2d>
 8001a1c:	a352      	add	r3, pc, #328	@ (adr r3, 8001b68 <main+0xac0>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdf1 	bl	8000608 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f89b 	bl	8000b68 <__aeabi_d2iz>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a59      	ldr	r2, [pc, #356]	@ (8001b9c <main+0xaf4>)
 8001a36:	6013      	str	r3, [r2, #0]

				Ic = abs(voltage1 - 0);
 8001a38:	4b51      	ldr	r3, [pc, #324]	@ (8001b80 <main+0xad8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bfb8      	it	lt
 8001a40:	425b      	neglt	r3, r3
 8001a42:	4a57      	ldr	r2, [pc, #348]	@ (8001ba0 <main+0xaf8>)
 8001a44:	6013      	str	r3, [r2, #0]
				Ib = abs(voltage2 - 0);
 8001a46:	4b4b      	ldr	r3, [pc, #300]	@ (8001b74 <main+0xacc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfb8      	it	lt
 8001a4e:	425b      	neglt	r3, r3
 8001a50:	4a54      	ldr	r2, [pc, #336]	@ (8001ba4 <main+0xafc>)
 8001a52:	6013      	str	r3, [r2, #0]
				B = Ic / Ib;
 8001a54:	4b52      	ldr	r3, [pc, #328]	@ (8001ba0 <main+0xaf8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b52      	ldr	r3, [pc, #328]	@ (8001ba4 <main+0xafc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a60:	4a51      	ldr	r2, [pc, #324]	@ (8001ba8 <main+0xb00>)
 8001a62:	6013      	str	r3, [r2, #0]
				sprintf(B1, "Bs= %d", B);
 8001a64:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <main+0xb00>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4950      	ldr	r1, [pc, #320]	@ (8001bac <main+0xb04>)
 8001a6c:	4850      	ldr	r0, [pc, #320]	@ (8001bb0 <main+0xb08>)
 8001a6e:	f004 fd2b 	bl	80064c8 <siprintf>
				lcd_put_cur(1, 0);
 8001a72:	2100      	movs	r1, #0
 8001a74:	2001      	movs	r0, #1
 8001a76:	f7ff fa77 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(B1);
 8001a7a:	484d      	ldr	r0, [pc, #308]	@ (8001bb0 <main+0xb08>)
 8001a7c:	f7ff fad0 	bl	8001020 <lcd_send_string>
				//lcd_send_data(B);

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2140      	movs	r1, #64	@ 0x40
 8001a84:	483c      	ldr	r0, [pc, #240]	@ (8001b78 <main+0xad0>)
 8001a86:	f001 fdcf 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 62);
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b7c <main+0xad4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	223e      	movs	r2, #62	@ 0x3e
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2180      	movs	r1, #128	@ 0x80
 8001a96:	4838      	ldr	r0, [pc, #224]	@ (8001b78 <main+0xad0>)
 8001a98:	f001 fdc6 	bl	8003628 <HAL_GPIO_WritePin>
				Ic = 0;
 8001a9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <main+0xaf8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
				Ib = 0;
 8001aa2:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <main+0xafc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
				B3 = 0;
 8001aa8:	4b42      	ldr	r3, [pc, #264]	@ (8001bb4 <main+0xb0c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
				while (1) {

					if (flag == 10) {
 8001aae:	4b42      	ldr	r3, [pc, #264]	@ (8001bb8 <main+0xb10>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b0a      	cmp	r3, #10
 8001ab4:	f000 81af 	beq.w	8001e16 <main+0xd6e>
						break;
					}

					voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fac7 	bl	800104c <Read_ADC>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b74 <main+0xacc>)
 8001ac4:	601a      	str	r2, [r3, #0]

					//	volt2 = (voltage2/4095*3.3);//vb

					voltage1 = Read_ADC(ADC_CHANNEL_8);
 8001ac6:	2008      	movs	r0, #8
 8001ac8:	f7ff fac0 	bl	800104c <Read_ADC>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <main+0xad8>)
 8001ad2:	601a      	str	r2, [r3, #0]

					//volt1 = (voltage1/4095*3.3);//vc

					Ic = abs(voltage1 - 0);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <main+0xad8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bfb8      	it	lt
 8001adc:	425b      	neglt	r3, r3
 8001ade:	4a30      	ldr	r2, [pc, #192]	@ (8001ba0 <main+0xaf8>)
 8001ae0:	6013      	str	r3, [r2, #0]
					Ib = abs(voltage2 - 2482);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <main+0xacc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f6a3 13b2 	subw	r3, r3, #2482	@ 0x9b2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bfb8      	it	lt
 8001aee:	425b      	neglt	r3, r3
 8001af0:	4a2c      	ldr	r2, [pc, #176]	@ (8001ba4 <main+0xafc>)
 8001af2:	6013      	str	r3, [r2, #0]
					//									 Iac=Ic/2000;

					B3 = Ic / Ib;
 8001af4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba0 <main+0xaf8>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <main+0xafc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b00:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <main+0xb0c>)
 8001b02:	6013      	str	r3, [r2, #0]

					// B3=Ic/Ib;
					sprintf(B2,
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <main+0xb0c>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <main+0xacc>)
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <main+0xad8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a24      	ldr	r2, [pc, #144]	@ (8001ba4 <main+0xafc>)
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4922      	ldr	r1, [pc, #136]	@ (8001ba0 <main+0xaf8>)
 8001b16:	6809      	ldr	r1, [r1, #0]
 8001b18:	9102      	str	r1, [sp, #8]
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4623      	mov	r3, r4
 8001b20:	4602      	mov	r2, r0
 8001b22:	4926      	ldr	r1, [pc, #152]	@ (8001bbc <main+0xb14>)
 8001b24:	4826      	ldr	r0, [pc, #152]	@ (8001bc0 <main+0xb18>)
 8001b26:	f004 fccf 	bl	80064c8 <siprintf>
							"Ba= %d voltage2=%d    voltateg1=%d   Ib=%d  ıc=%d\n\r",
							B3, voltage2, voltage1, Ib, Ic);
					sprintf(volta, "Ba= %d    ", B3);
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <main+0xb0c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4924      	ldr	r1, [pc, #144]	@ (8001bc4 <main+0xb1c>)
 8001b32:	4825      	ldr	r0, [pc, #148]	@ (8001bc8 <main+0xb20>)
 8001b34:	f004 fcc8 	bl	80064c8 <siprintf>
					lcd_put_cur(1, 6);
 8001b38:	2106      	movs	r1, #6
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fa14 	bl	8000f68 <lcd_put_cur>
					lcd_send_string(volta);
 8001b40:	4821      	ldr	r0, [pc, #132]	@ (8001bc8 <main+0xb20>)
 8001b42:	f7ff fa6d 	bl	8001020 <lcd_send_string>
					HAL_UART_Transmit(&huart2, B2, strlen(B2), 1000);
 8001b46:	481e      	ldr	r0, [pc, #120]	@ (8001bc0 <main+0xb18>)
 8001b48:	f7fe fb9a 	bl	8000280 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b54:	491a      	ldr	r1, [pc, #104]	@ (8001bc0 <main+0xb18>)
 8001b56:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <main+0xae8>)
 8001b58:	f003 fbe0 	bl	800531c <HAL_UART_Transmit>
					flag++;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <main+0xb10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <main+0xb10>)
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e031      	b.n	8001bcc <main+0xb24>
 8001b68:	66666666 	.word	0x66666666
 8001b6c:	400a6666 	.word	0x400a6666
 8001b70:	20000394 	.word	0x20000394
 8001b74:	2000038c 	.word	0x2000038c
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	200002fc 	.word	0x200002fc
 8001b80:	20000390 	.word	0x20000390
 8001b84:	200003bc 	.word	0x200003bc
 8001b88:	200003c0 	.word	0x200003c0
 8001b8c:	2000002c 	.word	0x2000002c
 8001b90:	20000344 	.word	0x20000344
 8001b94:	80080081 	.word	0x80080081
 8001b98:	200003ac 	.word	0x200003ac
 8001b9c:	200003a8 	.word	0x200003a8
 8001ba0:	20000398 	.word	0x20000398
 8001ba4:	2000039c 	.word	0x2000039c
 8001ba8:	200003a0 	.word	0x200003a0
 8001bac:	08008738 	.word	0x08008738
 8001bb0:	200003c4 	.word	0x200003c4
 8001bb4:	200003a4 	.word	0x200003a4
 8001bb8:	200003b4 	.word	0x200003b4
 8001bbc:	08008740 	.word	0x08008740
 8001bc0:	200003d8 	.word	0x200003d8
 8001bc4:	08008784 	.word	0x08008784
 8001bc8:	200003ec 	.word	0x200003ec
					HAL_Delay(1000);
 8001bcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd0:	f000 fe8e 	bl	80028f0 <HAL_Delay>
					if (flag == 10) {
 8001bd4:	e76b      	b.n	8001aae <main+0xa06>

				}
				//********************
			} else if (difference1 <= difference2) {
 8001bd6:	4b96      	ldr	r3, [pc, #600]	@ (8001e30 <main+0xd88>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b96      	ldr	r3, [pc, #600]	@ (8001e34 <main+0xd8c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	f73f aa87 	bgt.w	80010f2 <main+0x4a>
				HAL_UART_Transmit(&huart2, pnp1, strlen(pnp1), 100);
 8001be4:	4894      	ldr	r0, [pc, #592]	@ (8001e38 <main+0xd90>)
 8001be6:	f7fe fb4b 	bl	8000280 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	2364      	movs	r3, #100	@ 0x64
 8001bf0:	4991      	ldr	r1, [pc, #580]	@ (8001e38 <main+0xd90>)
 8001bf2:	4892      	ldr	r0, [pc, #584]	@ (8001e3c <main+0xd94>)
 8001bf4:	f003 fb92 	bl	800531c <HAL_UART_Transmit>
				//lcd_init ();
				// lcd_clear();
				lcd_put_cur(0, 0);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff f9b4 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(pnp1);
 8001c00:	488d      	ldr	r0, [pc, #564]	@ (8001e38 <main+0xd90>)
 8001c02:	f7ff fa0d 	bl	8001020 <lcd_send_string>
				HAL_Delay(300);
 8001c06:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c0a:	f000 fe71 	bl	80028f0 <HAL_Delay>
				//****************************
				//b HESABI için confg
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2140      	movs	r1, #64	@ 0x40
 8001c12:	488b      	ldr	r0, [pc, #556]	@ (8001e40 <main+0xd98>)
 8001c14:	f001 fd08 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001c18:	4b8a      	ldr	r3, [pc, #552]	@ (8001e44 <main+0xd9c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	635a      	str	r2, [r3, #52]	@ 0x34
				// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	4886      	ldr	r0, [pc, #536]	@ (8001e40 <main+0xd98>)
 8001c26:	f001 fcff 	bl	8003628 <HAL_GPIO_WritePin>
				voltage1 = Read_ADC(ADC_CHANNEL_1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff fa0e 	bl	800104c <Read_ADC>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b84      	ldr	r3, [pc, #528]	@ (8001e48 <main+0xda0>)
 8001c36:	601a      	str	r2, [r3, #0]

				volt1 = (voltage1 / 4095 * 3.3);							//vc
 8001c38:	4b83      	ldr	r3, [pc, #524]	@ (8001e48 <main+0xda0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a83      	ldr	r2, [pc, #524]	@ (8001e4c <main+0xda4>)
 8001c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c42:	441a      	add	r2, r3
 8001c44:	12d2      	asrs	r2, r2, #11
 8001c46:	17db      	asrs	r3, r3, #31
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc72 	bl	8000534 <__aeabi_i2d>
 8001c50:	a375      	add	r3, pc, #468	@ (adr r3, 8001e28 <main+0xd80>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fcd7 	bl	8000608 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ff81 	bl	8000b68 <__aeabi_d2iz>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a79      	ldr	r2, [pc, #484]	@ (8001e50 <main+0xda8>)
 8001c6a:	6013      	str	r3, [r2, #0]

				voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff f9ed 	bl	800104c <Read_ADC>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b77      	ldr	r3, [pc, #476]	@ (8001e54 <main+0xdac>)
 8001c78:	601a      	str	r2, [r3, #0]
				volt2 = (voltage2 / 4095 * 3.3);							//vb
 8001c7a:	4b76      	ldr	r3, [pc, #472]	@ (8001e54 <main+0xdac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a73      	ldr	r2, [pc, #460]	@ (8001e4c <main+0xda4>)
 8001c80:	fb82 1203 	smull	r1, r2, r2, r3
 8001c84:	441a      	add	r2, r3
 8001c86:	12d2      	asrs	r2, r2, #11
 8001c88:	17db      	asrs	r3, r3, #31
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc51 	bl	8000534 <__aeabi_i2d>
 8001c92:	a365      	add	r3, pc, #404	@ (adr r3, 8001e28 <main+0xd80>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fcb6 	bl	8000608 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f7fe ff60 	bl	8000b68 <__aeabi_d2iz>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a6b      	ldr	r2, [pc, #428]	@ (8001e58 <main+0xdb0>)
 8001cac:	6013      	str	r3, [r2, #0]

				Ic = abs(voltage1 - 0);
 8001cae:	4b66      	ldr	r3, [pc, #408]	@ (8001e48 <main+0xda0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bfb8      	it	lt
 8001cb6:	425b      	neglt	r3, r3
 8001cb8:	4a68      	ldr	r2, [pc, #416]	@ (8001e5c <main+0xdb4>)
 8001cba:	6013      	str	r3, [r2, #0]
				Ib = abs(voltage2 - 0);
 8001cbc:	4b65      	ldr	r3, [pc, #404]	@ (8001e54 <main+0xdac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bfb8      	it	lt
 8001cc4:	425b      	neglt	r3, r3
 8001cc6:	4a66      	ldr	r2, [pc, #408]	@ (8001e60 <main+0xdb8>)
 8001cc8:	6013      	str	r3, [r2, #0]
				B = Ic / Ib;
 8001cca:	4b64      	ldr	r3, [pc, #400]	@ (8001e5c <main+0xdb4>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b64      	ldr	r3, [pc, #400]	@ (8001e60 <main+0xdb8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cd6:	4a63      	ldr	r2, [pc, #396]	@ (8001e64 <main+0xdbc>)
 8001cd8:	6013      	str	r3, [r2, #0]
				sprintf(B1, "Bs= %d", B);
 8001cda:	4b62      	ldr	r3, [pc, #392]	@ (8001e64 <main+0xdbc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4961      	ldr	r1, [pc, #388]	@ (8001e68 <main+0xdc0>)
 8001ce2:	4862      	ldr	r0, [pc, #392]	@ (8001e6c <main+0xdc4>)
 8001ce4:	f004 fbf0 	bl	80064c8 <siprintf>
				lcd_put_cur(1, 0);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff f93c 	bl	8000f68 <lcd_put_cur>
				lcd_send_string(B1);
 8001cf0:	485e      	ldr	r0, [pc, #376]	@ (8001e6c <main+0xdc4>)
 8001cf2:	f7ff f995 	bl	8001020 <lcd_send_string>
				//lcd_send_data(B);

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2140      	movs	r1, #64	@ 0x40
 8001cfa:	4851      	ldr	r0, [pc, #324]	@ (8001e40 <main+0xd98>)
 8001cfc:	f001 fc94 	bl	8003628 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 62);
 8001d00:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <main+0xd9c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	223e      	movs	r2, #62	@ 0x3e
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2180      	movs	r1, #128	@ 0x80
 8001d0c:	484c      	ldr	r0, [pc, #304]	@ (8001e40 <main+0xd98>)
 8001d0e:	f001 fc8b 	bl	8003628 <HAL_GPIO_WritePin>
				Ic = 0;
 8001d12:	4b52      	ldr	r3, [pc, #328]	@ (8001e5c <main+0xdb4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
				Ib = 0;
 8001d18:	4b51      	ldr	r3, [pc, #324]	@ (8001e60 <main+0xdb8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
				B3 = 0;
 8001d1e:	4b54      	ldr	r3, [pc, #336]	@ (8001e70 <main+0xdc8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
				while (1) {

					if (flag == 10) {
 8001d24:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <main+0xdcc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b0a      	cmp	r3, #10
 8001d2a:	d077      	beq.n	8001e1c <main+0xd74>
						break;
					}

					voltage2 = Read_ADC(ADC_CHANNEL_0);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff f98d 	bl	800104c <Read_ADC>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b47      	ldr	r3, [pc, #284]	@ (8001e54 <main+0xdac>)
 8001d38:	601a      	str	r2, [r3, #0]

					//	volt2 = (voltage2/4095*3.3);//vb

					voltage1 = Read_ADC(ADC_CHANNEL_1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff f986 	bl	800104c <Read_ADC>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <main+0xda0>)
 8001d46:	601a      	str	r2, [r3, #0]

					//volt1 = (voltage1/4095*3.3);//vc

					Ic = abs(voltage1 - 0);
 8001d48:	4b3f      	ldr	r3, [pc, #252]	@ (8001e48 <main+0xda0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bfb8      	it	lt
 8001d50:	425b      	neglt	r3, r3
 8001d52:	4a42      	ldr	r2, [pc, #264]	@ (8001e5c <main+0xdb4>)
 8001d54:	6013      	str	r3, [r2, #0]
					Ib = abs(voltage2 - 2482);
 8001d56:	4b3f      	ldr	r3, [pc, #252]	@ (8001e54 <main+0xdac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f6a3 13b2 	subw	r3, r3, #2482	@ 0x9b2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bfb8      	it	lt
 8001d62:	425b      	neglt	r3, r3
 8001d64:	4a3e      	ldr	r2, [pc, #248]	@ (8001e60 <main+0xdb8>)
 8001d66:	6013      	str	r3, [r2, #0]
					//									 Iac=Ic/2000;

					B3 = Ic / Ib;
 8001d68:	4b3c      	ldr	r3, [pc, #240]	@ (8001e5c <main+0xdb4>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e60 <main+0xdb8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d74:	4a3e      	ldr	r2, [pc, #248]	@ (8001e70 <main+0xdc8>)
 8001d76:	6013      	str	r3, [r2, #0]

					// B3=Ic/Ib;
					sprintf(B2,
 8001d78:	4b3d      	ldr	r3, [pc, #244]	@ (8001e70 <main+0xdc8>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	4b35      	ldr	r3, [pc, #212]	@ (8001e54 <main+0xdac>)
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <main+0xda0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a36      	ldr	r2, [pc, #216]	@ (8001e60 <main+0xdb8>)
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4934      	ldr	r1, [pc, #208]	@ (8001e5c <main+0xdb4>)
 8001d8a:	6809      	ldr	r1, [r1, #0]
 8001d8c:	9102      	str	r1, [sp, #8]
 8001d8e:	9201      	str	r2, [sp, #4]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4623      	mov	r3, r4
 8001d94:	4602      	mov	r2, r0
 8001d96:	4938      	ldr	r1, [pc, #224]	@ (8001e78 <main+0xdd0>)
 8001d98:	4838      	ldr	r0, [pc, #224]	@ (8001e7c <main+0xdd4>)
 8001d9a:	f004 fb95 	bl	80064c8 <siprintf>
							"Ba= %d voltage2=%d    voltateg1=%d   Ib=%d  ıc=%d\n\r",
							B3, voltage2, voltage1, Ib, Ic);
					sprintf(volta, "Ba= %d    ", B3);
 8001d9e:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <main+0xdc8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4936      	ldr	r1, [pc, #216]	@ (8001e80 <main+0xdd8>)
 8001da6:	4837      	ldr	r0, [pc, #220]	@ (8001e84 <main+0xddc>)
 8001da8:	f004 fb8e 	bl	80064c8 <siprintf>
					lcd_put_cur(1, 6);
 8001dac:	2106      	movs	r1, #6
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff f8da 	bl	8000f68 <lcd_put_cur>
					lcd_send_string(volta);
 8001db4:	4833      	ldr	r0, [pc, #204]	@ (8001e84 <main+0xddc>)
 8001db6:	f7ff f933 	bl	8001020 <lcd_send_string>
					HAL_UART_Transmit(&huart2, B2, strlen(B2), 1000);
 8001dba:	4830      	ldr	r0, [pc, #192]	@ (8001e7c <main+0xdd4>)
 8001dbc:	f7fe fa60 	bl	8000280 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc8:	492c      	ldr	r1, [pc, #176]	@ (8001e7c <main+0xdd4>)
 8001dca:	481c      	ldr	r0, [pc, #112]	@ (8001e3c <main+0xd94>)
 8001dcc:	f003 faa6 	bl	800531c <HAL_UART_Transmit>
					flag++;
 8001dd0:	4b28      	ldr	r3, [pc, #160]	@ (8001e74 <main+0xdcc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	4a27      	ldr	r2, [pc, #156]	@ (8001e74 <main+0xdcc>)
 8001dd8:	6013      	str	r3, [r2, #0]
					HAL_Delay(1000);
 8001dda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dde:	f000 fd87 	bl	80028f0 <HAL_Delay>
					if (flag == 10) {
 8001de2:	e79f      	b.n	8001d24 <main+0xc7c>
			}

		}

		else {
			HAL_UART_Transmit(&huart2, er, strlen(er), 100);
 8001de4:	4828      	ldr	r0, [pc, #160]	@ (8001e88 <main+0xde0>)
 8001de6:	f7fe fa4b 	bl	8000280 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	2364      	movs	r3, #100	@ 0x64
 8001df0:	4925      	ldr	r1, [pc, #148]	@ (8001e88 <main+0xde0>)
 8001df2:	4812      	ldr	r0, [pc, #72]	@ (8001e3c <main+0xd94>)
 8001df4:	f003 fa92 	bl	800531c <HAL_UART_Transmit>
			//lcd_init ();
			// lcd_clear();
			lcd_put_cur(0, 0);
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff f8b4 	bl	8000f68 <lcd_put_cur>
			lcd_send_string(er);
 8001e00:	4821      	ldr	r0, [pc, #132]	@ (8001e88 <main+0xde0>)
 8001e02:	f7ff f90d 	bl	8001020 <lcd_send_string>
 8001e06:	f7ff b974 	b.w	80010f2 <main+0x4a>
						break;
 8001e0a:	bf00      	nop
 8001e0c:	f7ff b971 	b.w	80010f2 <main+0x4a>
						break;
 8001e10:	bf00      	nop
 8001e12:	f7ff b96e 	b.w	80010f2 <main+0x4a>
						break;
 8001e16:	bf00      	nop
 8001e18:	f7ff b96b 	b.w	80010f2 <main+0x4a>
						break;
 8001e1c:	bf00      	nop
	while (1) {
 8001e1e:	f7ff b968 	b.w	80010f2 <main+0x4a>
 8001e22:	bf00      	nop
 8001e24:	f3af 8000 	nop.w
 8001e28:	66666666 	.word	0x66666666
 8001e2c:	400a6666 	.word	0x400a6666
 8001e30:	200003bc 	.word	0x200003bc
 8001e34:	200003c0 	.word	0x200003c0
 8001e38:	20000040 	.word	0x20000040
 8001e3c:	20000344 	.word	0x20000344
 8001e40:	40020000 	.word	0x40020000
 8001e44:	200002fc 	.word	0x200002fc
 8001e48:	20000390 	.word	0x20000390
 8001e4c:	80080081 	.word	0x80080081
 8001e50:	200003ac 	.word	0x200003ac
 8001e54:	2000038c 	.word	0x2000038c
 8001e58:	200003a8 	.word	0x200003a8
 8001e5c:	20000398 	.word	0x20000398
 8001e60:	2000039c 	.word	0x2000039c
 8001e64:	200003a0 	.word	0x200003a0
 8001e68:	08008738 	.word	0x08008738
 8001e6c:	200003c4 	.word	0x200003c4
 8001e70:	200003a4 	.word	0x200003a4
 8001e74:	200003b4 	.word	0x200003b4
 8001e78:	08008740 	.word	0x08008740
 8001e7c:	200003d8 	.word	0x200003d8
 8001e80:	08008784 	.word	0x08008784
 8001e84:	200003ec 	.word	0x200003ec
 8001e88:	20000068 	.word	0x20000068

08001e8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b094      	sub	sp, #80	@ 0x50
 8001e90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2230      	movs	r2, #48	@ 0x30
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f004 fb77 	bl	800658e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec0:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <SystemClock_Config+0xd4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ed8:	4a21      	ldr	r2, [pc, #132]	@ (8001f60 <SystemClock_Config+0xd4>)
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <SystemClock_Config+0xd4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eec:	2301      	movs	r3, #1
 8001eee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001f00:	2304      	movs	r3, #4
 8001f02:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001f04:	2354      	movs	r3, #84	@ 0x54
 8001f06:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f10:	f107 0320 	add.w	r3, r7, #32
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 f859 	bl	8003fcc <HAL_RCC_OscConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0x98>
		Error_Handler();
 8001f20:	f000 f9ba 	bl	8002298 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f24:	230f      	movs	r3, #15
 8001f26:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f34:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f3a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	2102      	movs	r1, #2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 faba 	bl	80044bc <HAL_RCC_ClockConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SystemClock_Config+0xc6>
		Error_Handler();
 8001f4e:	f000 f9a3 	bl	8002298 <Error_Handler>
	}
}
 8001f52:	bf00      	nop
 8001f54:	3750      	adds	r7, #80	@ 0x50
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000

08001f64 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001f78:	4a21      	ldr	r2, [pc, #132]	@ (8002000 <MX_ADC1_Init+0x9c>)
 8001f7a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001fa4:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <MX_ADC1_Init+0xa0>)
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001fae:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001fc2:	480e      	ldr	r0, [pc, #56]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001fc4:	f000 fcb8 	bl	8002938 <HAL_ADC_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001fce:	f000 f963 	bl	8002298 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001fde:	463b      	mov	r3, r7
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4806      	ldr	r0, [pc, #24]	@ (8001ffc <MX_ADC1_Init+0x98>)
 8001fe4:	f000 fe6c 	bl	8002cc0 <HAL_ADC_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001fee:	f000 f953 	bl	8002298 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000260 	.word	0x20000260
 8002000:	40012000 	.word	0x40012000
 8002004:	0f000001 	.word	0x0f000001

08002008 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_I2C1_Init+0x50>)
 800200e:	4a13      	ldr	r2, [pc, #76]	@ (800205c <MX_I2C1_Init+0x54>)
 8002010:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_I2C1_Init+0x50>)
 8002014:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <MX_I2C1_Init+0x58>)
 8002016:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_I2C1_Init+0x50>)
 8002026:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800202a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800202c:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <MX_I2C1_Init+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_I2C1_Init+0x50>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <MX_I2C1_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_I2C1_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <MX_I2C1_Init+0x50>)
 8002046:	f001 fb09 	bl	800365c <HAL_I2C_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002050:	f000 f922 	bl	8002298 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200002a8 	.word	0x200002a8
 800205c:	40005400 	.word	0x40005400
 8002060:	000186a0 	.word	0x000186a0

08002064 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b092      	sub	sp, #72	@ 0x48
 8002068:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800206a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2220      	movs	r2, #32
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fa7d 	bl	800658e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002094:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <MX_TIM1_Init+0xfc>)
 8002096:	4a33      	ldr	r2, [pc, #204]	@ (8002164 <MX_TIM1_Init+0x100>)
 8002098:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 800209a:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <MX_TIM1_Init+0xfc>)
 800209c:	2253      	movs	r2, #83	@ 0x53
 800209e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002160 <MX_TIM1_Init+0xfc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100;
 80020a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002160 <MX_TIM1_Init+0xfc>)
 80020a8:	2264      	movs	r2, #100	@ 0x64
 80020aa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002160 <MX_TIM1_Init+0xfc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80020b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002160 <MX_TIM1_Init+0xfc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b29      	ldr	r3, [pc, #164]	@ (8002160 <MX_TIM1_Init+0xfc>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80020be:	4828      	ldr	r0, [pc, #160]	@ (8002160 <MX_TIM1_Init+0xfc>)
 80020c0:	f002 fc1c 	bl	80048fc <HAL_TIM_PWM_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM1_Init+0x6a>
		Error_Handler();
 80020ca:	f000 f8e5 	bl	8002298 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80020d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020da:	4619      	mov	r1, r3
 80020dc:	4820      	ldr	r0, [pc, #128]	@ (8002160 <MX_TIM1_Init+0xfc>)
 80020de:	f003 f80d 	bl	80050fc <HAL_TIMEx_MasterConfigSynchronization>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 80020e8:	f000 f8d6 	bl	8002298 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ec:	2360      	movs	r3, #96	@ 0x60
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f8:	2300      	movs	r3, #0
 80020fa:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	4813      	ldr	r0, [pc, #76]	@ (8002160 <MX_TIM1_Init+0xfc>)
 8002112:	f002 fcf3 	bl	8004afc <HAL_TIM_PWM_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 800211c:	f000 f8bc 	bl	8002298 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002138:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4807      	ldr	r0, [pc, #28]	@ (8002160 <MX_TIM1_Init+0xfc>)
 8002144:	f003 f848 	bl	80051d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 800214e:	f000 f8a3 	bl	8002298 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002152:	4803      	ldr	r0, [pc, #12]	@ (8002160 <MX_TIM1_Init+0xfc>)
 8002154:	f000 f9a0 	bl	8002498 <HAL_TIM_MspPostInit>

}
 8002158:	bf00      	nop
 800215a:	3748      	adds	r7, #72	@ 0x48
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200002fc 	.word	0x200002fc
 8002164:	40010000 	.word	0x40010000

08002168 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <MX_USART2_UART_Init+0x50>)
 8002170:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002178:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800218e:	220c      	movs	r2, #12
 8002190:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800219e:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 80021a0:	f003 f86c 	bl	800527c <HAL_UART_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80021aa:	f000 f875 	bl	8002298 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000344 	.word	0x20000344
 80021b8:	40004400 	.word	0x40004400

080021bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b2d      	ldr	r3, [pc, #180]	@ (800228c <MX_GPIO_Init+0xd0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a2c      	ldr	r2, [pc, #176]	@ (800228c <MX_GPIO_Init+0xd0>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <MX_GPIO_Init+0xd0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b26      	ldr	r3, [pc, #152]	@ (800228c <MX_GPIO_Init+0xd0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a25      	ldr	r2, [pc, #148]	@ (800228c <MX_GPIO_Init+0xd0>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <MX_GPIO_Init+0xd0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <MX_GPIO_Init+0xd0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <MX_GPIO_Init+0xd0>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <MX_GPIO_Init+0xd0>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b18      	ldr	r3, [pc, #96]	@ (800228c <MX_GPIO_Init+0xd0>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a17      	ldr	r2, [pc, #92]	@ (800228c <MX_GPIO_Init+0xd0>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <MX_GPIO_Init+0xd0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	21e0      	movs	r1, #224	@ 0xe0
 8002246:	4812      	ldr	r0, [pc, #72]	@ (8002290 <MX_GPIO_Init+0xd4>)
 8002248:	f001 f9ee 	bl	8003628 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800224c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002250:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002252:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002256:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	480c      	ldr	r0, [pc, #48]	@ (8002294 <MX_GPIO_Init+0xd8>)
 8002264:	f001 f85c 	bl	8003320 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 PA7 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 8002268:	23e0      	movs	r3, #224	@ 0xe0
 800226a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	4804      	ldr	r0, [pc, #16]	@ (8002290 <MX_GPIO_Init+0xd4>)
 8002280:	f001 f84e 	bl	8003320 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	@ 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	40020000 	.word	0x40020000
 8002294:	40020800 	.word	0x40020800

08002298 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
}
 800229e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <Error_Handler+0x8>

080022a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_MspInit+0x5c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	4a13      	ldr	r2, [pc, #76]	@ (8002300 <HAL_MspInit+0x5c>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_MspInit+0x5c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <HAL_MspInit+0x5c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002300 <HAL_MspInit+0x5c>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_MspInit+0x5c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022e2:	2007      	movs	r0, #7
 80022e4:	f000 ffda 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 ffe0 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 fff9 	bl	80032ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40023800 	.word	0x40023800

08002304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a24      	ldr	r2, [pc, #144]	@ (80023b4 <HAL_ADC_MspInit+0xb0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d141      	bne.n	80023aa <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_ADC_MspInit+0xb4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800237a:	2313      	movs	r3, #19
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237e:	2303      	movs	r3, #3
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	480b      	ldr	r0, [pc, #44]	@ (80023bc <HAL_ADC_MspInit+0xb8>)
 800238e:	f000 ffc7 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002392:	2301      	movs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002396:	2303      	movs	r3, #3
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4806      	ldr	r0, [pc, #24]	@ (80023c0 <HAL_ADC_MspInit+0xbc>)
 80023a6:	f000 ffbb 	bl	8003320 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	@ 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40012000 	.word	0x40012000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400

080023c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <HAL_I2C_MspInit+0x84>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d12c      	bne.n	8002440 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_I2C_MspInit+0x88>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a17      	ldr	r2, [pc, #92]	@ (800244c <HAL_I2C_MspInit+0x88>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_I2C_MspInit+0x88>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002402:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002408:	2312      	movs	r3, #18
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002414:	2304      	movs	r3, #4
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	480c      	ldr	r0, [pc, #48]	@ (8002450 <HAL_I2C_MspInit+0x8c>)
 8002420:	f000 ff7e 	bl	8003320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_I2C_MspInit+0x88>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	4a07      	ldr	r2, [pc, #28]	@ (800244c <HAL_I2C_MspInit+0x88>)
 800242e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002432:	6413      	str	r3, [r2, #64]	@ 0x40
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_I2C_MspInit+0x88>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	@ 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40005400 	.word	0x40005400
 800244c:	40023800 	.word	0x40023800
 8002450:	40020400 	.word	0x40020400

08002454 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <HAL_TIM_PWM_MspInit+0x3c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10d      	bne.n	8002482 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_TIM_PWM_MspInit+0x40>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a09      	ldr	r2, [pc, #36]	@ (8002494 <HAL_TIM_PWM_MspInit+0x40>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <HAL_TIM_PWM_MspInit+0x40>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <HAL_TIM_MspPostInit+0x68>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d11e      	bne.n	80024f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_TIM_MspPostInit+0x6c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <HAL_TIM_MspPostInit+0x6c>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_TIM_MspPostInit+0x6c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	4619      	mov	r1, r3
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <HAL_TIM_MspPostInit+0x70>)
 80024f4:	f000 ff14 	bl	8003320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024f8:	bf00      	nop
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40010000 	.word	0x40010000
 8002504:	40023800 	.word	0x40023800
 8002508:	40020000 	.word	0x40020000

0800250c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <HAL_UART_MspInit+0x84>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12b      	bne.n	8002586 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <HAL_UART_MspInit+0x88>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <HAL_UART_MspInit+0x88>)
 8002538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253c:	6413      	str	r3, [r2, #64]	@ 0x40
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <HAL_UART_MspInit+0x88>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_UART_MspInit+0x88>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a10      	ldr	r2, [pc, #64]	@ (8002594 <HAL_UART_MspInit+0x88>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_UART_MspInit+0x88>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002566:	230c      	movs	r3, #12
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002576:	2307      	movs	r3, #7
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	@ (8002598 <HAL_UART_MspInit+0x8c>)
 8002582:	f000 fecd 	bl	8003320 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002586:	bf00      	nop
 8002588:	3728      	adds	r7, #40	@ 0x28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40004400 	.word	0x40004400
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <NMI_Handler+0x4>

080025a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <HardFault_Handler+0x4>

080025ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <MemManage_Handler+0x4>

080025b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <BusFault_Handler+0x4>

080025bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <UsageFault_Handler+0x4>

080025c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f2:	f000 f95d 	bl	80028b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}

080025fa <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80025fe:	f001 fccb 	bl	8003f98 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}

08002606 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_kill>:

int _kill(int pid, int sig)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002620:	f004 f808 	bl	8006634 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	2216      	movs	r2, #22
 8002628:	601a      	str	r2, [r3, #0]
  return -1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_exit>:

void _exit (int status)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263e:	f04f 31ff 	mov.w	r1, #4294967295
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffe7 	bl	8002616 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <_exit+0x12>

0800264c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e00a      	b.n	8002674 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800265e:	f3af 8000 	nop.w
 8002662:	4601      	mov	r1, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	b2ca      	uxtb	r2, r1
 800266c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	dbf0      	blt.n	800265e <_read+0x12>
  }

  return len;
 800267c:	687b      	ldr	r3, [r7, #4]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e009      	b.n	80026ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	60ba      	str	r2, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dbf1      	blt.n	8002698 <_write+0x12>
  }
  return len;
 80026b4:	687b      	ldr	r3, [r7, #4]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_close>:

int _close(int file)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e6:	605a      	str	r2, [r3, #4]
  return 0;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <_isatty>:

int _isatty(int file)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f003 ff6c 	bl	8006634 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	4a05      	ldr	r2, [pc, #20]	@ (800278c <_sbrk+0x64>)
 8002778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20018000 	.word	0x20018000
 8002788:	00000400 	.word	0x00000400
 800278c:	20000400 	.word	0x20000400
 8002790:	20000558 	.word	0x20000558

08002794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <SystemInit+0x20>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <SystemInit+0x20>)
 80027a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027bc:	f7ff ffea 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027c2:	490d      	ldr	r1, [pc, #52]	@ (80027f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c4:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027e6:	f003 ff2b 	bl	8006640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ea:	f7fe fc5d 	bl	80010a8 <main>
  bx  lr    
 80027ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80027fc:	08008b28 	.word	0x08008b28
  ldr r2, =_sbss
 8002800:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8002804:	20000554 	.word	0x20000554

08002808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC_IRQHandler>
	...

0800280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <HAL_Init+0x40>)
 8002816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800281a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <HAL_Init+0x40>)
 8002822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a07      	ldr	r2, [pc, #28]	@ (800284c <HAL_Init+0x40>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002834:	2003      	movs	r0, #3
 8002836:	f000 fd31 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283a:	2000      	movs	r0, #0
 800283c:	f000 f808 	bl	8002850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002840:	f7ff fd30 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023c00 	.word	0x40023c00

08002850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_InitTick+0x54>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_InitTick+0x58>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002866:	fbb3 f3f1 	udiv	r3, r3, r1
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fd49 	bl	8003306 <HAL_SYSTICK_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e00e      	b.n	800289c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d80a      	bhi.n	800289a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002884:	2200      	movs	r2, #0
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f000 fd11 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002890:	4a06      	ldr	r2, [pc, #24]	@ (80028ac <HAL_InitTick+0x5c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000070 	.word	0x20000070
 80028a8:	20000078 	.word	0x20000078
 80028ac:	20000074 	.word	0x20000074

080028b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_IncTick+0x20>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_IncTick+0x24>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <HAL_IncTick+0x24>)
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000078 	.word	0x20000078
 80028d4:	20000404 	.word	0x20000404

080028d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return uwTick;
 80028dc:	4b03      	ldr	r3, [pc, #12]	@ (80028ec <HAL_GetTick+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000404 	.word	0x20000404

080028f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f8:	f7ff ffee 	bl	80028d8 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d005      	beq.n	8002916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800290a:	4b0a      	ldr	r3, [pc, #40]	@ (8002934 <HAL_Delay+0x44>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002916:	bf00      	nop
 8002918:	f7ff ffde 	bl	80028d8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	429a      	cmp	r2, r3
 8002926:	d8f7      	bhi.n	8002918 <HAL_Delay+0x28>
  {
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000078 	.word	0x20000078

08002938 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e033      	b.n	80029b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fcd4 	bl	8002304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800297e:	f023 0302 	bic.w	r3, r3, #2
 8002982:	f043 0202 	orr.w	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 faba 	bl	8002f04 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80029a6:	e001      	b.n	80029ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_ADC_Start+0x1a>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e097      	b.n	8002b0a <HAL_ADC_Start+0x14a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d018      	beq.n	8002a22 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a00:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <HAL_ADC_Start+0x158>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a45      	ldr	r2, [pc, #276]	@ (8002b1c <HAL_ADC_Start+0x15c>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9a      	lsrs	r2, r3, #18
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a14:	e002      	b.n	8002a1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f9      	bne.n	8002a16 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d15f      	bne.n	8002af0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6e:	d106      	bne.n	8002a7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a74:	f023 0206 	bic.w	r2, r3, #6
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a8c:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <HAL_ADC_Start+0x160>)
 8002a8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a98:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d129      	bne.n	8002b08 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	e020      	b.n	8002b08 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a16      	ldr	r2, [pc, #88]	@ (8002b24 <HAL_ADC_Start+0x164>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d11b      	bne.n	8002b08 <HAL_ADC_Start+0x148>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d114      	bne.n	8002b08 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	e00b      	b.n	8002b08 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f043 0210 	orr.w	r2, r3, #16
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000070 	.word	0x20000070
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	40012300 	.word	0x40012300
 8002b24:	40012000 	.word	0x40012000

08002b28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_Stop+0x16>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e021      	b.n	8002b82 <HAL_ADC_Stop+0x5a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002baa:	d113      	bne.n	8002bd4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bba:	d10b      	bne.n	8002bd4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e063      	b.n	8002c9c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd4:	f7ff fe80 	bl	80028d8 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bda:	e021      	b.n	8002c20 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d01d      	beq.n	8002c20 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_ADC_PollForConversion+0x6c>
 8002bea:	f7ff fe75 	bl	80028d8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d212      	bcs.n	8002c20 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d00b      	beq.n	8002c20 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e03d      	b.n	8002c9c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d1d6      	bne.n	8002bdc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0212 	mvn.w	r2, #18
 8002c36:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d123      	bne.n	8002c9a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d111      	bne.n	8002c9a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e105      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x228>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d925      	bls.n	8002d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68d9      	ldr	r1, [r3, #12]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	400a      	ands	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	4603      	mov	r3, r0
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4403      	add	r3, r0
 8002d2a:	3b1e      	subs	r3, #30
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	e022      	b.n	8002d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4403      	add	r3, r0
 8002d74:	409a      	lsls	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d824      	bhi.n	8002dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b05      	subs	r3, #5
 8002d98:	221f      	movs	r2, #31
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b05      	subs	r3, #5
 8002dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dce:	e04c      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d824      	bhi.n	8002e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b23      	subs	r3, #35	@ 0x23
 8002dea:	221f      	movs	r2, #31
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b23      	subs	r3, #35	@ 0x23
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e20:	e023      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b41      	subs	r3, #65	@ 0x41
 8002e34:	221f      	movs	r2, #31
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b41      	subs	r3, #65	@ 0x41
 8002e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x234>)
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a21      	ldr	r2, [pc, #132]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x238>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d109      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1cc>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x238>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d123      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x21e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d003      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x1e6>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b11      	cmp	r3, #17
 8002ea4:	d11b      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d111      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_ADC_ConfigChannel+0x23c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	@ (8002f00 <HAL_ADC_ConfigChannel+0x240>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	0c9a      	lsrs	r2, r3, #18
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ed0:	e002      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f9      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40012300 	.word	0x40012300
 8002ef8:	40012000 	.word	0x40012000
 8002efc:	20000070 	.word	0x20000070
 8002f00:	431bde83 	.word	0x431bde83

08002f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0c:	4b79      	ldr	r3, [pc, #484]	@ (80030f4 <ADC_Init+0x1f0>)
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	021a      	lsls	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	4a58      	ldr	r2, [pc, #352]	@ (80030f8 <ADC_Init+0x1f4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e00f      	b.n	8003002 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003000:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0202 	bic.w	r2, r2, #2
 8003010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7e1b      	ldrb	r3, [r3, #24]
 800301c:	005a      	lsls	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800303e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800304e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	035a      	lsls	r2, r3, #13
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	e007      	b.n	8003078 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003076:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003086:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	3b01      	subs	r3, #1
 8003094:	051a      	lsls	r2, r3, #20
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030ba:	025a      	lsls	r2, r3, #9
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	029a      	lsls	r2, r3, #10
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012300 	.word	0x40012300
 80030f8:	0f000001 	.word	0x0f000001

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	@ (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	@ (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	@ (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	@ 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	@ 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	@ (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff8e 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff29 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff3e 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff8e 	bl	80031f0 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5d 	bl	800319c <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff31 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e159      	b.n	80035f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	f040 8148 	bne.w	80035ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d005      	beq.n	8003372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336e:	2b02      	cmp	r3, #2
 8003370:	d130      	bne.n	80033d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 0201 	and.w	r2, r3, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d017      	beq.n	8003410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d123      	bne.n	8003464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a2 	beq.w	80035ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b57      	ldr	r3, [pc, #348]	@ (8003608 <HAL_GPIO_Init+0x2e8>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	4a56      	ldr	r2, [pc, #344]	@ (8003608 <HAL_GPIO_Init+0x2e8>)
 80034b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034b6:	4b54      	ldr	r3, [pc, #336]	@ (8003608 <HAL_GPIO_Init+0x2e8>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c2:	4a52      	ldr	r2, [pc, #328]	@ (800360c <HAL_GPIO_Init+0x2ec>)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	220f      	movs	r2, #15
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a49      	ldr	r2, [pc, #292]	@ (8003610 <HAL_GPIO_Init+0x2f0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d019      	beq.n	8003522 <HAL_GPIO_Init+0x202>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a48      	ldr	r2, [pc, #288]	@ (8003614 <HAL_GPIO_Init+0x2f4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_GPIO_Init+0x1fe>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a47      	ldr	r2, [pc, #284]	@ (8003618 <HAL_GPIO_Init+0x2f8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00d      	beq.n	800351a <HAL_GPIO_Init+0x1fa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a46      	ldr	r2, [pc, #280]	@ (800361c <HAL_GPIO_Init+0x2fc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <HAL_GPIO_Init+0x1f6>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a45      	ldr	r2, [pc, #276]	@ (8003620 <HAL_GPIO_Init+0x300>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_GPIO_Init+0x1f2>
 800350e:	2304      	movs	r3, #4
 8003510:	e008      	b.n	8003524 <HAL_GPIO_Init+0x204>
 8003512:	2307      	movs	r3, #7
 8003514:	e006      	b.n	8003524 <HAL_GPIO_Init+0x204>
 8003516:	2303      	movs	r3, #3
 8003518:	e004      	b.n	8003524 <HAL_GPIO_Init+0x204>
 800351a:	2302      	movs	r3, #2
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x204>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x204>
 8003522:	2300      	movs	r3, #0
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f002 0203 	and.w	r2, r2, #3
 800352a:	0092      	lsls	r2, r2, #2
 800352c:	4093      	lsls	r3, r2
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003534:	4935      	ldr	r1, [pc, #212]	@ (800360c <HAL_GPIO_Init+0x2ec>)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003542:	4b38      	ldr	r3, [pc, #224]	@ (8003624 <HAL_GPIO_Init+0x304>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003566:	4a2f      	ldr	r2, [pc, #188]	@ (8003624 <HAL_GPIO_Init+0x304>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800356c:	4b2d      	ldr	r3, [pc, #180]	@ (8003624 <HAL_GPIO_Init+0x304>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003590:	4a24      	ldr	r2, [pc, #144]	@ (8003624 <HAL_GPIO_Init+0x304>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003596:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <HAL_GPIO_Init+0x304>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_GPIO_Init+0x304>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c0:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <HAL_GPIO_Init+0x304>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003624 <HAL_GPIO_Init+0x304>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	f67f aea2 	bls.w	800333c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	3724      	adds	r7, #36	@ 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40013800 	.word	0x40013800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020400 	.word	0x40020400
 8003618:	40020800 	.word	0x40020800
 800361c:	40020c00 	.word	0x40020c00
 8003620:	40021000 	.word	0x40021000
 8003624:	40013c00 	.word	0x40013c00

08003628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
 8003634:	4613      	mov	r3, r2
 8003636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003644:	e003      	b.n	800364e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003646:	887b      	ldrh	r3, [r7, #2]
 8003648:	041a      	lsls	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	619a      	str	r2, [r3, #24]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e12b      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fe9e 	bl	80023c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	@ 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036c0:	f001 f8f4 	bl	80048ac <HAL_RCC_GetPCLK1Freq>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a81      	ldr	r2, [pc, #516]	@ (80038d0 <HAL_I2C_Init+0x274>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d807      	bhi.n	80036e0 <HAL_I2C_Init+0x84>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a80      	ldr	r2, [pc, #512]	@ (80038d4 <HAL_I2C_Init+0x278>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bf94      	ite	ls
 80036d8:	2301      	movls	r3, #1
 80036da:	2300      	movhi	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e006      	b.n	80036ee <HAL_I2C_Init+0x92>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a7d      	ldr	r2, [pc, #500]	@ (80038d8 <HAL_I2C_Init+0x27c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0e7      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a78      	ldr	r2, [pc, #480]	@ (80038dc <HAL_I2C_Init+0x280>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9b      	lsrs	r3, r3, #18
 8003700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a6a      	ldr	r2, [pc, #424]	@ (80038d0 <HAL_I2C_Init+0x274>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d802      	bhi.n	8003730 <HAL_I2C_Init+0xd4>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	e009      	b.n	8003744 <HAL_I2C_Init+0xe8>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	4a69      	ldr	r2, [pc, #420]	@ (80038e0 <HAL_I2C_Init+0x284>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	3301      	adds	r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	430b      	orrs	r3, r1
 800374a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003756:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	495c      	ldr	r1, [pc, #368]	@ (80038d0 <HAL_I2C_Init+0x274>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d819      	bhi.n	8003798 <HAL_I2C_Init+0x13c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e59      	subs	r1, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003772:	1c59      	adds	r1, r3, #1
 8003774:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003778:	400b      	ands	r3, r1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_I2C_Init+0x138>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1e59      	subs	r1, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fbb1 f3f3 	udiv	r3, r1, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	e051      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003794:	2304      	movs	r3, #4
 8003796:	e04f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <HAL_I2C_Init+0x168>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e012      	b.n	80037ea <HAL_I2C_Init+0x18e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	0099      	lsls	r1, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x196>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <HAL_I2C_Init+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1e58      	subs	r0, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	440b      	add	r3, r1
 8003808:	fbb0 f3f3 	udiv	r3, r0, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003816:	e00f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	0099      	lsls	r1, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	6809      	ldr	r1, [r1, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003866:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6911      	ldr	r1, [r2, #16]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68d2      	ldr	r2, [r2, #12]
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	000186a0 	.word	0x000186a0
 80038d4:	001e847f 	.word	0x001e847f
 80038d8:	003d08ff 	.word	0x003d08ff
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	10624dd3 	.word	0x10624dd3

080038e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	461a      	mov	r2, r3
 80038f0:	460b      	mov	r3, r1
 80038f2:	817b      	strh	r3, [r7, #10]
 80038f4:	4613      	mov	r3, r2
 80038f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7fe ffee 	bl	80028d8 <HAL_GetTick>
 80038fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b20      	cmp	r3, #32
 8003908:	f040 80e0 	bne.w	8003acc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2319      	movs	r3, #25
 8003912:	2201      	movs	r2, #1
 8003914:	4970      	ldr	r1, [pc, #448]	@ (8003ad8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f964 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
 8003924:	e0d3      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_I2C_Master_Transmit+0x50>
 8003930:	2302      	movs	r3, #2
 8003932:	e0cc      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d007      	beq.n	800395a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2221      	movs	r2, #33	@ 0x21
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2210      	movs	r2, #16
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	893a      	ldrh	r2, [r7, #8]
 800398a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a50      	ldr	r2, [pc, #320]	@ (8003adc <HAL_I2C_Master_Transmit+0x1f8>)
 800399a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800399c:	8979      	ldrh	r1, [r7, #10]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f89c 	bl	8003ae0 <I2C_MasterRequestWrite>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e08d      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039c8:	e066      	b.n	8003a98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fa22 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d107      	bne.n	80039f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06b      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d11b      	bne.n	8003a6c <HAL_I2C_Master_Transmit+0x188>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d017      	beq.n	8003a6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	6a39      	ldr	r1, [r7, #32]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fa19 	bl	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d107      	bne.n	8003a94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e01a      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d194      	bne.n	80039ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	00100002 	.word	0x00100002
 8003adc:	ffff0000 	.word	0xffff0000

08003ae0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	460b      	mov	r3, r1
 8003aee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d006      	beq.n	8003b0a <I2C_MasterRequestWrite+0x2a>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d003      	beq.n	8003b0a <I2C_MasterRequestWrite+0x2a>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b08:	d108      	bne.n	8003b1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e00b      	b.n	8003b34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	2b12      	cmp	r3, #18
 8003b22:	d107      	bne.n	8003b34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f84f 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b5a:	d103      	bne.n	8003b64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e035      	b.n	8003bd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b70:	d108      	bne.n	8003b84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b72:	897b      	ldrh	r3, [r7, #10]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	e01b      	b.n	8003bbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b84:	897b      	ldrh	r3, [r7, #10]
 8003b86:	11db      	asrs	r3, r3, #7
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0306 	and.w	r3, r3, #6
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f063 030f 	orn	r3, r3, #15
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	490e      	ldr	r1, [pc, #56]	@ (8003bdc <I2C_MasterRequestWrite+0xfc>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f898 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e010      	b.n	8003bd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4907      	ldr	r1, [pc, #28]	@ (8003be0 <I2C_MasterRequestWrite+0x100>)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f888 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	00010008 	.word	0x00010008
 8003be0:	00010002 	.word	0x00010002

08003be4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf4:	e048      	b.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d044      	beq.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7fe fe6b 	bl	80028d8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d139      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10d      	bne.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	43da      	mvns	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	e00c      	b.n	8003c54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d116      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e023      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10d      	bne.n	8003cae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	e00c      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d093      	beq.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ce6:	e071      	b.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf6:	d123      	bne.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e067      	b.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d041      	beq.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d48:	f7fe fdc6 	bl	80028d8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d302      	bcc.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d136      	bne.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10c      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4013      	ands	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e00b      	b.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e021      	b.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10c      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e00b      	b.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af6d 	bne.w	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e24:	e034      	b.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f886 	bl	8003f38 <I2C_IsAcknowledgeFailed>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e034      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d028      	beq.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7fe fd4b 	bl	80028d8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d11d      	bne.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b80      	cmp	r3, #128	@ 0x80
 8003e60:	d016      	beq.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e007      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b80      	cmp	r3, #128	@ 0x80
 8003e9c:	d1c3      	bne.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb4:	e034      	b.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f83e 	bl	8003f38 <I2C_IsAcknowledgeFailed>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e034      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d028      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fe fd03 	bl	80028d8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11d      	bne.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d016      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d1c3      	bne.n	8003eb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d11b      	bne.n	8003f88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003fa8:	f000 f808 	bl	8003fbc <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003fac:	4b02      	ldr	r3, [pc, #8]	@ (8003fb8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003fae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003fb2:	615a      	str	r2, [r3, #20]
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40013c00 	.word	0x40013c00

08003fbc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e267      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d075      	beq.n	80040d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fea:	4b88      	ldr	r3, [pc, #544]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4b85      	ldr	r3, [pc, #532]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b82      	ldr	r3, [pc, #520]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800400e:	d10b      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4b7e      	ldr	r3, [pc, #504]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d05b      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d157      	bne.n	80040d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e242      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x74>
 8004032:	4b76      	ldr	r3, [pc, #472]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a75      	ldr	r2, [pc, #468]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e01d      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x98>
 800404a:	4b70      	ldr	r3, [pc, #448]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6f      	ldr	r2, [pc, #444]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b6d      	ldr	r3, [pc, #436]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6c      	ldr	r2, [pc, #432]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004064:	4b69      	ldr	r3, [pc, #420]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a68      	ldr	r2, [pc, #416]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b66      	ldr	r3, [pc, #408]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a65      	ldr	r2, [pc, #404]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800407a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d013      	beq.n	80040ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe fc28 	bl	80028d8 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe fc24 	bl	80028d8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e207      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b5b      	ldr	r3, [pc, #364]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0xc0>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fc14 	bl	80028d8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fe fc10 	bl	80028d8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	@ 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e1f3      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	4b51      	ldr	r3, [pc, #324]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0xe8>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040e2:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b47      	ldr	r3, [pc, #284]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d11c      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fa:	4b44      	ldr	r3, [pc, #272]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	4b41      	ldr	r3, [pc, #260]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1c7      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4937      	ldr	r1, [pc, #220]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	e03a      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413c:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <HAL_RCC_OscConfig+0x244>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe fbc9 	bl	80028d8 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414a:	f7fe fbc5 	bl	80028d8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1a8      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	4b2b      	ldr	r3, [pc, #172]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	4b28      	ldr	r3, [pc, #160]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4925      	ldr	r1, [pc, #148]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
 800417c:	e015      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417e:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <HAL_RCC_OscConfig+0x244>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe fba8 	bl	80028d8 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418c:	f7fe fba4 	bl	80028d8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e187      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	4b1b      	ldr	r3, [pc, #108]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d036      	beq.n	8004224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041be:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <HAL_RCC_OscConfig+0x248>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe fb88 	bl	80028d8 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe fb84 	bl	80028d8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e167      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <HAL_RCC_OscConfig+0x240>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x200>
 80041ea:	e01b      	b.n	8004224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ec:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <HAL_RCC_OscConfig+0x248>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f2:	f7fe fb71 	bl	80028d8 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	e00e      	b.n	8004218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fe fb6d 	bl	80028d8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d907      	bls.n	8004218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e150      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
 800420c:	40023800 	.word	0x40023800
 8004210:	42470000 	.word	0x42470000
 8004214:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004218:	4b88      	ldr	r3, [pc, #544]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 800421a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ea      	bne.n	80041fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8097 	beq.w	8004360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004236:	4b81      	ldr	r3, [pc, #516]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10f      	bne.n	8004262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	4b7d      	ldr	r3, [pc, #500]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	4a7c      	ldr	r2, [pc, #496]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	@ 0x40
 8004252:	4b7a      	ldr	r3, [pc, #488]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b77      	ldr	r3, [pc, #476]	@ (8004440 <HAL_RCC_OscConfig+0x474>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d118      	bne.n	80042a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426e:	4b74      	ldr	r3, [pc, #464]	@ (8004440 <HAL_RCC_OscConfig+0x474>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a73      	ldr	r2, [pc, #460]	@ (8004440 <HAL_RCC_OscConfig+0x474>)
 8004274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427a:	f7fe fb2d 	bl	80028d8 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004282:	f7fe fb29 	bl	80028d8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e10c      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004294:	4b6a      	ldr	r3, [pc, #424]	@ (8004440 <HAL_RCC_OscConfig+0x474>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x2ea>
 80042a8:	4b64      	ldr	r3, [pc, #400]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ac:	4a63      	ldr	r2, [pc, #396]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b4:	e01c      	b.n	80042f0 <HAL_RCC_OscConfig+0x324>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x30c>
 80042be:	4b5f      	ldr	r3, [pc, #380]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	4a5e      	ldr	r2, [pc, #376]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042c4:	f043 0304 	orr.w	r3, r3, #4
 80042c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ca:	4b5c      	ldr	r3, [pc, #368]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ce:	4a5b      	ldr	r2, [pc, #364]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0x324>
 80042d8:	4b58      	ldr	r3, [pc, #352]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	4a57      	ldr	r2, [pc, #348]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e4:	4b55      	ldr	r3, [pc, #340]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e8:	4a54      	ldr	r2, [pc, #336]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80042ea:	f023 0304 	bic.w	r3, r3, #4
 80042ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d015      	beq.n	8004324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fe faee 	bl	80028d8 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fe faea 	bl	80028d8 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e0cb      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	4b49      	ldr	r3, [pc, #292]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ee      	beq.n	8004300 <HAL_RCC_OscConfig+0x334>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004324:	f7fe fad8 	bl	80028d8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fe fad4 	bl	80028d8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0b5      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004342:	4b3e      	ldr	r3, [pc, #248]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ee      	bne.n	800432c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d105      	bne.n	8004360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004354:	4b39      	ldr	r3, [pc, #228]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	4a38      	ldr	r2, [pc, #224]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80a1 	beq.w	80044ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800436a:	4b34      	ldr	r3, [pc, #208]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b08      	cmp	r3, #8
 8004374:	d05c      	beq.n	8004430 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d141      	bne.n	8004402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b31      	ldr	r3, [pc, #196]	@ (8004444 <HAL_RCC_OscConfig+0x478>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe faa8 	bl	80028d8 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fe faa4 	bl	80028d8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e087      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	4b27      	ldr	r3, [pc, #156]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	3b01      	subs	r3, #1
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	491b      	ldr	r1, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <HAL_RCC_OscConfig+0x478>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043da:	f7fe fa7d 	bl	80028d8 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e2:	f7fe fa79 	bl	80028d8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e05c      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f4:	4b11      	ldr	r3, [pc, #68]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x416>
 8004400:	e054      	b.n	80044ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b10      	ldr	r3, [pc, #64]	@ (8004444 <HAL_RCC_OscConfig+0x478>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fe fa66 	bl	80028d8 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fe fa62 	bl	80028d8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e045      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCC_OscConfig+0x470>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x444>
 800442e:	e03d      	b.n	80044ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d107      	bne.n	8004448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e038      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
 800443c:	40023800 	.word	0x40023800
 8004440:	40007000 	.word	0x40007000
 8004444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d028      	beq.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d121      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d11a      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004478:	4013      	ands	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800447e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004480:	4293      	cmp	r3, r2
 8004482:	d111      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	3b01      	subs	r3, #1
 8004492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0cc      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b68      	ldr	r3, [pc, #416]	@ (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d90c      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b65      	ldr	r3, [pc, #404]	@ (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b63      	ldr	r3, [pc, #396]	@ (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0b8      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004510:	4b59      	ldr	r3, [pc, #356]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a58      	ldr	r2, [pc, #352]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800451a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004528:	4b53      	ldr	r3, [pc, #332]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b50      	ldr	r3, [pc, #320]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	494d      	ldr	r1, [pc, #308]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d044      	beq.n	80045dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b47      	ldr	r3, [pc, #284]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d119      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d003      	beq.n	800457a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457a:	4b3f      	ldr	r3, [pc, #252]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458a:	4b3b      	ldr	r3, [pc, #236]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e067      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459a:	4b37      	ldr	r3, [pc, #220]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4934      	ldr	r1, [pc, #208]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ac:	f7fe f994 	bl	80028d8 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fe f990 	bl	80028d8 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 020c 	and.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1eb      	bne.n	80045b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045dc:	4b25      	ldr	r3, [pc, #148]	@ (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d20c      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b22      	ldr	r3, [pc, #136]	@ (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e032      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4916      	ldr	r1, [pc, #88]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462e:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004642:	f000 f821 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8004646:	4602      	mov	r2, r0
 8004648:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	490a      	ldr	r1, [pc, #40]	@ (800467c <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	5ccb      	ldrb	r3, [r1, r3]
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800465e:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe f8f4 	bl	8002850 <HAL_InitTick>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023c00 	.word	0x40023c00
 8004678:	40023800 	.word	0x40023800
 800467c:	08008790 	.word	0x08008790
 8004680:	20000070 	.word	0x20000070
 8004684:	20000074 	.word	0x20000074

08004688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800468c:	b094      	sub	sp, #80	@ 0x50
 800468e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a0:	4b79      	ldr	r3, [pc, #484]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d00d      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x40>
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	f200 80e1 	bhi.w	8004874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x34>
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ba:	e0db      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b73      	ldr	r3, [pc, #460]	@ (800488c <HAL_RCC_GetSysClockFreq+0x204>)
 80046be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046c0:	e0db      	b.n	800487a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c2:	4b73      	ldr	r3, [pc, #460]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x208>)
 80046c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046c6:	e0d8      	b.n	800487a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d063      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046de:	4b6a      	ldr	r3, [pc, #424]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	2200      	movs	r2, #0
 80046e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046f2:	2300      	movs	r3, #0
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046fa:	4622      	mov	r2, r4
 80046fc:	462b      	mov	r3, r5
 80046fe:	f04f 0000 	mov.w	r0, #0
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	0159      	lsls	r1, r3, #5
 8004708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800470c:	0150      	lsls	r0, r2, #5
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4621      	mov	r1, r4
 8004714:	1a51      	subs	r1, r2, r1
 8004716:	6139      	str	r1, [r7, #16]
 8004718:	4629      	mov	r1, r5
 800471a:	eb63 0301 	sbc.w	r3, r3, r1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800472c:	4659      	mov	r1, fp
 800472e:	018b      	lsls	r3, r1, #6
 8004730:	4651      	mov	r1, sl
 8004732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004736:	4651      	mov	r1, sl
 8004738:	018a      	lsls	r2, r1, #6
 800473a:	4651      	mov	r1, sl
 800473c:	ebb2 0801 	subs.w	r8, r2, r1
 8004740:	4659      	mov	r1, fp
 8004742:	eb63 0901 	sbc.w	r9, r3, r1
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800475a:	4690      	mov	r8, r2
 800475c:	4699      	mov	r9, r3
 800475e:	4623      	mov	r3, r4
 8004760:	eb18 0303 	adds.w	r3, r8, r3
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	462b      	mov	r3, r5
 8004768:	eb49 0303 	adc.w	r3, r9, r3
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800477a:	4629      	mov	r1, r5
 800477c:	024b      	lsls	r3, r1, #9
 800477e:	4621      	mov	r1, r4
 8004780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004784:	4621      	mov	r1, r4
 8004786:	024a      	lsls	r2, r1, #9
 8004788:	4610      	mov	r0, r2
 800478a:	4619      	mov	r1, r3
 800478c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800478e:	2200      	movs	r2, #0
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004798:	f7fc fa0e 	bl	8000bb8 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047a4:	e058      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a6:	4b38      	ldr	r3, [pc, #224]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	099b      	lsrs	r3, r3, #6
 80047ac:	2200      	movs	r2, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	4611      	mov	r1, r2
 80047b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	2300      	movs	r3, #0
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80047bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	0159      	lsls	r1, r3, #5
 80047ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d2:	0150      	lsls	r0, r2, #5
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4641      	mov	r1, r8
 80047da:	ebb2 0a01 	subs.w	sl, r2, r1
 80047de:	4649      	mov	r1, r9
 80047e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047f8:	ebb2 040a 	subs.w	r4, r2, sl
 80047fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	00eb      	lsls	r3, r5, #3
 800480a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480e:	00e2      	lsls	r2, r4, #3
 8004810:	4614      	mov	r4, r2
 8004812:	461d      	mov	r5, r3
 8004814:	4643      	mov	r3, r8
 8004816:	18e3      	adds	r3, r4, r3
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	464b      	mov	r3, r9
 800481c:	eb45 0303 	adc.w	r3, r5, r3
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800482e:	4629      	mov	r1, r5
 8004830:	028b      	lsls	r3, r1, #10
 8004832:	4621      	mov	r1, r4
 8004834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004838:	4621      	mov	r1, r4
 800483a:	028a      	lsls	r2, r1, #10
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004842:	2200      	movs	r2, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	61fa      	str	r2, [r7, #28]
 8004848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800484c:	f7fc f9b4 	bl	8000bb8 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x200>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	3301      	adds	r3, #1
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004868:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800486a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004872:	e002      	b.n	800487a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <HAL_RCC_GetSysClockFreq+0x204>)
 8004876:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800487a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800487c:	4618      	mov	r0, r3
 800487e:	3750      	adds	r7, #80	@ 0x50
 8004880:	46bd      	mov	sp, r7
 8004882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	00f42400 	.word	0x00f42400
 8004890:	007a1200 	.word	0x007a1200

08004894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004898:	4b03      	ldr	r3, [pc, #12]	@ (80048a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000070 	.word	0x20000070

080048ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b0:	f7ff fff0 	bl	8004894 <HAL_RCC_GetHCLKFreq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	0a9b      	lsrs	r3, r3, #10
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	4903      	ldr	r1, [pc, #12]	@ (80048d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c2:	5ccb      	ldrb	r3, [r1, r3]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40023800 	.word	0x40023800
 80048d0:	080087a0 	.word	0x080087a0

080048d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048d8:	f7ff ffdc 	bl	8004894 <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	0b5b      	lsrs	r3, r3, #13
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4903      	ldr	r1, [pc, #12]	@ (80048f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40023800 	.word	0x40023800
 80048f8:	080087a0 	.word	0x080087a0

080048fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e041      	b.n	8004992 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fd fd96 	bl	8002454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f000 f9a0 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_TIM_PWM_Start+0x24>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	e022      	b.n	8004a06 <HAL_TIM_PWM_Start+0x6a>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d109      	bne.n	80049da <HAL_TIM_PWM_Start+0x3e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e015      	b.n	8004a06 <HAL_TIM_PWM_Start+0x6a>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d109      	bne.n	80049f4 <HAL_TIM_PWM_Start+0x58>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e008      	b.n	8004a06 <HAL_TIM_PWM_Start+0x6a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e068      	b.n	8004ae0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0x82>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a1c:	e013      	b.n	8004a46 <HAL_TIM_PWM_Start+0xaa>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_PWM_Start+0x92>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a2c:	e00b      	b.n	8004a46 <HAL_TIM_PWM_Start+0xaa>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Start+0xa2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a3c:	e003      	b.n	8004a46 <HAL_TIM_PWM_Start+0xaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb2e 	bl	80050b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a23      	ldr	r2, [pc, #140]	@ (8004ae8 <HAL_TIM_PWM_Start+0x14c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <HAL_TIM_PWM_Start+0x14c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d018      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x10e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a80:	d013      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x10e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_TIM_PWM_Start+0x150>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x10e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <HAL_TIM_PWM_Start+0x154>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x10e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <HAL_TIM_PWM_Start+0x158>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x10e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <HAL_TIM_PWM_Start+0x15c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d111      	bne.n	8004ace <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b06      	cmp	r3, #6
 8004aba:	d010      	beq.n	8004ade <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	e007      	b.n	8004ade <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40014000 	.word	0x40014000

08004afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e0ae      	b.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	f200 809f 	bhi.w	8004c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004c69 	.word	0x08004c69
 8004b38:	08004c69 	.word	0x08004c69
 8004b3c:	08004c69 	.word	0x08004c69
 8004b40:	08004ba5 	.word	0x08004ba5
 8004b44:	08004c69 	.word	0x08004c69
 8004b48:	08004c69 	.word	0x08004c69
 8004b4c:	08004c69 	.word	0x08004c69
 8004b50:	08004be7 	.word	0x08004be7
 8004b54:	08004c69 	.word	0x08004c69
 8004b58:	08004c69 	.word	0x08004c69
 8004b5c:	08004c69 	.word	0x08004c69
 8004b60:	08004c27 	.word	0x08004c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f914 	bl	8004d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0208 	orr.w	r2, r2, #8
 8004b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0204 	bic.w	r2, r2, #4
 8004b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6999      	ldr	r1, [r3, #24]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	619a      	str	r2, [r3, #24]
      break;
 8004ba2:	e064      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f95a 	bl	8004e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6999      	ldr	r1, [r3, #24]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	619a      	str	r2, [r3, #24]
      break;
 8004be4:	e043      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 f9a5 	bl	8004f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0208 	orr.w	r2, r2, #8
 8004c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0204 	bic.w	r2, r2, #4
 8004c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69d9      	ldr	r1, [r3, #28]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	61da      	str	r2, [r3, #28]
      break;
 8004c24:	e023      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f9ef 	bl	8005010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69d9      	ldr	r1, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	021a      	lsls	r2, r3, #8
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	61da      	str	r2, [r3, #28]
      break;
 8004c66:	e002      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3a      	ldr	r2, [pc, #232]	@ (8004d7c <TIM_Base_SetConfig+0xfc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00f      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9e:	d00b      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a37      	ldr	r2, [pc, #220]	@ (8004d80 <TIM_Base_SetConfig+0x100>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a36      	ldr	r2, [pc, #216]	@ (8004d84 <TIM_Base_SetConfig+0x104>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a35      	ldr	r2, [pc, #212]	@ (8004d88 <TIM_Base_SetConfig+0x108>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8004d7c <TIM_Base_SetConfig+0xfc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01b      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd8:	d017      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a28      	ldr	r2, [pc, #160]	@ (8004d80 <TIM_Base_SetConfig+0x100>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a27      	ldr	r2, [pc, #156]	@ (8004d84 <TIM_Base_SetConfig+0x104>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a26      	ldr	r2, [pc, #152]	@ (8004d88 <TIM_Base_SetConfig+0x108>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a25      	ldr	r2, [pc, #148]	@ (8004d8c <TIM_Base_SetConfig+0x10c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a24      	ldr	r2, [pc, #144]	@ (8004d90 <TIM_Base_SetConfig+0x110>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a23      	ldr	r2, [pc, #140]	@ (8004d94 <TIM_Base_SetConfig+0x114>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0e      	ldr	r2, [pc, #56]	@ (8004d7c <TIM_Base_SetConfig+0xfc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d103      	bne.n	8004d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d105      	bne.n	8004d6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	611a      	str	r2, [r3, #16]
  }
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800

08004d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f023 0201 	bic.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 0302 	bic.w	r3, r3, #2
 8004de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <TIM_OC1_SetConfig+0xc8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d10c      	bne.n	8004e0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0308 	bic.w	r3, r3, #8
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 0304 	bic.w	r3, r3, #4
 8004e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a13      	ldr	r2, [pc, #76]	@ (8004e60 <TIM_OC1_SetConfig+0xc8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d111      	bne.n	8004e3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	621a      	str	r2, [r3, #32]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40010000 	.word	0x40010000

08004e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0210 	bic.w	r2, r3, #16
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0320 	bic.w	r3, r3, #32
 8004eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8004f38 <TIM_OC2_SetConfig+0xd4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d10d      	bne.n	8004ee0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	@ (8004f38 <TIM_OC2_SetConfig+0xd4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d113      	bne.n	8004f10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000

08004f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1d      	ldr	r2, [pc, #116]	@ (800500c <TIM_OC3_SetConfig+0xd0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10d      	bne.n	8004fb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a14      	ldr	r2, [pc, #80]	@ (800500c <TIM_OC3_SetConfig+0xd0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d113      	bne.n	8004fe6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	621a      	str	r2, [r3, #32]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40010000 	.word	0x40010000

08005010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800505a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	031b      	lsls	r3, r3, #12
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a10      	ldr	r2, [pc, #64]	@ (80050ac <TIM_OC4_SetConfig+0x9c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	019b      	lsls	r3, r3, #6
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010000 	.word	0x40010000

080050b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	2201      	movs	r2, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	401a      	ands	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	431a      	orrs	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e050      	b.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1c      	ldr	r2, [pc, #112]	@ (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005160:	d013      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a18      	ldr	r2, [pc, #96]	@ (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a16      	ldr	r2, [pc, #88]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a15      	ldr	r2, [pc, #84]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a13      	ldr	r2, [pc, #76]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10c      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4313      	orrs	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e03d      	b.n	8005270 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e042      	b.n	8005314 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fd f932 	bl	800250c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	@ 0x24
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f973 	bl	80055ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	@ 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b20      	cmp	r3, #32
 800533a:	d175      	bne.n	8005428 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_UART_Transmit+0x2c>
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e06e      	b.n	800542a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2221      	movs	r2, #33	@ 0x21
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535a:	f7fd fabd 	bl	80028d8 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005374:	d108      	bne.n	8005388 <HAL_UART_Transmit+0x6c>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e003      	b.n	8005390 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005390:	e02e      	b.n	80053f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	2180      	movs	r1, #128	@ 0x80
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f848 	bl	8005432 <UART_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e03a      	b.n	800542a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3302      	adds	r3, #2
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e007      	b.n	80053e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1cb      	bne.n	8005392 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	2140      	movs	r1, #64	@ 0x40
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f814 	bl	8005432 <UART_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e006      	b.n	800542a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	4613      	mov	r3, r2
 8005440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005442:	e03b      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d037      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544c:	f7fd fa44 	bl	80028d8 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <UART_WaitOnFlagUntilTimeout+0x30>
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e03a      	b.n	80054dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d023      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b80      	cmp	r3, #128	@ 0x80
 8005478:	d020      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b40      	cmp	r3, #64	@ 0x40
 800547e:	d01d      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d116      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f81d 	bl	80054e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2208      	movs	r2, #8
 80054ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e00f      	b.n	80054dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d0b4      	beq.n	8005444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b095      	sub	sp, #84	@ 0x54
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800550c:	643a      	str	r2, [r7, #64]	@ 0x40
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800551a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3314      	adds	r3, #20
 8005526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3314      	adds	r3, #20
 800553e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005540:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005542:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	2b01      	cmp	r3, #1
 800555a:	d119      	bne.n	8005590 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	60bb      	str	r3, [r7, #8]
   return(result);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f023 0310 	bic.w	r3, r3, #16
 8005572:	647b      	str	r3, [r7, #68]	@ 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557c:	61ba      	str	r2, [r7, #24]
 800557e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6979      	ldr	r1, [r7, #20]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	613b      	str	r3, [r7, #16]
   return(result);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800559e:	bf00      	nop
 80055a0:	3754      	adds	r7, #84	@ 0x54
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b0:	b0c0      	sub	sp, #256	@ 0x100
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	ea40 0301 	orr.w	r3, r0, r1
 80055d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005604:	f021 010c 	bic.w	r1, r1, #12
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005612:	430b      	orrs	r3, r1
 8005614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005626:	6999      	ldr	r1, [r3, #24]
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	ea40 0301 	orr.w	r3, r0, r1
 8005632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b8f      	ldr	r3, [pc, #572]	@ (8005878 <UART_SetConfig+0x2cc>)
 800563c:	429a      	cmp	r2, r3
 800563e:	d005      	beq.n	800564c <UART_SetConfig+0xa0>
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b8d      	ldr	r3, [pc, #564]	@ (800587c <UART_SetConfig+0x2d0>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d104      	bne.n	8005656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7ff f942 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8005650:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005654:	e003      	b.n	800565e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005656:	f7ff f929 	bl	80048ac <HAL_RCC_GetPCLK1Freq>
 800565a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005668:	f040 810c 	bne.w	8005884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800566c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005670:	2200      	movs	r2, #0
 8005672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005676:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800567a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800567e:	4622      	mov	r2, r4
 8005680:	462b      	mov	r3, r5
 8005682:	1891      	adds	r1, r2, r2
 8005684:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005686:	415b      	adcs	r3, r3
 8005688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800568a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800568e:	4621      	mov	r1, r4
 8005690:	eb12 0801 	adds.w	r8, r2, r1
 8005694:	4629      	mov	r1, r5
 8005696:	eb43 0901 	adc.w	r9, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ae:	4690      	mov	r8, r2
 80056b0:	4699      	mov	r9, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb18 0303 	adds.w	r3, r8, r3
 80056b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056bc:	462b      	mov	r3, r5
 80056be:	eb49 0303 	adc.w	r3, r9, r3
 80056c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056da:	460b      	mov	r3, r1
 80056dc:	18db      	adds	r3, r3, r3
 80056de:	653b      	str	r3, [r7, #80]	@ 0x50
 80056e0:	4613      	mov	r3, r2
 80056e2:	eb42 0303 	adc.w	r3, r2, r3
 80056e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056f0:	f7fb fa62 	bl	8000bb8 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b61      	ldr	r3, [pc, #388]	@ (8005880 <UART_SetConfig+0x2d4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011c      	lsls	r4, r3, #4
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800570c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800571c:	415b      	adcs	r3, r3
 800571e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005724:	4641      	mov	r1, r8
 8005726:	eb12 0a01 	adds.w	sl, r2, r1
 800572a:	4649      	mov	r1, r9
 800572c:	eb43 0b01 	adc.w	fp, r3, r1
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800573c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005744:	4692      	mov	sl, r2
 8005746:	469b      	mov	fp, r3
 8005748:	4643      	mov	r3, r8
 800574a:	eb1a 0303 	adds.w	r3, sl, r3
 800574e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005752:	464b      	mov	r3, r9
 8005754:	eb4b 0303 	adc.w	r3, fp, r3
 8005758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005768:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800576c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005770:	460b      	mov	r3, r1
 8005772:	18db      	adds	r3, r3, r3
 8005774:	643b      	str	r3, [r7, #64]	@ 0x40
 8005776:	4613      	mov	r3, r2
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	647b      	str	r3, [r7, #68]	@ 0x44
 800577e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005786:	f7fb fa17 	bl	8000bb8 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4611      	mov	r1, r2
 8005790:	4b3b      	ldr	r3, [pc, #236]	@ (8005880 <UART_SetConfig+0x2d4>)
 8005792:	fba3 2301 	umull	r2, r3, r3, r1
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2264      	movs	r2, #100	@ 0x64
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	1acb      	subs	r3, r1, r3
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057a6:	4b36      	ldr	r3, [pc, #216]	@ (8005880 <UART_SetConfig+0x2d4>)
 80057a8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057b4:	441c      	add	r4, r3
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057d0:	415b      	adcs	r3, r3
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057d8:	4641      	mov	r1, r8
 80057da:	1851      	adds	r1, r2, r1
 80057dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80057de:	4649      	mov	r1, r9
 80057e0:	414b      	adcs	r3, r1
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057f0:	4659      	mov	r1, fp
 80057f2:	00cb      	lsls	r3, r1, #3
 80057f4:	4651      	mov	r1, sl
 80057f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fa:	4651      	mov	r1, sl
 80057fc:	00ca      	lsls	r2, r1, #3
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	4603      	mov	r3, r0
 8005804:	4642      	mov	r2, r8
 8005806:	189b      	adds	r3, r3, r2
 8005808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800580c:	464b      	mov	r3, r9
 800580e:	460a      	mov	r2, r1
 8005810:	eb42 0303 	adc.w	r3, r2, r3
 8005814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005824:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800582c:	460b      	mov	r3, r1
 800582e:	18db      	adds	r3, r3, r3
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005832:	4613      	mov	r3, r2
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800583a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800583e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005842:	f7fb f9b9 	bl	8000bb8 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <UART_SetConfig+0x2d4>)
 800584c:	fba3 1302 	umull	r1, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	2164      	movs	r1, #100	@ 0x64
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	3332      	adds	r3, #50	@ 0x32
 800585e:	4a08      	ldr	r2, [pc, #32]	@ (8005880 <UART_SetConfig+0x2d4>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	f003 0207 	and.w	r2, r3, #7
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4422      	add	r2, r4
 8005872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005874:	e106      	b.n	8005a84 <UART_SetConfig+0x4d8>
 8005876:	bf00      	nop
 8005878:	40011000 	.word	0x40011000
 800587c:	40011400 	.word	0x40011400
 8005880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005888:	2200      	movs	r2, #0
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800588e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005896:	4642      	mov	r2, r8
 8005898:	464b      	mov	r3, r9
 800589a:	1891      	adds	r1, r2, r2
 800589c:	6239      	str	r1, [r7, #32]
 800589e:	415b      	adcs	r3, r3
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058a6:	4641      	mov	r1, r8
 80058a8:	1854      	adds	r4, r2, r1
 80058aa:	4649      	mov	r1, r9
 80058ac:	eb43 0501 	adc.w	r5, r3, r1
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	00eb      	lsls	r3, r5, #3
 80058ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058be:	00e2      	lsls	r2, r4, #3
 80058c0:	4614      	mov	r4, r2
 80058c2:	461d      	mov	r5, r3
 80058c4:	4643      	mov	r3, r8
 80058c6:	18e3      	adds	r3, r4, r3
 80058c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058cc:	464b      	mov	r3, r9
 80058ce:	eb45 0303 	adc.w	r3, r5, r3
 80058d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058f2:	4629      	mov	r1, r5
 80058f4:	008b      	lsls	r3, r1, #2
 80058f6:	4621      	mov	r1, r4
 80058f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fc:	4621      	mov	r1, r4
 80058fe:	008a      	lsls	r2, r1, #2
 8005900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005904:	f7fb f958 	bl	8000bb8 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4b60      	ldr	r3, [pc, #384]	@ (8005a90 <UART_SetConfig+0x4e4>)
 800590e:	fba3 2302 	umull	r2, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	011c      	lsls	r4, r3, #4
 8005916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800591a:	2200      	movs	r2, #0
 800591c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	1891      	adds	r1, r2, r2
 800592e:	61b9      	str	r1, [r7, #24]
 8005930:	415b      	adcs	r3, r3
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005938:	4641      	mov	r1, r8
 800593a:	1851      	adds	r1, r2, r1
 800593c:	6139      	str	r1, [r7, #16]
 800593e:	4649      	mov	r1, r9
 8005940:	414b      	adcs	r3, r1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005950:	4659      	mov	r1, fp
 8005952:	00cb      	lsls	r3, r1, #3
 8005954:	4651      	mov	r1, sl
 8005956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800595a:	4651      	mov	r1, sl
 800595c:	00ca      	lsls	r2, r1, #3
 800595e:	4610      	mov	r0, r2
 8005960:	4619      	mov	r1, r3
 8005962:	4603      	mov	r3, r0
 8005964:	4642      	mov	r2, r8
 8005966:	189b      	adds	r3, r3, r2
 8005968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800596c:	464b      	mov	r3, r9
 800596e:	460a      	mov	r2, r1
 8005970:	eb42 0303 	adc.w	r3, r2, r3
 8005974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005990:	4649      	mov	r1, r9
 8005992:	008b      	lsls	r3, r1, #2
 8005994:	4641      	mov	r1, r8
 8005996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800599a:	4641      	mov	r1, r8
 800599c:	008a      	lsls	r2, r1, #2
 800599e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059a2:	f7fb f909 	bl	8000bb8 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	4b38      	ldr	r3, [pc, #224]	@ (8005a90 <UART_SetConfig+0x4e4>)
 80059ae:	fba3 2301 	umull	r2, r3, r3, r1
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	2264      	movs	r2, #100	@ 0x64
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	1acb      	subs	r3, r1, r3
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	3332      	adds	r3, #50	@ 0x32
 80059c0:	4a33      	ldr	r2, [pc, #204]	@ (8005a90 <UART_SetConfig+0x4e4>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059cc:	441c      	add	r4, r3
 80059ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d2:	2200      	movs	r2, #0
 80059d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	415b      	adcs	r3, r3
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ec:	4641      	mov	r1, r8
 80059ee:	1851      	adds	r1, r2, r1
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	4649      	mov	r1, r9
 80059f4:	414b      	adcs	r3, r1
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a04:	4659      	mov	r1, fp
 8005a06:	00cb      	lsls	r3, r1, #3
 8005a08:	4651      	mov	r1, sl
 8005a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0e:	4651      	mov	r1, sl
 8005a10:	00ca      	lsls	r2, r1, #3
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	4642      	mov	r2, r8
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a1e:	464b      	mov	r3, r9
 8005a20:	460a      	mov	r2, r1
 8005a22:	eb42 0303 	adc.w	r3, r2, r3
 8005a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a32:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a40:	4649      	mov	r1, r9
 8005a42:	008b      	lsls	r3, r1, #2
 8005a44:	4641      	mov	r1, r8
 8005a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	008a      	lsls	r2, r1, #2
 8005a4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a52:	f7fb f8b1 	bl	8000bb8 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <UART_SetConfig+0x4e4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	@ 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	3332      	adds	r3, #50	@ 0x32
 8005a6e:	4a08      	ldr	r2, [pc, #32]	@ (8005a90 <UART_SetConfig+0x4e4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 020f 	and.w	r2, r3, #15
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4422      	add	r2, r4
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a90:	51eb851f 	.word	0x51eb851f

08005a94 <__cvt>:
 8005a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	ec57 6b10 	vmov	r6, r7, d0
 8005a9c:	2f00      	cmp	r7, #0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	bfbb      	ittet	lt
 8005aa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005aaa:	461f      	movlt	r7, r3
 8005aac:	2300      	movge	r3, #0
 8005aae:	232d      	movlt	r3, #45	@ 0x2d
 8005ab0:	700b      	strb	r3, [r1, #0]
 8005ab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ab8:	4691      	mov	r9, r2
 8005aba:	f023 0820 	bic.w	r8, r3, #32
 8005abe:	bfbc      	itt	lt
 8005ac0:	4632      	movlt	r2, r6
 8005ac2:	4616      	movlt	r6, r2
 8005ac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ac8:	d005      	beq.n	8005ad6 <__cvt+0x42>
 8005aca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ace:	d100      	bne.n	8005ad2 <__cvt+0x3e>
 8005ad0:	3401      	adds	r4, #1
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	e000      	b.n	8005ad8 <__cvt+0x44>
 8005ad6:	2103      	movs	r1, #3
 8005ad8:	ab03      	add	r3, sp, #12
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	ab02      	add	r3, sp, #8
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	ec47 6b10 	vmov	d0, r6, r7
 8005ae4:	4653      	mov	r3, sl
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	f000 fe5a 	bl	80067a0 <_dtoa_r>
 8005aec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005af0:	4605      	mov	r5, r0
 8005af2:	d119      	bne.n	8005b28 <__cvt+0x94>
 8005af4:	f019 0f01 	tst.w	r9, #1
 8005af8:	d00e      	beq.n	8005b18 <__cvt+0x84>
 8005afa:	eb00 0904 	add.w	r9, r0, r4
 8005afe:	2200      	movs	r2, #0
 8005b00:	2300      	movs	r3, #0
 8005b02:	4630      	mov	r0, r6
 8005b04:	4639      	mov	r1, r7
 8005b06:	f7fa ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0a:	b108      	cbz	r0, 8005b10 <__cvt+0x7c>
 8005b0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b10:	2230      	movs	r2, #48	@ 0x30
 8005b12:	9b03      	ldr	r3, [sp, #12]
 8005b14:	454b      	cmp	r3, r9
 8005b16:	d31e      	bcc.n	8005b56 <__cvt+0xc2>
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b1c:	1b5b      	subs	r3, r3, r5
 8005b1e:	4628      	mov	r0, r5
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	b004      	add	sp, #16
 8005b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b2c:	eb00 0904 	add.w	r9, r0, r4
 8005b30:	d1e5      	bne.n	8005afe <__cvt+0x6a>
 8005b32:	7803      	ldrb	r3, [r0, #0]
 8005b34:	2b30      	cmp	r3, #48	@ 0x30
 8005b36:	d10a      	bne.n	8005b4e <__cvt+0xba>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	4639      	mov	r1, r7
 8005b40:	f7fa ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b44:	b918      	cbnz	r0, 8005b4e <__cvt+0xba>
 8005b46:	f1c4 0401 	rsb	r4, r4, #1
 8005b4a:	f8ca 4000 	str.w	r4, [sl]
 8005b4e:	f8da 3000 	ldr.w	r3, [sl]
 8005b52:	4499      	add	r9, r3
 8005b54:	e7d3      	b.n	8005afe <__cvt+0x6a>
 8005b56:	1c59      	adds	r1, r3, #1
 8005b58:	9103      	str	r1, [sp, #12]
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e7d9      	b.n	8005b12 <__cvt+0x7e>

08005b5e <__exponent>:
 8005b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b60:	2900      	cmp	r1, #0
 8005b62:	bfba      	itte	lt
 8005b64:	4249      	neglt	r1, r1
 8005b66:	232d      	movlt	r3, #45	@ 0x2d
 8005b68:	232b      	movge	r3, #43	@ 0x2b
 8005b6a:	2909      	cmp	r1, #9
 8005b6c:	7002      	strb	r2, [r0, #0]
 8005b6e:	7043      	strb	r3, [r0, #1]
 8005b70:	dd29      	ble.n	8005bc6 <__exponent+0x68>
 8005b72:	f10d 0307 	add.w	r3, sp, #7
 8005b76:	461d      	mov	r5, r3
 8005b78:	270a      	movs	r7, #10
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b80:	fb07 1416 	mls	r4, r7, r6, r1
 8005b84:	3430      	adds	r4, #48	@ 0x30
 8005b86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	2c63      	cmp	r4, #99	@ 0x63
 8005b8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b92:	4631      	mov	r1, r6
 8005b94:	dcf1      	bgt.n	8005b7a <__exponent+0x1c>
 8005b96:	3130      	adds	r1, #48	@ 0x30
 8005b98:	1e94      	subs	r4, r2, #2
 8005b9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b9e:	1c41      	adds	r1, r0, #1
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	42ab      	cmp	r3, r5
 8005ba4:	d30a      	bcc.n	8005bbc <__exponent+0x5e>
 8005ba6:	f10d 0309 	add.w	r3, sp, #9
 8005baa:	1a9b      	subs	r3, r3, r2
 8005bac:	42ac      	cmp	r4, r5
 8005bae:	bf88      	it	hi
 8005bb0:	2300      	movhi	r3, #0
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	4403      	add	r3, r0
 8005bb6:	1a18      	subs	r0, r3, r0
 8005bb8:	b003      	add	sp, #12
 8005bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005bc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005bc4:	e7ed      	b.n	8005ba2 <__exponent+0x44>
 8005bc6:	2330      	movs	r3, #48	@ 0x30
 8005bc8:	3130      	adds	r1, #48	@ 0x30
 8005bca:	7083      	strb	r3, [r0, #2]
 8005bcc:	70c1      	strb	r1, [r0, #3]
 8005bce:	1d03      	adds	r3, r0, #4
 8005bd0:	e7f1      	b.n	8005bb6 <__exponent+0x58>
	...

08005bd4 <_printf_float>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	b08d      	sub	sp, #52	@ 0x34
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005be0:	4616      	mov	r6, r2
 8005be2:	461f      	mov	r7, r3
 8005be4:	4605      	mov	r5, r0
 8005be6:	f000 fcdb 	bl	80065a0 <_localeconv_r>
 8005bea:	6803      	ldr	r3, [r0, #0]
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fa fb46 	bl	8000280 <strlen>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bfc:	9005      	str	r0, [sp, #20]
 8005bfe:	3307      	adds	r3, #7
 8005c00:	f023 0307 	bic.w	r3, r3, #7
 8005c04:	f103 0208 	add.w	r2, r3, #8
 8005c08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c0c:	f8d4 b000 	ldr.w	fp, [r4]
 8005c10:	f8c8 2000 	str.w	r2, [r8]
 8005c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c1c:	9307      	str	r3, [sp, #28]
 8005c1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c2a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e9c <_printf_float+0x2c8>)
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c30:	f7fa ff84 	bl	8000b3c <__aeabi_dcmpun>
 8005c34:	bb70      	cbnz	r0, 8005c94 <_printf_float+0xc0>
 8005c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c3a:	4b98      	ldr	r3, [pc, #608]	@ (8005e9c <_printf_float+0x2c8>)
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	f7fa ff5e 	bl	8000b00 <__aeabi_dcmple>
 8005c44:	bb30      	cbnz	r0, 8005c94 <_printf_float+0xc0>
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa ff4d 	bl	8000aec <__aeabi_dcmplt>
 8005c52:	b110      	cbz	r0, 8005c5a <_printf_float+0x86>
 8005c54:	232d      	movs	r3, #45	@ 0x2d
 8005c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c5a:	4a91      	ldr	r2, [pc, #580]	@ (8005ea0 <_printf_float+0x2cc>)
 8005c5c:	4b91      	ldr	r3, [pc, #580]	@ (8005ea4 <_printf_float+0x2d0>)
 8005c5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c62:	bf94      	ite	ls
 8005c64:	4690      	movls	r8, r2
 8005c66:	4698      	movhi	r8, r3
 8005c68:	2303      	movs	r3, #3
 8005c6a:	6123      	str	r3, [r4, #16]
 8005c6c:	f02b 0304 	bic.w	r3, fp, #4
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	f04f 0900 	mov.w	r9, #0
 8005c76:	9700      	str	r7, [sp, #0]
 8005c78:	4633      	mov	r3, r6
 8005c7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 f9d2 	bl	8006028 <_printf_common>
 8005c84:	3001      	adds	r0, #1
 8005c86:	f040 808d 	bne.w	8005da4 <_printf_float+0x1d0>
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8e:	b00d      	add	sp, #52	@ 0x34
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa ff4e 	bl	8000b3c <__aeabi_dcmpun>
 8005ca0:	b140      	cbz	r0, 8005cb4 <_printf_float+0xe0>
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfbc      	itt	lt
 8005ca8:	232d      	movlt	r3, #45	@ 0x2d
 8005caa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005cae:	4a7e      	ldr	r2, [pc, #504]	@ (8005ea8 <_printf_float+0x2d4>)
 8005cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8005eac <_printf_float+0x2d8>)
 8005cb2:	e7d4      	b.n	8005c5e <_printf_float+0x8a>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005cba:	9206      	str	r2, [sp, #24]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	d13b      	bne.n	8005d38 <_printf_float+0x164>
 8005cc0:	2306      	movs	r3, #6
 8005cc2:	6063      	str	r3, [r4, #4]
 8005cc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	9303      	str	r3, [sp, #12]
 8005cce:	ab0a      	add	r3, sp, #40	@ 0x28
 8005cd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005cd4:	ab09      	add	r3, sp, #36	@ 0x24
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	6861      	ldr	r1, [r4, #4]
 8005cda:	ec49 8b10 	vmov	d0, r8, r9
 8005cde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7ff fed6 	bl	8005a94 <__cvt>
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cec:	2b47      	cmp	r3, #71	@ 0x47
 8005cee:	4680      	mov	r8, r0
 8005cf0:	d129      	bne.n	8005d46 <_printf_float+0x172>
 8005cf2:	1cc8      	adds	r0, r1, #3
 8005cf4:	db02      	blt.n	8005cfc <_printf_float+0x128>
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	4299      	cmp	r1, r3
 8005cfa:	dd41      	ble.n	8005d80 <_printf_float+0x1ac>
 8005cfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d00:	fa5f fa8a 	uxtb.w	sl, sl
 8005d04:	3901      	subs	r1, #1
 8005d06:	4652      	mov	r2, sl
 8005d08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d0e:	f7ff ff26 	bl	8005b5e <__exponent>
 8005d12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d14:	1813      	adds	r3, r2, r0
 8005d16:	2a01      	cmp	r2, #1
 8005d18:	4681      	mov	r9, r0
 8005d1a:	6123      	str	r3, [r4, #16]
 8005d1c:	dc02      	bgt.n	8005d24 <_printf_float+0x150>
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	07d2      	lsls	r2, r2, #31
 8005d22:	d501      	bpl.n	8005d28 <_printf_float+0x154>
 8005d24:	3301      	adds	r3, #1
 8005d26:	6123      	str	r3, [r4, #16]
 8005d28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0a2      	beq.n	8005c76 <_printf_float+0xa2>
 8005d30:	232d      	movs	r3, #45	@ 0x2d
 8005d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d36:	e79e      	b.n	8005c76 <_printf_float+0xa2>
 8005d38:	9a06      	ldr	r2, [sp, #24]
 8005d3a:	2a47      	cmp	r2, #71	@ 0x47
 8005d3c:	d1c2      	bne.n	8005cc4 <_printf_float+0xf0>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1c0      	bne.n	8005cc4 <_printf_float+0xf0>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e7bd      	b.n	8005cc2 <_printf_float+0xee>
 8005d46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d4a:	d9db      	bls.n	8005d04 <_printf_float+0x130>
 8005d4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d50:	d118      	bne.n	8005d84 <_printf_float+0x1b0>
 8005d52:	2900      	cmp	r1, #0
 8005d54:	6863      	ldr	r3, [r4, #4]
 8005d56:	dd0b      	ble.n	8005d70 <_printf_float+0x19c>
 8005d58:	6121      	str	r1, [r4, #16]
 8005d5a:	b913      	cbnz	r3, 8005d62 <_printf_float+0x18e>
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	07d0      	lsls	r0, r2, #31
 8005d60:	d502      	bpl.n	8005d68 <_printf_float+0x194>
 8005d62:	3301      	adds	r3, #1
 8005d64:	440b      	add	r3, r1
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d6a:	f04f 0900 	mov.w	r9, #0
 8005d6e:	e7db      	b.n	8005d28 <_printf_float+0x154>
 8005d70:	b913      	cbnz	r3, 8005d78 <_printf_float+0x1a4>
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	07d2      	lsls	r2, r2, #31
 8005d76:	d501      	bpl.n	8005d7c <_printf_float+0x1a8>
 8005d78:	3302      	adds	r3, #2
 8005d7a:	e7f4      	b.n	8005d66 <_printf_float+0x192>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e7f2      	b.n	8005d66 <_printf_float+0x192>
 8005d80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d86:	4299      	cmp	r1, r3
 8005d88:	db05      	blt.n	8005d96 <_printf_float+0x1c2>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	6121      	str	r1, [r4, #16]
 8005d8e:	07d8      	lsls	r0, r3, #31
 8005d90:	d5ea      	bpl.n	8005d68 <_printf_float+0x194>
 8005d92:	1c4b      	adds	r3, r1, #1
 8005d94:	e7e7      	b.n	8005d66 <_printf_float+0x192>
 8005d96:	2900      	cmp	r1, #0
 8005d98:	bfd4      	ite	le
 8005d9a:	f1c1 0202 	rsble	r2, r1, #2
 8005d9e:	2201      	movgt	r2, #1
 8005da0:	4413      	add	r3, r2
 8005da2:	e7e0      	b.n	8005d66 <_printf_float+0x192>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	055a      	lsls	r2, r3, #21
 8005da8:	d407      	bmi.n	8005dba <_printf_float+0x1e6>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	4642      	mov	r2, r8
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	d12b      	bne.n	8005e10 <_printf_float+0x23c>
 8005db8:	e767      	b.n	8005c8a <_printf_float+0xb6>
 8005dba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dbe:	f240 80dd 	bls.w	8005f7c <_printf_float+0x3a8>
 8005dc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f7fa fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d033      	beq.n	8005e3a <_printf_float+0x266>
 8005dd2:	4a37      	ldr	r2, [pc, #220]	@ (8005eb0 <_printf_float+0x2dc>)
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f43f af54 	beq.w	8005c8a <_printf_float+0xb6>
 8005de2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005de6:	4543      	cmp	r3, r8
 8005de8:	db02      	blt.n	8005df0 <_printf_float+0x21c>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	07d8      	lsls	r0, r3, #31
 8005dee:	d50f      	bpl.n	8005e10 <_printf_float+0x23c>
 8005df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df4:	4631      	mov	r1, r6
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f43f af45 	beq.w	8005c8a <_printf_float+0xb6>
 8005e00:	f04f 0900 	mov.w	r9, #0
 8005e04:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e08:	f104 0a1a 	add.w	sl, r4, #26
 8005e0c:	45c8      	cmp	r8, r9
 8005e0e:	dc09      	bgt.n	8005e24 <_printf_float+0x250>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	079b      	lsls	r3, r3, #30
 8005e14:	f100 8103 	bmi.w	800601e <_printf_float+0x44a>
 8005e18:	68e0      	ldr	r0, [r4, #12]
 8005e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e1c:	4298      	cmp	r0, r3
 8005e1e:	bfb8      	it	lt
 8005e20:	4618      	movlt	r0, r3
 8005e22:	e734      	b.n	8005c8e <_printf_float+0xba>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4652      	mov	r2, sl
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f43f af2b 	beq.w	8005c8a <_printf_float+0xb6>
 8005e34:	f109 0901 	add.w	r9, r9, #1
 8005e38:	e7e8      	b.n	8005e0c <_printf_float+0x238>
 8005e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dc39      	bgt.n	8005eb4 <_printf_float+0x2e0>
 8005e40:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb0 <_printf_float+0x2dc>)
 8005e42:	2301      	movs	r3, #1
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f af1d 	beq.w	8005c8a <_printf_float+0xb6>
 8005e50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005e54:	ea59 0303 	orrs.w	r3, r9, r3
 8005e58:	d102      	bne.n	8005e60 <_printf_float+0x28c>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	07d9      	lsls	r1, r3, #31
 8005e5e:	d5d7      	bpl.n	8005e10 <_printf_float+0x23c>
 8005e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e64:	4631      	mov	r1, r6
 8005e66:	4628      	mov	r0, r5
 8005e68:	47b8      	blx	r7
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f43f af0d 	beq.w	8005c8a <_printf_float+0xb6>
 8005e70:	f04f 0a00 	mov.w	sl, #0
 8005e74:	f104 0b1a 	add.w	fp, r4, #26
 8005e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7a:	425b      	negs	r3, r3
 8005e7c:	4553      	cmp	r3, sl
 8005e7e:	dc01      	bgt.n	8005e84 <_printf_float+0x2b0>
 8005e80:	464b      	mov	r3, r9
 8005e82:	e793      	b.n	8005dac <_printf_float+0x1d8>
 8005e84:	2301      	movs	r3, #1
 8005e86:	465a      	mov	r2, fp
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f aefb 	beq.w	8005c8a <_printf_float+0xb6>
 8005e94:	f10a 0a01 	add.w	sl, sl, #1
 8005e98:	e7ee      	b.n	8005e78 <_printf_float+0x2a4>
 8005e9a:	bf00      	nop
 8005e9c:	7fefffff 	.word	0x7fefffff
 8005ea0:	080087a8 	.word	0x080087a8
 8005ea4:	080087ac 	.word	0x080087ac
 8005ea8:	080087b0 	.word	0x080087b0
 8005eac:	080087b4 	.word	0x080087b4
 8005eb0:	080087b8 	.word	0x080087b8
 8005eb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005eb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005eba:	4553      	cmp	r3, sl
 8005ebc:	bfa8      	it	ge
 8005ebe:	4653      	movge	r3, sl
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	4699      	mov	r9, r3
 8005ec4:	dc36      	bgt.n	8005f34 <_printf_float+0x360>
 8005ec6:	f04f 0b00 	mov.w	fp, #0
 8005eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ece:	f104 021a 	add.w	r2, r4, #26
 8005ed2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	eba3 0309 	sub.w	r3, r3, r9
 8005eda:	455b      	cmp	r3, fp
 8005edc:	dc31      	bgt.n	8005f42 <_printf_float+0x36e>
 8005ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee0:	459a      	cmp	sl, r3
 8005ee2:	dc3a      	bgt.n	8005f5a <_printf_float+0x386>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	07da      	lsls	r2, r3, #31
 8005ee8:	d437      	bmi.n	8005f5a <_printf_float+0x386>
 8005eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eec:	ebaa 0903 	sub.w	r9, sl, r3
 8005ef0:	9b06      	ldr	r3, [sp, #24]
 8005ef2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ef6:	4599      	cmp	r9, r3
 8005ef8:	bfa8      	it	ge
 8005efa:	4699      	movge	r9, r3
 8005efc:	f1b9 0f00 	cmp.w	r9, #0
 8005f00:	dc33      	bgt.n	8005f6a <_printf_float+0x396>
 8005f02:	f04f 0800 	mov.w	r8, #0
 8005f06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f0a:	f104 0b1a 	add.w	fp, r4, #26
 8005f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f10:	ebaa 0303 	sub.w	r3, sl, r3
 8005f14:	eba3 0309 	sub.w	r3, r3, r9
 8005f18:	4543      	cmp	r3, r8
 8005f1a:	f77f af79 	ble.w	8005e10 <_printf_float+0x23c>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	465a      	mov	r2, fp
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f43f aeae 	beq.w	8005c8a <_printf_float+0xb6>
 8005f2e:	f108 0801 	add.w	r8, r8, #1
 8005f32:	e7ec      	b.n	8005f0e <_printf_float+0x33a>
 8005f34:	4642      	mov	r2, r8
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d1c2      	bne.n	8005ec6 <_printf_float+0x2f2>
 8005f40:	e6a3      	b.n	8005c8a <_printf_float+0xb6>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	9206      	str	r2, [sp, #24]
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f43f ae9c 	beq.w	8005c8a <_printf_float+0xb6>
 8005f52:	9a06      	ldr	r2, [sp, #24]
 8005f54:	f10b 0b01 	add.w	fp, fp, #1
 8005f58:	e7bb      	b.n	8005ed2 <_printf_float+0x2fe>
 8005f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	d1c0      	bne.n	8005eea <_printf_float+0x316>
 8005f68:	e68f      	b.n	8005c8a <_printf_float+0xb6>
 8005f6a:	9a06      	ldr	r2, [sp, #24]
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	4442      	add	r2, r8
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	d1c3      	bne.n	8005f02 <_printf_float+0x32e>
 8005f7a:	e686      	b.n	8005c8a <_printf_float+0xb6>
 8005f7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f80:	f1ba 0f01 	cmp.w	sl, #1
 8005f84:	dc01      	bgt.n	8005f8a <_printf_float+0x3b6>
 8005f86:	07db      	lsls	r3, r3, #31
 8005f88:	d536      	bpl.n	8005ff8 <_printf_float+0x424>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	f43f ae78 	beq.w	8005c8a <_printf_float+0xb6>
 8005f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f43f ae70 	beq.w	8005c8a <_printf_float+0xb6>
 8005faa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fb6:	f7fa fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fba:	b9c0      	cbnz	r0, 8005fee <_printf_float+0x41a>
 8005fbc:	4653      	mov	r3, sl
 8005fbe:	f108 0201 	add.w	r2, r8, #1
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d10c      	bne.n	8005fe6 <_printf_float+0x412>
 8005fcc:	e65d      	b.n	8005c8a <_printf_float+0xb6>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	465a      	mov	r2, fp
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f ae56 	beq.w	8005c8a <_printf_float+0xb6>
 8005fde:	f108 0801 	add.w	r8, r8, #1
 8005fe2:	45d0      	cmp	r8, sl
 8005fe4:	dbf3      	blt.n	8005fce <_printf_float+0x3fa>
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fec:	e6df      	b.n	8005dae <_printf_float+0x1da>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	f104 0b1a 	add.w	fp, r4, #26
 8005ff6:	e7f4      	b.n	8005fe2 <_printf_float+0x40e>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	e7e1      	b.n	8005fc2 <_printf_float+0x3ee>
 8005ffe:	2301      	movs	r3, #1
 8006000:	464a      	mov	r2, r9
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	47b8      	blx	r7
 8006008:	3001      	adds	r0, #1
 800600a:	f43f ae3e 	beq.w	8005c8a <_printf_float+0xb6>
 800600e:	f108 0801 	add.w	r8, r8, #1
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006016:	1a5b      	subs	r3, r3, r1
 8006018:	4543      	cmp	r3, r8
 800601a:	dcf0      	bgt.n	8005ffe <_printf_float+0x42a>
 800601c:	e6fc      	b.n	8005e18 <_printf_float+0x244>
 800601e:	f04f 0800 	mov.w	r8, #0
 8006022:	f104 0919 	add.w	r9, r4, #25
 8006026:	e7f4      	b.n	8006012 <_printf_float+0x43e>

08006028 <_printf_common>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	4616      	mov	r6, r2
 800602e:	4698      	mov	r8, r3
 8006030:	688a      	ldr	r2, [r1, #8]
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006038:	4293      	cmp	r3, r2
 800603a:	bfb8      	it	lt
 800603c:	4613      	movlt	r3, r2
 800603e:	6033      	str	r3, [r6, #0]
 8006040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006044:	4607      	mov	r7, r0
 8006046:	460c      	mov	r4, r1
 8006048:	b10a      	cbz	r2, 800604e <_printf_common+0x26>
 800604a:	3301      	adds	r3, #1
 800604c:	6033      	str	r3, [r6, #0]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	0699      	lsls	r1, r3, #26
 8006052:	bf42      	ittt	mi
 8006054:	6833      	ldrmi	r3, [r6, #0]
 8006056:	3302      	addmi	r3, #2
 8006058:	6033      	strmi	r3, [r6, #0]
 800605a:	6825      	ldr	r5, [r4, #0]
 800605c:	f015 0506 	ands.w	r5, r5, #6
 8006060:	d106      	bne.n	8006070 <_printf_common+0x48>
 8006062:	f104 0a19 	add.w	sl, r4, #25
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	6832      	ldr	r2, [r6, #0]
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	42ab      	cmp	r3, r5
 800606e:	dc26      	bgt.n	80060be <_printf_common+0x96>
 8006070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	3b00      	subs	r3, #0
 8006078:	bf18      	it	ne
 800607a:	2301      	movne	r3, #1
 800607c:	0692      	lsls	r2, r2, #26
 800607e:	d42b      	bmi.n	80060d8 <_printf_common+0xb0>
 8006080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006084:	4641      	mov	r1, r8
 8006086:	4638      	mov	r0, r7
 8006088:	47c8      	blx	r9
 800608a:	3001      	adds	r0, #1
 800608c:	d01e      	beq.n	80060cc <_printf_common+0xa4>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	6922      	ldr	r2, [r4, #16]
 8006092:	f003 0306 	and.w	r3, r3, #6
 8006096:	2b04      	cmp	r3, #4
 8006098:	bf02      	ittt	eq
 800609a:	68e5      	ldreq	r5, [r4, #12]
 800609c:	6833      	ldreq	r3, [r6, #0]
 800609e:	1aed      	subeq	r5, r5, r3
 80060a0:	68a3      	ldr	r3, [r4, #8]
 80060a2:	bf0c      	ite	eq
 80060a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a8:	2500      	movne	r5, #0
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bfc4      	itt	gt
 80060ae:	1a9b      	subgt	r3, r3, r2
 80060b0:	18ed      	addgt	r5, r5, r3
 80060b2:	2600      	movs	r6, #0
 80060b4:	341a      	adds	r4, #26
 80060b6:	42b5      	cmp	r5, r6
 80060b8:	d11a      	bne.n	80060f0 <_printf_common+0xc8>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e008      	b.n	80060d0 <_printf_common+0xa8>
 80060be:	2301      	movs	r3, #1
 80060c0:	4652      	mov	r2, sl
 80060c2:	4641      	mov	r1, r8
 80060c4:	4638      	mov	r0, r7
 80060c6:	47c8      	blx	r9
 80060c8:	3001      	adds	r0, #1
 80060ca:	d103      	bne.n	80060d4 <_printf_common+0xac>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d4:	3501      	adds	r5, #1
 80060d6:	e7c6      	b.n	8006066 <_printf_common+0x3e>
 80060d8:	18e1      	adds	r1, r4, r3
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	2030      	movs	r0, #48	@ 0x30
 80060de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060e2:	4422      	add	r2, r4
 80060e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060ec:	3302      	adds	r3, #2
 80060ee:	e7c7      	b.n	8006080 <_printf_common+0x58>
 80060f0:	2301      	movs	r3, #1
 80060f2:	4622      	mov	r2, r4
 80060f4:	4641      	mov	r1, r8
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c8      	blx	r9
 80060fa:	3001      	adds	r0, #1
 80060fc:	d0e6      	beq.n	80060cc <_printf_common+0xa4>
 80060fe:	3601      	adds	r6, #1
 8006100:	e7d9      	b.n	80060b6 <_printf_common+0x8e>
	...

08006104 <_printf_i>:
 8006104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	7e0f      	ldrb	r7, [r1, #24]
 800610a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800610c:	2f78      	cmp	r7, #120	@ 0x78
 800610e:	4691      	mov	r9, r2
 8006110:	4680      	mov	r8, r0
 8006112:	460c      	mov	r4, r1
 8006114:	469a      	mov	sl, r3
 8006116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800611a:	d807      	bhi.n	800612c <_printf_i+0x28>
 800611c:	2f62      	cmp	r7, #98	@ 0x62
 800611e:	d80a      	bhi.n	8006136 <_printf_i+0x32>
 8006120:	2f00      	cmp	r7, #0
 8006122:	f000 80d2 	beq.w	80062ca <_printf_i+0x1c6>
 8006126:	2f58      	cmp	r7, #88	@ 0x58
 8006128:	f000 80b9 	beq.w	800629e <_printf_i+0x19a>
 800612c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006134:	e03a      	b.n	80061ac <_printf_i+0xa8>
 8006136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800613a:	2b15      	cmp	r3, #21
 800613c:	d8f6      	bhi.n	800612c <_printf_i+0x28>
 800613e:	a101      	add	r1, pc, #4	@ (adr r1, 8006144 <_printf_i+0x40>)
 8006140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006144:	0800619d 	.word	0x0800619d
 8006148:	080061b1 	.word	0x080061b1
 800614c:	0800612d 	.word	0x0800612d
 8006150:	0800612d 	.word	0x0800612d
 8006154:	0800612d 	.word	0x0800612d
 8006158:	0800612d 	.word	0x0800612d
 800615c:	080061b1 	.word	0x080061b1
 8006160:	0800612d 	.word	0x0800612d
 8006164:	0800612d 	.word	0x0800612d
 8006168:	0800612d 	.word	0x0800612d
 800616c:	0800612d 	.word	0x0800612d
 8006170:	080062b1 	.word	0x080062b1
 8006174:	080061db 	.word	0x080061db
 8006178:	0800626b 	.word	0x0800626b
 800617c:	0800612d 	.word	0x0800612d
 8006180:	0800612d 	.word	0x0800612d
 8006184:	080062d3 	.word	0x080062d3
 8006188:	0800612d 	.word	0x0800612d
 800618c:	080061db 	.word	0x080061db
 8006190:	0800612d 	.word	0x0800612d
 8006194:	0800612d 	.word	0x0800612d
 8006198:	08006273 	.word	0x08006273
 800619c:	6833      	ldr	r3, [r6, #0]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6032      	str	r2, [r6, #0]
 80061a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061ac:	2301      	movs	r3, #1
 80061ae:	e09d      	b.n	80062ec <_printf_i+0x1e8>
 80061b0:	6833      	ldr	r3, [r6, #0]
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	1d19      	adds	r1, r3, #4
 80061b6:	6031      	str	r1, [r6, #0]
 80061b8:	0606      	lsls	r6, r0, #24
 80061ba:	d501      	bpl.n	80061c0 <_printf_i+0xbc>
 80061bc:	681d      	ldr	r5, [r3, #0]
 80061be:	e003      	b.n	80061c8 <_printf_i+0xc4>
 80061c0:	0645      	lsls	r5, r0, #25
 80061c2:	d5fb      	bpl.n	80061bc <_printf_i+0xb8>
 80061c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	da03      	bge.n	80061d4 <_printf_i+0xd0>
 80061cc:	232d      	movs	r3, #45	@ 0x2d
 80061ce:	426d      	negs	r5, r5
 80061d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061d4:	4859      	ldr	r0, [pc, #356]	@ (800633c <_printf_i+0x238>)
 80061d6:	230a      	movs	r3, #10
 80061d8:	e011      	b.n	80061fe <_printf_i+0xfa>
 80061da:	6821      	ldr	r1, [r4, #0]
 80061dc:	6833      	ldr	r3, [r6, #0]
 80061de:	0608      	lsls	r0, r1, #24
 80061e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061e4:	d402      	bmi.n	80061ec <_printf_i+0xe8>
 80061e6:	0649      	lsls	r1, r1, #25
 80061e8:	bf48      	it	mi
 80061ea:	b2ad      	uxthmi	r5, r5
 80061ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80061ee:	4853      	ldr	r0, [pc, #332]	@ (800633c <_printf_i+0x238>)
 80061f0:	6033      	str	r3, [r6, #0]
 80061f2:	bf14      	ite	ne
 80061f4:	230a      	movne	r3, #10
 80061f6:	2308      	moveq	r3, #8
 80061f8:	2100      	movs	r1, #0
 80061fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061fe:	6866      	ldr	r6, [r4, #4]
 8006200:	60a6      	str	r6, [r4, #8]
 8006202:	2e00      	cmp	r6, #0
 8006204:	bfa2      	ittt	ge
 8006206:	6821      	ldrge	r1, [r4, #0]
 8006208:	f021 0104 	bicge.w	r1, r1, #4
 800620c:	6021      	strge	r1, [r4, #0]
 800620e:	b90d      	cbnz	r5, 8006214 <_printf_i+0x110>
 8006210:	2e00      	cmp	r6, #0
 8006212:	d04b      	beq.n	80062ac <_printf_i+0x1a8>
 8006214:	4616      	mov	r6, r2
 8006216:	fbb5 f1f3 	udiv	r1, r5, r3
 800621a:	fb03 5711 	mls	r7, r3, r1, r5
 800621e:	5dc7      	ldrb	r7, [r0, r7]
 8006220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006224:	462f      	mov	r7, r5
 8006226:	42bb      	cmp	r3, r7
 8006228:	460d      	mov	r5, r1
 800622a:	d9f4      	bls.n	8006216 <_printf_i+0x112>
 800622c:	2b08      	cmp	r3, #8
 800622e:	d10b      	bne.n	8006248 <_printf_i+0x144>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	07df      	lsls	r7, r3, #31
 8006234:	d508      	bpl.n	8006248 <_printf_i+0x144>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	6861      	ldr	r1, [r4, #4]
 800623a:	4299      	cmp	r1, r3
 800623c:	bfde      	ittt	le
 800623e:	2330      	movle	r3, #48	@ 0x30
 8006240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006244:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006248:	1b92      	subs	r2, r2, r6
 800624a:	6122      	str	r2, [r4, #16]
 800624c:	f8cd a000 	str.w	sl, [sp]
 8006250:	464b      	mov	r3, r9
 8006252:	aa03      	add	r2, sp, #12
 8006254:	4621      	mov	r1, r4
 8006256:	4640      	mov	r0, r8
 8006258:	f7ff fee6 	bl	8006028 <_printf_common>
 800625c:	3001      	adds	r0, #1
 800625e:	d14a      	bne.n	80062f6 <_printf_i+0x1f2>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	b004      	add	sp, #16
 8006266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	f043 0320 	orr.w	r3, r3, #32
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	4833      	ldr	r0, [pc, #204]	@ (8006340 <_printf_i+0x23c>)
 8006274:	2778      	movs	r7, #120	@ 0x78
 8006276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	6831      	ldr	r1, [r6, #0]
 800627e:	061f      	lsls	r7, r3, #24
 8006280:	f851 5b04 	ldr.w	r5, [r1], #4
 8006284:	d402      	bmi.n	800628c <_printf_i+0x188>
 8006286:	065f      	lsls	r7, r3, #25
 8006288:	bf48      	it	mi
 800628a:	b2ad      	uxthmi	r5, r5
 800628c:	6031      	str	r1, [r6, #0]
 800628e:	07d9      	lsls	r1, r3, #31
 8006290:	bf44      	itt	mi
 8006292:	f043 0320 	orrmi.w	r3, r3, #32
 8006296:	6023      	strmi	r3, [r4, #0]
 8006298:	b11d      	cbz	r5, 80062a2 <_printf_i+0x19e>
 800629a:	2310      	movs	r3, #16
 800629c:	e7ac      	b.n	80061f8 <_printf_i+0xf4>
 800629e:	4827      	ldr	r0, [pc, #156]	@ (800633c <_printf_i+0x238>)
 80062a0:	e7e9      	b.n	8006276 <_printf_i+0x172>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	f023 0320 	bic.w	r3, r3, #32
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	e7f6      	b.n	800629a <_printf_i+0x196>
 80062ac:	4616      	mov	r6, r2
 80062ae:	e7bd      	b.n	800622c <_printf_i+0x128>
 80062b0:	6833      	ldr	r3, [r6, #0]
 80062b2:	6825      	ldr	r5, [r4, #0]
 80062b4:	6961      	ldr	r1, [r4, #20]
 80062b6:	1d18      	adds	r0, r3, #4
 80062b8:	6030      	str	r0, [r6, #0]
 80062ba:	062e      	lsls	r6, r5, #24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0x1c0>
 80062c0:	6019      	str	r1, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0x1c6>
 80062c4:	0668      	lsls	r0, r5, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0x1bc>
 80062c8:	8019      	strh	r1, [r3, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	4616      	mov	r6, r2
 80062d0:	e7bc      	b.n	800624c <_printf_i+0x148>
 80062d2:	6833      	ldr	r3, [r6, #0]
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	6032      	str	r2, [r6, #0]
 80062d8:	681e      	ldr	r6, [r3, #0]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	2100      	movs	r1, #0
 80062de:	4630      	mov	r0, r6
 80062e0:	f7f9 ff7e 	bl	80001e0 <memchr>
 80062e4:	b108      	cbz	r0, 80062ea <_printf_i+0x1e6>
 80062e6:	1b80      	subs	r0, r0, r6
 80062e8:	6060      	str	r0, [r4, #4]
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	2300      	movs	r3, #0
 80062f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f4:	e7aa      	b.n	800624c <_printf_i+0x148>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	4632      	mov	r2, r6
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d0ad      	beq.n	8006260 <_printf_i+0x15c>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	079b      	lsls	r3, r3, #30
 8006308:	d413      	bmi.n	8006332 <_printf_i+0x22e>
 800630a:	68e0      	ldr	r0, [r4, #12]
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	4298      	cmp	r0, r3
 8006310:	bfb8      	it	lt
 8006312:	4618      	movlt	r0, r3
 8006314:	e7a6      	b.n	8006264 <_printf_i+0x160>
 8006316:	2301      	movs	r3, #1
 8006318:	4632      	mov	r2, r6
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	47d0      	blx	sl
 8006320:	3001      	adds	r0, #1
 8006322:	d09d      	beq.n	8006260 <_printf_i+0x15c>
 8006324:	3501      	adds	r5, #1
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	9903      	ldr	r1, [sp, #12]
 800632a:	1a5b      	subs	r3, r3, r1
 800632c:	42ab      	cmp	r3, r5
 800632e:	dcf2      	bgt.n	8006316 <_printf_i+0x212>
 8006330:	e7eb      	b.n	800630a <_printf_i+0x206>
 8006332:	2500      	movs	r5, #0
 8006334:	f104 0619 	add.w	r6, r4, #25
 8006338:	e7f5      	b.n	8006326 <_printf_i+0x222>
 800633a:	bf00      	nop
 800633c:	080087ba 	.word	0x080087ba
 8006340:	080087cb 	.word	0x080087cb

08006344 <std>:
 8006344:	2300      	movs	r3, #0
 8006346:	b510      	push	{r4, lr}
 8006348:	4604      	mov	r4, r0
 800634a:	e9c0 3300 	strd	r3, r3, [r0]
 800634e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006352:	6083      	str	r3, [r0, #8]
 8006354:	8181      	strh	r1, [r0, #12]
 8006356:	6643      	str	r3, [r0, #100]	@ 0x64
 8006358:	81c2      	strh	r2, [r0, #14]
 800635a:	6183      	str	r3, [r0, #24]
 800635c:	4619      	mov	r1, r3
 800635e:	2208      	movs	r2, #8
 8006360:	305c      	adds	r0, #92	@ 0x5c
 8006362:	f000 f914 	bl	800658e <memset>
 8006366:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <std+0x58>)
 8006368:	6263      	str	r3, [r4, #36]	@ 0x24
 800636a:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <std+0x5c>)
 800636c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800636e:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <std+0x60>)
 8006370:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <std+0x64>)
 8006374:	6323      	str	r3, [r4, #48]	@ 0x30
 8006376:	4b0d      	ldr	r3, [pc, #52]	@ (80063ac <std+0x68>)
 8006378:	6224      	str	r4, [r4, #32]
 800637a:	429c      	cmp	r4, r3
 800637c:	d006      	beq.n	800638c <std+0x48>
 800637e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006382:	4294      	cmp	r4, r2
 8006384:	d002      	beq.n	800638c <std+0x48>
 8006386:	33d0      	adds	r3, #208	@ 0xd0
 8006388:	429c      	cmp	r4, r3
 800638a:	d105      	bne.n	8006398 <std+0x54>
 800638c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006394:	f000 b978 	b.w	8006688 <__retarget_lock_init_recursive>
 8006398:	bd10      	pop	{r4, pc}
 800639a:	bf00      	nop
 800639c:	08006509 	.word	0x08006509
 80063a0:	0800652b 	.word	0x0800652b
 80063a4:	08006563 	.word	0x08006563
 80063a8:	08006587 	.word	0x08006587
 80063ac:	20000408 	.word	0x20000408

080063b0 <stdio_exit_handler>:
 80063b0:	4a02      	ldr	r2, [pc, #8]	@ (80063bc <stdio_exit_handler+0xc>)
 80063b2:	4903      	ldr	r1, [pc, #12]	@ (80063c0 <stdio_exit_handler+0x10>)
 80063b4:	4803      	ldr	r0, [pc, #12]	@ (80063c4 <stdio_exit_handler+0x14>)
 80063b6:	f000 b869 	b.w	800648c <_fwalk_sglue>
 80063ba:	bf00      	nop
 80063bc:	2000007c 	.word	0x2000007c
 80063c0:	08007fe5 	.word	0x08007fe5
 80063c4:	2000008c 	.word	0x2000008c

080063c8 <cleanup_stdio>:
 80063c8:	6841      	ldr	r1, [r0, #4]
 80063ca:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <cleanup_stdio+0x34>)
 80063cc:	4299      	cmp	r1, r3
 80063ce:	b510      	push	{r4, lr}
 80063d0:	4604      	mov	r4, r0
 80063d2:	d001      	beq.n	80063d8 <cleanup_stdio+0x10>
 80063d4:	f001 fe06 	bl	8007fe4 <_fflush_r>
 80063d8:	68a1      	ldr	r1, [r4, #8]
 80063da:	4b09      	ldr	r3, [pc, #36]	@ (8006400 <cleanup_stdio+0x38>)
 80063dc:	4299      	cmp	r1, r3
 80063de:	d002      	beq.n	80063e6 <cleanup_stdio+0x1e>
 80063e0:	4620      	mov	r0, r4
 80063e2:	f001 fdff 	bl	8007fe4 <_fflush_r>
 80063e6:	68e1      	ldr	r1, [r4, #12]
 80063e8:	4b06      	ldr	r3, [pc, #24]	@ (8006404 <cleanup_stdio+0x3c>)
 80063ea:	4299      	cmp	r1, r3
 80063ec:	d004      	beq.n	80063f8 <cleanup_stdio+0x30>
 80063ee:	4620      	mov	r0, r4
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f001 bdf6 	b.w	8007fe4 <_fflush_r>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	bf00      	nop
 80063fc:	20000408 	.word	0x20000408
 8006400:	20000470 	.word	0x20000470
 8006404:	200004d8 	.word	0x200004d8

08006408 <global_stdio_init.part.0>:
 8006408:	b510      	push	{r4, lr}
 800640a:	4b0b      	ldr	r3, [pc, #44]	@ (8006438 <global_stdio_init.part.0+0x30>)
 800640c:	4c0b      	ldr	r4, [pc, #44]	@ (800643c <global_stdio_init.part.0+0x34>)
 800640e:	4a0c      	ldr	r2, [pc, #48]	@ (8006440 <global_stdio_init.part.0+0x38>)
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	4620      	mov	r0, r4
 8006414:	2200      	movs	r2, #0
 8006416:	2104      	movs	r1, #4
 8006418:	f7ff ff94 	bl	8006344 <std>
 800641c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006420:	2201      	movs	r2, #1
 8006422:	2109      	movs	r1, #9
 8006424:	f7ff ff8e 	bl	8006344 <std>
 8006428:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800642c:	2202      	movs	r2, #2
 800642e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006432:	2112      	movs	r1, #18
 8006434:	f7ff bf86 	b.w	8006344 <std>
 8006438:	20000540 	.word	0x20000540
 800643c:	20000408 	.word	0x20000408
 8006440:	080063b1 	.word	0x080063b1

08006444 <__sfp_lock_acquire>:
 8006444:	4801      	ldr	r0, [pc, #4]	@ (800644c <__sfp_lock_acquire+0x8>)
 8006446:	f000 b920 	b.w	800668a <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	20000549 	.word	0x20000549

08006450 <__sfp_lock_release>:
 8006450:	4801      	ldr	r0, [pc, #4]	@ (8006458 <__sfp_lock_release+0x8>)
 8006452:	f000 b91b 	b.w	800668c <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	20000549 	.word	0x20000549

0800645c <__sinit>:
 800645c:	b510      	push	{r4, lr}
 800645e:	4604      	mov	r4, r0
 8006460:	f7ff fff0 	bl	8006444 <__sfp_lock_acquire>
 8006464:	6a23      	ldr	r3, [r4, #32]
 8006466:	b11b      	cbz	r3, 8006470 <__sinit+0x14>
 8006468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800646c:	f7ff bff0 	b.w	8006450 <__sfp_lock_release>
 8006470:	4b04      	ldr	r3, [pc, #16]	@ (8006484 <__sinit+0x28>)
 8006472:	6223      	str	r3, [r4, #32]
 8006474:	4b04      	ldr	r3, [pc, #16]	@ (8006488 <__sinit+0x2c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f5      	bne.n	8006468 <__sinit+0xc>
 800647c:	f7ff ffc4 	bl	8006408 <global_stdio_init.part.0>
 8006480:	e7f2      	b.n	8006468 <__sinit+0xc>
 8006482:	bf00      	nop
 8006484:	080063c9 	.word	0x080063c9
 8006488:	20000540 	.word	0x20000540

0800648c <_fwalk_sglue>:
 800648c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006490:	4607      	mov	r7, r0
 8006492:	4688      	mov	r8, r1
 8006494:	4614      	mov	r4, r2
 8006496:	2600      	movs	r6, #0
 8006498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800649c:	f1b9 0901 	subs.w	r9, r9, #1
 80064a0:	d505      	bpl.n	80064ae <_fwalk_sglue+0x22>
 80064a2:	6824      	ldr	r4, [r4, #0]
 80064a4:	2c00      	cmp	r4, #0
 80064a6:	d1f7      	bne.n	8006498 <_fwalk_sglue+0xc>
 80064a8:	4630      	mov	r0, r6
 80064aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d907      	bls.n	80064c4 <_fwalk_sglue+0x38>
 80064b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064b8:	3301      	adds	r3, #1
 80064ba:	d003      	beq.n	80064c4 <_fwalk_sglue+0x38>
 80064bc:	4629      	mov	r1, r5
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	4306      	orrs	r6, r0
 80064c4:	3568      	adds	r5, #104	@ 0x68
 80064c6:	e7e9      	b.n	800649c <_fwalk_sglue+0x10>

080064c8 <siprintf>:
 80064c8:	b40e      	push	{r1, r2, r3}
 80064ca:	b500      	push	{lr}
 80064cc:	b09c      	sub	sp, #112	@ 0x70
 80064ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80064d0:	9002      	str	r0, [sp, #8]
 80064d2:	9006      	str	r0, [sp, #24]
 80064d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064d8:	4809      	ldr	r0, [pc, #36]	@ (8006500 <siprintf+0x38>)
 80064da:	9107      	str	r1, [sp, #28]
 80064dc:	9104      	str	r1, [sp, #16]
 80064de:	4909      	ldr	r1, [pc, #36]	@ (8006504 <siprintf+0x3c>)
 80064e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e4:	9105      	str	r1, [sp, #20]
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	a902      	add	r1, sp, #8
 80064ec:	f001 fbfa 	bl	8007ce4 <_svfiprintf_r>
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	b01c      	add	sp, #112	@ 0x70
 80064f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064fc:	b003      	add	sp, #12
 80064fe:	4770      	bx	lr
 8006500:	20000088 	.word	0x20000088
 8006504:	ffff0208 	.word	0xffff0208

08006508 <__sread>:
 8006508:	b510      	push	{r4, lr}
 800650a:	460c      	mov	r4, r1
 800650c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006510:	f000 f86c 	bl	80065ec <_read_r>
 8006514:	2800      	cmp	r0, #0
 8006516:	bfab      	itete	ge
 8006518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800651a:	89a3      	ldrhlt	r3, [r4, #12]
 800651c:	181b      	addge	r3, r3, r0
 800651e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006522:	bfac      	ite	ge
 8006524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006526:	81a3      	strhlt	r3, [r4, #12]
 8006528:	bd10      	pop	{r4, pc}

0800652a <__swrite>:
 800652a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652e:	461f      	mov	r7, r3
 8006530:	898b      	ldrh	r3, [r1, #12]
 8006532:	05db      	lsls	r3, r3, #23
 8006534:	4605      	mov	r5, r0
 8006536:	460c      	mov	r4, r1
 8006538:	4616      	mov	r6, r2
 800653a:	d505      	bpl.n	8006548 <__swrite+0x1e>
 800653c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006540:	2302      	movs	r3, #2
 8006542:	2200      	movs	r2, #0
 8006544:	f000 f840 	bl	80065c8 <_lseek_r>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800654e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	4632      	mov	r2, r6
 8006556:	463b      	mov	r3, r7
 8006558:	4628      	mov	r0, r5
 800655a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800655e:	f000 b857 	b.w	8006610 <_write_r>

08006562 <__sseek>:
 8006562:	b510      	push	{r4, lr}
 8006564:	460c      	mov	r4, r1
 8006566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656a:	f000 f82d 	bl	80065c8 <_lseek_r>
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	bf15      	itete	ne
 8006574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800657a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800657e:	81a3      	strheq	r3, [r4, #12]
 8006580:	bf18      	it	ne
 8006582:	81a3      	strhne	r3, [r4, #12]
 8006584:	bd10      	pop	{r4, pc}

08006586 <__sclose>:
 8006586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658a:	f000 b80d 	b.w	80065a8 <_close_r>

0800658e <memset>:
 800658e:	4402      	add	r2, r0
 8006590:	4603      	mov	r3, r0
 8006592:	4293      	cmp	r3, r2
 8006594:	d100      	bne.n	8006598 <memset+0xa>
 8006596:	4770      	bx	lr
 8006598:	f803 1b01 	strb.w	r1, [r3], #1
 800659c:	e7f9      	b.n	8006592 <memset+0x4>
	...

080065a0 <_localeconv_r>:
 80065a0:	4800      	ldr	r0, [pc, #0]	@ (80065a4 <_localeconv_r+0x4>)
 80065a2:	4770      	bx	lr
 80065a4:	200001c8 	.word	0x200001c8

080065a8 <_close_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d06      	ldr	r5, [pc, #24]	@ (80065c4 <_close_r+0x1c>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	602b      	str	r3, [r5, #0]
 80065b4:	f7fc f883 	bl	80026be <_close>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_close_r+0x1a>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_close_r+0x1a>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	20000544 	.word	0x20000544

080065c8 <_lseek_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d07      	ldr	r5, [pc, #28]	@ (80065e8 <_lseek_r+0x20>)
 80065cc:	4604      	mov	r4, r0
 80065ce:	4608      	mov	r0, r1
 80065d0:	4611      	mov	r1, r2
 80065d2:	2200      	movs	r2, #0
 80065d4:	602a      	str	r2, [r5, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f7fc f898 	bl	800270c <_lseek>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_lseek_r+0x1e>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_lseek_r+0x1e>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20000544 	.word	0x20000544

080065ec <_read_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	@ (800660c <_read_r+0x20>)
 80065f0:	4604      	mov	r4, r0
 80065f2:	4608      	mov	r0, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	2200      	movs	r2, #0
 80065f8:	602a      	str	r2, [r5, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f7fc f826 	bl	800264c <_read>
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	d102      	bne.n	800660a <_read_r+0x1e>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	b103      	cbz	r3, 800660a <_read_r+0x1e>
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	20000544 	.word	0x20000544

08006610 <_write_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d07      	ldr	r5, [pc, #28]	@ (8006630 <_write_r+0x20>)
 8006614:	4604      	mov	r4, r0
 8006616:	4608      	mov	r0, r1
 8006618:	4611      	mov	r1, r2
 800661a:	2200      	movs	r2, #0
 800661c:	602a      	str	r2, [r5, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	f7fc f831 	bl	8002686 <_write>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_write_r+0x1e>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_write_r+0x1e>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	20000544 	.word	0x20000544

08006634 <__errno>:
 8006634:	4b01      	ldr	r3, [pc, #4]	@ (800663c <__errno+0x8>)
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000088 	.word	0x20000088

08006640 <__libc_init_array>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4d0d      	ldr	r5, [pc, #52]	@ (8006678 <__libc_init_array+0x38>)
 8006644:	4c0d      	ldr	r4, [pc, #52]	@ (800667c <__libc_init_array+0x3c>)
 8006646:	1b64      	subs	r4, r4, r5
 8006648:	10a4      	asrs	r4, r4, #2
 800664a:	2600      	movs	r6, #0
 800664c:	42a6      	cmp	r6, r4
 800664e:	d109      	bne.n	8006664 <__libc_init_array+0x24>
 8006650:	4d0b      	ldr	r5, [pc, #44]	@ (8006680 <__libc_init_array+0x40>)
 8006652:	4c0c      	ldr	r4, [pc, #48]	@ (8006684 <__libc_init_array+0x44>)
 8006654:	f002 f864 	bl	8008720 <_init>
 8006658:	1b64      	subs	r4, r4, r5
 800665a:	10a4      	asrs	r4, r4, #2
 800665c:	2600      	movs	r6, #0
 800665e:	42a6      	cmp	r6, r4
 8006660:	d105      	bne.n	800666e <__libc_init_array+0x2e>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	f855 3b04 	ldr.w	r3, [r5], #4
 8006668:	4798      	blx	r3
 800666a:	3601      	adds	r6, #1
 800666c:	e7ee      	b.n	800664c <__libc_init_array+0xc>
 800666e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006672:	4798      	blx	r3
 8006674:	3601      	adds	r6, #1
 8006676:	e7f2      	b.n	800665e <__libc_init_array+0x1e>
 8006678:	08008b20 	.word	0x08008b20
 800667c:	08008b20 	.word	0x08008b20
 8006680:	08008b20 	.word	0x08008b20
 8006684:	08008b24 	.word	0x08008b24

08006688 <__retarget_lock_init_recursive>:
 8006688:	4770      	bx	lr

0800668a <__retarget_lock_acquire_recursive>:
 800668a:	4770      	bx	lr

0800668c <__retarget_lock_release_recursive>:
 800668c:	4770      	bx	lr

0800668e <quorem>:
 800668e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006692:	6903      	ldr	r3, [r0, #16]
 8006694:	690c      	ldr	r4, [r1, #16]
 8006696:	42a3      	cmp	r3, r4
 8006698:	4607      	mov	r7, r0
 800669a:	db7e      	blt.n	800679a <quorem+0x10c>
 800669c:	3c01      	subs	r4, #1
 800669e:	f101 0814 	add.w	r8, r1, #20
 80066a2:	00a3      	lsls	r3, r4, #2
 80066a4:	f100 0514 	add.w	r5, r0, #20
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066b8:	3301      	adds	r3, #1
 80066ba:	429a      	cmp	r2, r3
 80066bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80066c4:	d32e      	bcc.n	8006724 <quorem+0x96>
 80066c6:	f04f 0a00 	mov.w	sl, #0
 80066ca:	46c4      	mov	ip, r8
 80066cc:	46ae      	mov	lr, r5
 80066ce:	46d3      	mov	fp, sl
 80066d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066d4:	b298      	uxth	r0, r3
 80066d6:	fb06 a000 	mla	r0, r6, r0, sl
 80066da:	0c02      	lsrs	r2, r0, #16
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	fb06 2303 	mla	r3, r6, r3, r2
 80066e2:	f8de 2000 	ldr.w	r2, [lr]
 80066e6:	b280      	uxth	r0, r0
 80066e8:	b292      	uxth	r2, r2
 80066ea:	1a12      	subs	r2, r2, r0
 80066ec:	445a      	add	r2, fp
 80066ee:	f8de 0000 	ldr.w	r0, [lr]
 80066f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006700:	b292      	uxth	r2, r2
 8006702:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006706:	45e1      	cmp	r9, ip
 8006708:	f84e 2b04 	str.w	r2, [lr], #4
 800670c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006710:	d2de      	bcs.n	80066d0 <quorem+0x42>
 8006712:	9b00      	ldr	r3, [sp, #0]
 8006714:	58eb      	ldr	r3, [r5, r3]
 8006716:	b92b      	cbnz	r3, 8006724 <quorem+0x96>
 8006718:	9b01      	ldr	r3, [sp, #4]
 800671a:	3b04      	subs	r3, #4
 800671c:	429d      	cmp	r5, r3
 800671e:	461a      	mov	r2, r3
 8006720:	d32f      	bcc.n	8006782 <quorem+0xf4>
 8006722:	613c      	str	r4, [r7, #16]
 8006724:	4638      	mov	r0, r7
 8006726:	f001 f979 	bl	8007a1c <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	db25      	blt.n	800677a <quorem+0xec>
 800672e:	4629      	mov	r1, r5
 8006730:	2000      	movs	r0, #0
 8006732:	f858 2b04 	ldr.w	r2, [r8], #4
 8006736:	f8d1 c000 	ldr.w	ip, [r1]
 800673a:	fa1f fe82 	uxth.w	lr, r2
 800673e:	fa1f f38c 	uxth.w	r3, ip
 8006742:	eba3 030e 	sub.w	r3, r3, lr
 8006746:	4403      	add	r3, r0
 8006748:	0c12      	lsrs	r2, r2, #16
 800674a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800674e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006752:	b29b      	uxth	r3, r3
 8006754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006758:	45c1      	cmp	r9, r8
 800675a:	f841 3b04 	str.w	r3, [r1], #4
 800675e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006762:	d2e6      	bcs.n	8006732 <quorem+0xa4>
 8006764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800676c:	b922      	cbnz	r2, 8006778 <quorem+0xea>
 800676e:	3b04      	subs	r3, #4
 8006770:	429d      	cmp	r5, r3
 8006772:	461a      	mov	r2, r3
 8006774:	d30b      	bcc.n	800678e <quorem+0x100>
 8006776:	613c      	str	r4, [r7, #16]
 8006778:	3601      	adds	r6, #1
 800677a:	4630      	mov	r0, r6
 800677c:	b003      	add	sp, #12
 800677e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	3b04      	subs	r3, #4
 8006786:	2a00      	cmp	r2, #0
 8006788:	d1cb      	bne.n	8006722 <quorem+0x94>
 800678a:	3c01      	subs	r4, #1
 800678c:	e7c6      	b.n	800671c <quorem+0x8e>
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	3b04      	subs	r3, #4
 8006792:	2a00      	cmp	r2, #0
 8006794:	d1ef      	bne.n	8006776 <quorem+0xe8>
 8006796:	3c01      	subs	r4, #1
 8006798:	e7ea      	b.n	8006770 <quorem+0xe2>
 800679a:	2000      	movs	r0, #0
 800679c:	e7ee      	b.n	800677c <quorem+0xee>
	...

080067a0 <_dtoa_r>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	69c7      	ldr	r7, [r0, #28]
 80067a6:	b099      	sub	sp, #100	@ 0x64
 80067a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067ac:	ec55 4b10 	vmov	r4, r5, d0
 80067b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80067b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80067b4:	4683      	mov	fp, r0
 80067b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80067b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067ba:	b97f      	cbnz	r7, 80067dc <_dtoa_r+0x3c>
 80067bc:	2010      	movs	r0, #16
 80067be:	f000 fdfd 	bl	80073bc <malloc>
 80067c2:	4602      	mov	r2, r0
 80067c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80067c8:	b920      	cbnz	r0, 80067d4 <_dtoa_r+0x34>
 80067ca:	4ba7      	ldr	r3, [pc, #668]	@ (8006a68 <_dtoa_r+0x2c8>)
 80067cc:	21ef      	movs	r1, #239	@ 0xef
 80067ce:	48a7      	ldr	r0, [pc, #668]	@ (8006a6c <_dtoa_r+0x2cc>)
 80067d0:	f001 fc68 	bl	80080a4 <__assert_func>
 80067d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067d8:	6007      	str	r7, [r0, #0]
 80067da:	60c7      	str	r7, [r0, #12]
 80067dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067e0:	6819      	ldr	r1, [r3, #0]
 80067e2:	b159      	cbz	r1, 80067fc <_dtoa_r+0x5c>
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	604a      	str	r2, [r1, #4]
 80067e8:	2301      	movs	r3, #1
 80067ea:	4093      	lsls	r3, r2
 80067ec:	608b      	str	r3, [r1, #8]
 80067ee:	4658      	mov	r0, fp
 80067f0:	f000 feda 	bl	80075a8 <_Bfree>
 80067f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	1e2b      	subs	r3, r5, #0
 80067fe:	bfb9      	ittee	lt
 8006800:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006804:	9303      	strlt	r3, [sp, #12]
 8006806:	2300      	movge	r3, #0
 8006808:	6033      	strge	r3, [r6, #0]
 800680a:	9f03      	ldr	r7, [sp, #12]
 800680c:	4b98      	ldr	r3, [pc, #608]	@ (8006a70 <_dtoa_r+0x2d0>)
 800680e:	bfbc      	itt	lt
 8006810:	2201      	movlt	r2, #1
 8006812:	6032      	strlt	r2, [r6, #0]
 8006814:	43bb      	bics	r3, r7
 8006816:	d112      	bne.n	800683e <_dtoa_r+0x9e>
 8006818:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800681a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006824:	4323      	orrs	r3, r4
 8006826:	f000 854d 	beq.w	80072c4 <_dtoa_r+0xb24>
 800682a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800682c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a84 <_dtoa_r+0x2e4>
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 854f 	beq.w	80072d4 <_dtoa_r+0xb34>
 8006836:	f10a 0303 	add.w	r3, sl, #3
 800683a:	f000 bd49 	b.w	80072d0 <_dtoa_r+0xb30>
 800683e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006842:	2200      	movs	r2, #0
 8006844:	ec51 0b17 	vmov	r0, r1, d7
 8006848:	2300      	movs	r3, #0
 800684a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800684e:	f7fa f943 	bl	8000ad8 <__aeabi_dcmpeq>
 8006852:	4680      	mov	r8, r0
 8006854:	b158      	cbz	r0, 800686e <_dtoa_r+0xce>
 8006856:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006858:	2301      	movs	r3, #1
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800685e:	b113      	cbz	r3, 8006866 <_dtoa_r+0xc6>
 8006860:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006862:	4b84      	ldr	r3, [pc, #528]	@ (8006a74 <_dtoa_r+0x2d4>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a88 <_dtoa_r+0x2e8>
 800686a:	f000 bd33 	b.w	80072d4 <_dtoa_r+0xb34>
 800686e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006872:	aa16      	add	r2, sp, #88	@ 0x58
 8006874:	a917      	add	r1, sp, #92	@ 0x5c
 8006876:	4658      	mov	r0, fp
 8006878:	f001 f980 	bl	8007b7c <__d2b>
 800687c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006880:	4681      	mov	r9, r0
 8006882:	2e00      	cmp	r6, #0
 8006884:	d077      	beq.n	8006976 <_dtoa_r+0x1d6>
 8006886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006888:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800688c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006894:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006898:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800689c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068a0:	4619      	mov	r1, r3
 80068a2:	2200      	movs	r2, #0
 80068a4:	4b74      	ldr	r3, [pc, #464]	@ (8006a78 <_dtoa_r+0x2d8>)
 80068a6:	f7f9 fcf7 	bl	8000298 <__aeabi_dsub>
 80068aa:	a369      	add	r3, pc, #420	@ (adr r3, 8006a50 <_dtoa_r+0x2b0>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f7f9 feaa 	bl	8000608 <__aeabi_dmul>
 80068b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006a58 <_dtoa_r+0x2b8>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 fcef 	bl	800029c <__adddf3>
 80068be:	4604      	mov	r4, r0
 80068c0:	4630      	mov	r0, r6
 80068c2:	460d      	mov	r5, r1
 80068c4:	f7f9 fe36 	bl	8000534 <__aeabi_i2d>
 80068c8:	a365      	add	r3, pc, #404	@ (adr r3, 8006a60 <_dtoa_r+0x2c0>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f7f9 fe9b 	bl	8000608 <__aeabi_dmul>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4620      	mov	r0, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	f7f9 fcdf 	bl	800029c <__adddf3>
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	f7fa f941 	bl	8000b68 <__aeabi_d2iz>
 80068e6:	2200      	movs	r2, #0
 80068e8:	4607      	mov	r7, r0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7fa f8fc 	bl	8000aec <__aeabi_dcmplt>
 80068f4:	b140      	cbz	r0, 8006908 <_dtoa_r+0x168>
 80068f6:	4638      	mov	r0, r7
 80068f8:	f7f9 fe1c 	bl	8000534 <__aeabi_i2d>
 80068fc:	4622      	mov	r2, r4
 80068fe:	462b      	mov	r3, r5
 8006900:	f7fa f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006904:	b900      	cbnz	r0, 8006908 <_dtoa_r+0x168>
 8006906:	3f01      	subs	r7, #1
 8006908:	2f16      	cmp	r7, #22
 800690a:	d851      	bhi.n	80069b0 <_dtoa_r+0x210>
 800690c:	4b5b      	ldr	r3, [pc, #364]	@ (8006a7c <_dtoa_r+0x2dc>)
 800690e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800691a:	f7fa f8e7 	bl	8000aec <__aeabi_dcmplt>
 800691e:	2800      	cmp	r0, #0
 8006920:	d048      	beq.n	80069b4 <_dtoa_r+0x214>
 8006922:	3f01      	subs	r7, #1
 8006924:	2300      	movs	r3, #0
 8006926:	9312      	str	r3, [sp, #72]	@ 0x48
 8006928:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800692a:	1b9b      	subs	r3, r3, r6
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	bf44      	itt	mi
 8006930:	f1c3 0801 	rsbmi	r8, r3, #1
 8006934:	2300      	movmi	r3, #0
 8006936:	9208      	str	r2, [sp, #32]
 8006938:	bf54      	ite	pl
 800693a:	f04f 0800 	movpl.w	r8, #0
 800693e:	9308      	strmi	r3, [sp, #32]
 8006940:	2f00      	cmp	r7, #0
 8006942:	db39      	blt.n	80069b8 <_dtoa_r+0x218>
 8006944:	9b08      	ldr	r3, [sp, #32]
 8006946:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006948:	443b      	add	r3, r7
 800694a:	9308      	str	r3, [sp, #32]
 800694c:	2300      	movs	r3, #0
 800694e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006952:	2b09      	cmp	r3, #9
 8006954:	d864      	bhi.n	8006a20 <_dtoa_r+0x280>
 8006956:	2b05      	cmp	r3, #5
 8006958:	bfc4      	itt	gt
 800695a:	3b04      	subgt	r3, #4
 800695c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800695e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006960:	f1a3 0302 	sub.w	r3, r3, #2
 8006964:	bfcc      	ite	gt
 8006966:	2400      	movgt	r4, #0
 8006968:	2401      	movle	r4, #1
 800696a:	2b03      	cmp	r3, #3
 800696c:	d863      	bhi.n	8006a36 <_dtoa_r+0x296>
 800696e:	e8df f003 	tbb	[pc, r3]
 8006972:	372a      	.short	0x372a
 8006974:	5535      	.short	0x5535
 8006976:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800697a:	441e      	add	r6, r3
 800697c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006980:	2b20      	cmp	r3, #32
 8006982:	bfc1      	itttt	gt
 8006984:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006988:	409f      	lslgt	r7, r3
 800698a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800698e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006992:	bfd6      	itet	le
 8006994:	f1c3 0320 	rsble	r3, r3, #32
 8006998:	ea47 0003 	orrgt.w	r0, r7, r3
 800699c:	fa04 f003 	lslle.w	r0, r4, r3
 80069a0:	f7f9 fdb8 	bl	8000514 <__aeabi_ui2d>
 80069a4:	2201      	movs	r2, #1
 80069a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069aa:	3e01      	subs	r6, #1
 80069ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80069ae:	e777      	b.n	80068a0 <_dtoa_r+0x100>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e7b8      	b.n	8006926 <_dtoa_r+0x186>
 80069b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80069b6:	e7b7      	b.n	8006928 <_dtoa_r+0x188>
 80069b8:	427b      	negs	r3, r7
 80069ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80069bc:	2300      	movs	r3, #0
 80069be:	eba8 0807 	sub.w	r8, r8, r7
 80069c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069c4:	e7c4      	b.n	8006950 <_dtoa_r+0x1b0>
 80069c6:	2300      	movs	r3, #0
 80069c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc35      	bgt.n	8006a3c <_dtoa_r+0x29c>
 80069d0:	2301      	movs	r3, #1
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	9307      	str	r3, [sp, #28]
 80069d6:	461a      	mov	r2, r3
 80069d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80069da:	e00b      	b.n	80069f4 <_dtoa_r+0x254>
 80069dc:	2301      	movs	r3, #1
 80069de:	e7f3      	b.n	80069c8 <_dtoa_r+0x228>
 80069e0:	2300      	movs	r3, #0
 80069e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069e6:	18fb      	adds	r3, r7, r3
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	3301      	adds	r3, #1
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	9307      	str	r3, [sp, #28]
 80069f0:	bfb8      	it	lt
 80069f2:	2301      	movlt	r3, #1
 80069f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80069f8:	2100      	movs	r1, #0
 80069fa:	2204      	movs	r2, #4
 80069fc:	f102 0514 	add.w	r5, r2, #20
 8006a00:	429d      	cmp	r5, r3
 8006a02:	d91f      	bls.n	8006a44 <_dtoa_r+0x2a4>
 8006a04:	6041      	str	r1, [r0, #4]
 8006a06:	4658      	mov	r0, fp
 8006a08:	f000 fd8e 	bl	8007528 <_Balloc>
 8006a0c:	4682      	mov	sl, r0
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d13c      	bne.n	8006a8c <_dtoa_r+0x2ec>
 8006a12:	4b1b      	ldr	r3, [pc, #108]	@ (8006a80 <_dtoa_r+0x2e0>)
 8006a14:	4602      	mov	r2, r0
 8006a16:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a1a:	e6d8      	b.n	80067ce <_dtoa_r+0x2e>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e7e0      	b.n	80069e2 <_dtoa_r+0x242>
 8006a20:	2401      	movs	r4, #1
 8006a22:	2300      	movs	r3, #0
 8006a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a28:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	9307      	str	r3, [sp, #28]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2312      	movs	r3, #18
 8006a34:	e7d0      	b.n	80069d8 <_dtoa_r+0x238>
 8006a36:	2301      	movs	r3, #1
 8006a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a3a:	e7f5      	b.n	8006a28 <_dtoa_r+0x288>
 8006a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	9307      	str	r3, [sp, #28]
 8006a42:	e7d7      	b.n	80069f4 <_dtoa_r+0x254>
 8006a44:	3101      	adds	r1, #1
 8006a46:	0052      	lsls	r2, r2, #1
 8006a48:	e7d8      	b.n	80069fc <_dtoa_r+0x25c>
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w
 8006a50:	636f4361 	.word	0x636f4361
 8006a54:	3fd287a7 	.word	0x3fd287a7
 8006a58:	8b60c8b3 	.word	0x8b60c8b3
 8006a5c:	3fc68a28 	.word	0x3fc68a28
 8006a60:	509f79fb 	.word	0x509f79fb
 8006a64:	3fd34413 	.word	0x3fd34413
 8006a68:	080087e9 	.word	0x080087e9
 8006a6c:	08008800 	.word	0x08008800
 8006a70:	7ff00000 	.word	0x7ff00000
 8006a74:	080087b9 	.word	0x080087b9
 8006a78:	3ff80000 	.word	0x3ff80000
 8006a7c:	080088f8 	.word	0x080088f8
 8006a80:	08008858 	.word	0x08008858
 8006a84:	080087e5 	.word	0x080087e5
 8006a88:	080087b8 	.word	0x080087b8
 8006a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a90:	6018      	str	r0, [r3, #0]
 8006a92:	9b07      	ldr	r3, [sp, #28]
 8006a94:	2b0e      	cmp	r3, #14
 8006a96:	f200 80a4 	bhi.w	8006be2 <_dtoa_r+0x442>
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	f000 80a1 	beq.w	8006be2 <_dtoa_r+0x442>
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	dd33      	ble.n	8006b0c <_dtoa_r+0x36c>
 8006aa4:	4bad      	ldr	r3, [pc, #692]	@ (8006d5c <_dtoa_r+0x5bc>)
 8006aa6:	f007 020f 	and.w	r2, r7, #15
 8006aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aae:	ed93 7b00 	vldr	d7, [r3]
 8006ab2:	05f8      	lsls	r0, r7, #23
 8006ab4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006abc:	d516      	bpl.n	8006aec <_dtoa_r+0x34c>
 8006abe:	4ba8      	ldr	r3, [pc, #672]	@ (8006d60 <_dtoa_r+0x5c0>)
 8006ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ac8:	f7f9 fec8 	bl	800085c <__aeabi_ddiv>
 8006acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad0:	f004 040f 	and.w	r4, r4, #15
 8006ad4:	2603      	movs	r6, #3
 8006ad6:	4da2      	ldr	r5, [pc, #648]	@ (8006d60 <_dtoa_r+0x5c0>)
 8006ad8:	b954      	cbnz	r4, 8006af0 <_dtoa_r+0x350>
 8006ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae2:	f7f9 febb 	bl	800085c <__aeabi_ddiv>
 8006ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aea:	e028      	b.n	8006b3e <_dtoa_r+0x39e>
 8006aec:	2602      	movs	r6, #2
 8006aee:	e7f2      	b.n	8006ad6 <_dtoa_r+0x336>
 8006af0:	07e1      	lsls	r1, r4, #31
 8006af2:	d508      	bpl.n	8006b06 <_dtoa_r+0x366>
 8006af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006afc:	f7f9 fd84 	bl	8000608 <__aeabi_dmul>
 8006b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b04:	3601      	adds	r6, #1
 8006b06:	1064      	asrs	r4, r4, #1
 8006b08:	3508      	adds	r5, #8
 8006b0a:	e7e5      	b.n	8006ad8 <_dtoa_r+0x338>
 8006b0c:	f000 80d2 	beq.w	8006cb4 <_dtoa_r+0x514>
 8006b10:	427c      	negs	r4, r7
 8006b12:	4b92      	ldr	r3, [pc, #584]	@ (8006d5c <_dtoa_r+0x5bc>)
 8006b14:	4d92      	ldr	r5, [pc, #584]	@ (8006d60 <_dtoa_r+0x5c0>)
 8006b16:	f004 020f 	and.w	r2, r4, #15
 8006b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b26:	f7f9 fd6f 	bl	8000608 <__aeabi_dmul>
 8006b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2e:	1124      	asrs	r4, r4, #4
 8006b30:	2300      	movs	r3, #0
 8006b32:	2602      	movs	r6, #2
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	f040 80b2 	bne.w	8006c9e <_dtoa_r+0x4fe>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1d3      	bne.n	8006ae6 <_dtoa_r+0x346>
 8006b3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80b7 	beq.w	8006cb8 <_dtoa_r+0x518>
 8006b4a:	4b86      	ldr	r3, [pc, #536]	@ (8006d64 <_dtoa_r+0x5c4>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	f7f9 ffcb 	bl	8000aec <__aeabi_dcmplt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	f000 80ae 	beq.w	8006cb8 <_dtoa_r+0x518>
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 80aa 	beq.w	8006cb8 <_dtoa_r+0x518>
 8006b64:	9b00      	ldr	r3, [sp, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	dd37      	ble.n	8006bda <_dtoa_r+0x43a>
 8006b6a:	1e7b      	subs	r3, r7, #1
 8006b6c:	9304      	str	r3, [sp, #16]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4b7d      	ldr	r3, [pc, #500]	@ (8006d68 <_dtoa_r+0x5c8>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	4629      	mov	r1, r5
 8006b76:	f7f9 fd47 	bl	8000608 <__aeabi_dmul>
 8006b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b7e:	9c00      	ldr	r4, [sp, #0]
 8006b80:	3601      	adds	r6, #1
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7f9 fcd6 	bl	8000534 <__aeabi_i2d>
 8006b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b8c:	f7f9 fd3c 	bl	8000608 <__aeabi_dmul>
 8006b90:	4b76      	ldr	r3, [pc, #472]	@ (8006d6c <_dtoa_r+0x5cc>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	f7f9 fb82 	bl	800029c <__adddf3>
 8006b98:	4605      	mov	r5, r0
 8006b9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	f040 808d 	bne.w	8006cbe <_dtoa_r+0x51e>
 8006ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba8:	4b71      	ldr	r3, [pc, #452]	@ (8006d70 <_dtoa_r+0x5d0>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	f7f9 fb74 	bl	8000298 <__aeabi_dsub>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4633      	mov	r3, r6
 8006bbc:	f7f9 ffb4 	bl	8000b28 <__aeabi_dcmpgt>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f040 828b 	bne.w	80070dc <_dtoa_r+0x93c>
 8006bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bca:	462a      	mov	r2, r5
 8006bcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bd0:	f7f9 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f040 8128 	bne.w	8006e2a <_dtoa_r+0x68a>
 8006bda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006bde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006be2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f2c0 815a 	blt.w	8006e9e <_dtoa_r+0x6fe>
 8006bea:	2f0e      	cmp	r7, #14
 8006bec:	f300 8157 	bgt.w	8006e9e <_dtoa_r+0x6fe>
 8006bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8006d5c <_dtoa_r+0x5bc>)
 8006bf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bf6:	ed93 7b00 	vldr	d7, [r3]
 8006bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	ed8d 7b00 	vstr	d7, [sp]
 8006c02:	da03      	bge.n	8006c0c <_dtoa_r+0x46c>
 8006c04:	9b07      	ldr	r3, [sp, #28]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f340 8101 	ble.w	8006e0e <_dtoa_r+0x66e>
 8006c0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c10:	4656      	mov	r6, sl
 8006c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 fe1f 	bl	800085c <__aeabi_ddiv>
 8006c1e:	f7f9 ffa3 	bl	8000b68 <__aeabi_d2iz>
 8006c22:	4680      	mov	r8, r0
 8006c24:	f7f9 fc86 	bl	8000534 <__aeabi_i2d>
 8006c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c2c:	f7f9 fcec 	bl	8000608 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4620      	mov	r0, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c3c:	f7f9 fb2c 	bl	8000298 <__aeabi_dsub>
 8006c40:	f806 4b01 	strb.w	r4, [r6], #1
 8006c44:	9d07      	ldr	r5, [sp, #28]
 8006c46:	eba6 040a 	sub.w	r4, r6, sl
 8006c4a:	42a5      	cmp	r5, r4
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	f040 8117 	bne.w	8006e82 <_dtoa_r+0x6e2>
 8006c54:	f7f9 fb22 	bl	800029c <__adddf3>
 8006c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	f7f9 ff62 	bl	8000b28 <__aeabi_dcmpgt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f040 80f9 	bne.w	8006e5c <_dtoa_r+0x6bc>
 8006c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 ff31 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c76:	b118      	cbz	r0, 8006c80 <_dtoa_r+0x4e0>
 8006c78:	f018 0f01 	tst.w	r8, #1
 8006c7c:	f040 80ee 	bne.w	8006e5c <_dtoa_r+0x6bc>
 8006c80:	4649      	mov	r1, r9
 8006c82:	4658      	mov	r0, fp
 8006c84:	f000 fc90 	bl	80075a8 <_Bfree>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	7033      	strb	r3, [r6, #0]
 8006c8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c8e:	3701      	adds	r7, #1
 8006c90:	601f      	str	r7, [r3, #0]
 8006c92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 831d 	beq.w	80072d4 <_dtoa_r+0xb34>
 8006c9a:	601e      	str	r6, [r3, #0]
 8006c9c:	e31a      	b.n	80072d4 <_dtoa_r+0xb34>
 8006c9e:	07e2      	lsls	r2, r4, #31
 8006ca0:	d505      	bpl.n	8006cae <_dtoa_r+0x50e>
 8006ca2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ca6:	f7f9 fcaf 	bl	8000608 <__aeabi_dmul>
 8006caa:	3601      	adds	r6, #1
 8006cac:	2301      	movs	r3, #1
 8006cae:	1064      	asrs	r4, r4, #1
 8006cb0:	3508      	adds	r5, #8
 8006cb2:	e73f      	b.n	8006b34 <_dtoa_r+0x394>
 8006cb4:	2602      	movs	r6, #2
 8006cb6:	e742      	b.n	8006b3e <_dtoa_r+0x39e>
 8006cb8:	9c07      	ldr	r4, [sp, #28]
 8006cba:	9704      	str	r7, [sp, #16]
 8006cbc:	e761      	b.n	8006b82 <_dtoa_r+0x3e2>
 8006cbe:	4b27      	ldr	r3, [pc, #156]	@ (8006d5c <_dtoa_r+0x5bc>)
 8006cc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cca:	4454      	add	r4, sl
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d053      	beq.n	8006d78 <_dtoa_r+0x5d8>
 8006cd0:	4928      	ldr	r1, [pc, #160]	@ (8006d74 <_dtoa_r+0x5d4>)
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	f7f9 fdc2 	bl	800085c <__aeabi_ddiv>
 8006cd8:	4633      	mov	r3, r6
 8006cda:	462a      	mov	r2, r5
 8006cdc:	f7f9 fadc 	bl	8000298 <__aeabi_dsub>
 8006ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ce4:	4656      	mov	r6, sl
 8006ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cea:	f7f9 ff3d 	bl	8000b68 <__aeabi_d2iz>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	f7f9 fc20 	bl	8000534 <__aeabi_i2d>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfc:	f7f9 facc 	bl	8000298 <__aeabi_dsub>
 8006d00:	3530      	adds	r5, #48	@ 0x30
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d0a:	f806 5b01 	strb.w	r5, [r6], #1
 8006d0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d12:	f7f9 feeb 	bl	8000aec <__aeabi_dcmplt>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d171      	bne.n	8006dfe <_dtoa_r+0x65e>
 8006d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d1e:	4911      	ldr	r1, [pc, #68]	@ (8006d64 <_dtoa_r+0x5c4>)
 8006d20:	2000      	movs	r0, #0
 8006d22:	f7f9 fab9 	bl	8000298 <__aeabi_dsub>
 8006d26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d2a:	f7f9 fedf 	bl	8000aec <__aeabi_dcmplt>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f040 8095 	bne.w	8006e5e <_dtoa_r+0x6be>
 8006d34:	42a6      	cmp	r6, r4
 8006d36:	f43f af50 	beq.w	8006bda <_dtoa_r+0x43a>
 8006d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d68 <_dtoa_r+0x5c8>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	f7f9 fc61 	bl	8000608 <__aeabi_dmul>
 8006d46:	4b08      	ldr	r3, [pc, #32]	@ (8006d68 <_dtoa_r+0x5c8>)
 8006d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d52:	f7f9 fc59 	bl	8000608 <__aeabi_dmul>
 8006d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5a:	e7c4      	b.n	8006ce6 <_dtoa_r+0x546>
 8006d5c:	080088f8 	.word	0x080088f8
 8006d60:	080088d0 	.word	0x080088d0
 8006d64:	3ff00000 	.word	0x3ff00000
 8006d68:	40240000 	.word	0x40240000
 8006d6c:	401c0000 	.word	0x401c0000
 8006d70:	40140000 	.word	0x40140000
 8006d74:	3fe00000 	.word	0x3fe00000
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7f9 fc44 	bl	8000608 <__aeabi_dmul>
 8006d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d84:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d86:	4656      	mov	r6, sl
 8006d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d8c:	f7f9 feec 	bl	8000b68 <__aeabi_d2iz>
 8006d90:	4605      	mov	r5, r0
 8006d92:	f7f9 fbcf 	bl	8000534 <__aeabi_i2d>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9e:	f7f9 fa7b 	bl	8000298 <__aeabi_dsub>
 8006da2:	3530      	adds	r5, #48	@ 0x30
 8006da4:	f806 5b01 	strb.w	r5, [r6], #1
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	42a6      	cmp	r6, r4
 8006dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	d124      	bne.n	8006e02 <_dtoa_r+0x662>
 8006db8:	4bac      	ldr	r3, [pc, #688]	@ (800706c <_dtoa_r+0x8cc>)
 8006dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006dbe:	f7f9 fa6d 	bl	800029c <__adddf3>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dca:	f7f9 fead 	bl	8000b28 <__aeabi_dcmpgt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d145      	bne.n	8006e5e <_dtoa_r+0x6be>
 8006dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dd6:	49a5      	ldr	r1, [pc, #660]	@ (800706c <_dtoa_r+0x8cc>)
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f7f9 fa5d 	bl	8000298 <__aeabi_dsub>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de6:	f7f9 fe81 	bl	8000aec <__aeabi_dcmplt>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	f43f aef5 	beq.w	8006bda <_dtoa_r+0x43a>
 8006df0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006df2:	1e73      	subs	r3, r6, #1
 8006df4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006df6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dfa:	2b30      	cmp	r3, #48	@ 0x30
 8006dfc:	d0f8      	beq.n	8006df0 <_dtoa_r+0x650>
 8006dfe:	9f04      	ldr	r7, [sp, #16]
 8006e00:	e73e      	b.n	8006c80 <_dtoa_r+0x4e0>
 8006e02:	4b9b      	ldr	r3, [pc, #620]	@ (8007070 <_dtoa_r+0x8d0>)
 8006e04:	f7f9 fc00 	bl	8000608 <__aeabi_dmul>
 8006e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e0c:	e7bc      	b.n	8006d88 <_dtoa_r+0x5e8>
 8006e0e:	d10c      	bne.n	8006e2a <_dtoa_r+0x68a>
 8006e10:	4b98      	ldr	r3, [pc, #608]	@ (8007074 <_dtoa_r+0x8d4>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e18:	f7f9 fbf6 	bl	8000608 <__aeabi_dmul>
 8006e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e20:	f7f9 fe78 	bl	8000b14 <__aeabi_dcmpge>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f000 8157 	beq.w	80070d8 <_dtoa_r+0x938>
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	4625      	mov	r5, r4
 8006e2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e30:	43db      	mvns	r3, r3
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	4656      	mov	r6, sl
 8006e36:	2700      	movs	r7, #0
 8006e38:	4621      	mov	r1, r4
 8006e3a:	4658      	mov	r0, fp
 8006e3c:	f000 fbb4 	bl	80075a8 <_Bfree>
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	d0dc      	beq.n	8006dfe <_dtoa_r+0x65e>
 8006e44:	b12f      	cbz	r7, 8006e52 <_dtoa_r+0x6b2>
 8006e46:	42af      	cmp	r7, r5
 8006e48:	d003      	beq.n	8006e52 <_dtoa_r+0x6b2>
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	4658      	mov	r0, fp
 8006e4e:	f000 fbab 	bl	80075a8 <_Bfree>
 8006e52:	4629      	mov	r1, r5
 8006e54:	4658      	mov	r0, fp
 8006e56:	f000 fba7 	bl	80075a8 <_Bfree>
 8006e5a:	e7d0      	b.n	8006dfe <_dtoa_r+0x65e>
 8006e5c:	9704      	str	r7, [sp, #16]
 8006e5e:	4633      	mov	r3, r6
 8006e60:	461e      	mov	r6, r3
 8006e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e66:	2a39      	cmp	r2, #57	@ 0x39
 8006e68:	d107      	bne.n	8006e7a <_dtoa_r+0x6da>
 8006e6a:	459a      	cmp	sl, r3
 8006e6c:	d1f8      	bne.n	8006e60 <_dtoa_r+0x6c0>
 8006e6e:	9a04      	ldr	r2, [sp, #16]
 8006e70:	3201      	adds	r2, #1
 8006e72:	9204      	str	r2, [sp, #16]
 8006e74:	2230      	movs	r2, #48	@ 0x30
 8006e76:	f88a 2000 	strb.w	r2, [sl]
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	3201      	adds	r2, #1
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	e7bd      	b.n	8006dfe <_dtoa_r+0x65e>
 8006e82:	4b7b      	ldr	r3, [pc, #492]	@ (8007070 <_dtoa_r+0x8d0>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	f7f9 fbbf 	bl	8000608 <__aeabi_dmul>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	460d      	mov	r5, r1
 8006e92:	f7f9 fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f aebb 	beq.w	8006c12 <_dtoa_r+0x472>
 8006e9c:	e6f0      	b.n	8006c80 <_dtoa_r+0x4e0>
 8006e9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ea0:	2a00      	cmp	r2, #0
 8006ea2:	f000 80db 	beq.w	800705c <_dtoa_r+0x8bc>
 8006ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ea8:	2a01      	cmp	r2, #1
 8006eaa:	f300 80bf 	bgt.w	800702c <_dtoa_r+0x88c>
 8006eae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	f000 80b7 	beq.w	8007024 <_dtoa_r+0x884>
 8006eb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006eba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ebc:	4646      	mov	r6, r8
 8006ebe:	9a08      	ldr	r2, [sp, #32]
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	441a      	add	r2, r3
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	4498      	add	r8, r3
 8006ec8:	9208      	str	r2, [sp, #32]
 8006eca:	f000 fc21 	bl	8007710 <__i2b>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b15e      	cbz	r6, 8006eea <_dtoa_r+0x74a>
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd08      	ble.n	8006eea <_dtoa_r+0x74a>
 8006ed8:	42b3      	cmp	r3, r6
 8006eda:	9a08      	ldr	r2, [sp, #32]
 8006edc:	bfa8      	it	ge
 8006ede:	4633      	movge	r3, r6
 8006ee0:	eba8 0803 	sub.w	r8, r8, r3
 8006ee4:	1af6      	subs	r6, r6, r3
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	9308      	str	r3, [sp, #32]
 8006eea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eec:	b1f3      	cbz	r3, 8006f2c <_dtoa_r+0x78c>
 8006eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80b7 	beq.w	8007064 <_dtoa_r+0x8c4>
 8006ef6:	b18c      	cbz	r4, 8006f1c <_dtoa_r+0x77c>
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4622      	mov	r2, r4
 8006efc:	4658      	mov	r0, fp
 8006efe:	f000 fcc7 	bl	8007890 <__pow5mult>
 8006f02:	464a      	mov	r2, r9
 8006f04:	4601      	mov	r1, r0
 8006f06:	4605      	mov	r5, r0
 8006f08:	4658      	mov	r0, fp
 8006f0a:	f000 fc17 	bl	800773c <__multiply>
 8006f0e:	4649      	mov	r1, r9
 8006f10:	9004      	str	r0, [sp, #16]
 8006f12:	4658      	mov	r0, fp
 8006f14:	f000 fb48 	bl	80075a8 <_Bfree>
 8006f18:	9b04      	ldr	r3, [sp, #16]
 8006f1a:	4699      	mov	r9, r3
 8006f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f1e:	1b1a      	subs	r2, r3, r4
 8006f20:	d004      	beq.n	8006f2c <_dtoa_r+0x78c>
 8006f22:	4649      	mov	r1, r9
 8006f24:	4658      	mov	r0, fp
 8006f26:	f000 fcb3 	bl	8007890 <__pow5mult>
 8006f2a:	4681      	mov	r9, r0
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	4658      	mov	r0, fp
 8006f30:	f000 fbee 	bl	8007710 <__i2b>
 8006f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f36:	4604      	mov	r4, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 81cf 	beq.w	80072dc <_dtoa_r+0xb3c>
 8006f3e:	461a      	mov	r2, r3
 8006f40:	4601      	mov	r1, r0
 8006f42:	4658      	mov	r0, fp
 8006f44:	f000 fca4 	bl	8007890 <__pow5mult>
 8006f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	f300 8095 	bgt.w	800707c <_dtoa_r+0x8dc>
 8006f52:	9b02      	ldr	r3, [sp, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f040 8087 	bne.w	8007068 <_dtoa_r+0x8c8>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 8089 	bne.w	8007078 <_dtoa_r+0x8d8>
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f6c:	0d1b      	lsrs	r3, r3, #20
 8006f6e:	051b      	lsls	r3, r3, #20
 8006f70:	b12b      	cbz	r3, 8006f7e <_dtoa_r+0x7de>
 8006f72:	9b08      	ldr	r3, [sp, #32]
 8006f74:	3301      	adds	r3, #1
 8006f76:	9308      	str	r3, [sp, #32]
 8006f78:	f108 0801 	add.w	r8, r8, #1
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 81b0 	beq.w	80072e8 <_dtoa_r+0xb48>
 8006f88:	6923      	ldr	r3, [r4, #16]
 8006f8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f8e:	6918      	ldr	r0, [r3, #16]
 8006f90:	f000 fb72 	bl	8007678 <__hi0bits>
 8006f94:	f1c0 0020 	rsb	r0, r0, #32
 8006f98:	9b08      	ldr	r3, [sp, #32]
 8006f9a:	4418      	add	r0, r3
 8006f9c:	f010 001f 	ands.w	r0, r0, #31
 8006fa0:	d077      	beq.n	8007092 <_dtoa_r+0x8f2>
 8006fa2:	f1c0 0320 	rsb	r3, r0, #32
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	dd6b      	ble.n	8007082 <_dtoa_r+0x8e2>
 8006faa:	9b08      	ldr	r3, [sp, #32]
 8006fac:	f1c0 001c 	rsb	r0, r0, #28
 8006fb0:	4403      	add	r3, r0
 8006fb2:	4480      	add	r8, r0
 8006fb4:	4406      	add	r6, r0
 8006fb6:	9308      	str	r3, [sp, #32]
 8006fb8:	f1b8 0f00 	cmp.w	r8, #0
 8006fbc:	dd05      	ble.n	8006fca <_dtoa_r+0x82a>
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	4658      	mov	r0, fp
 8006fc4:	f000 fcbe 	bl	8007944 <__lshift>
 8006fc8:	4681      	mov	r9, r0
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dd05      	ble.n	8006fdc <_dtoa_r+0x83c>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4658      	mov	r0, fp
 8006fd6:	f000 fcb5 	bl	8007944 <__lshift>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d059      	beq.n	8007096 <_dtoa_r+0x8f6>
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4648      	mov	r0, r9
 8006fe6:	f000 fd19 	bl	8007a1c <__mcmp>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	da53      	bge.n	8007096 <_dtoa_r+0x8f6>
 8006fee:	1e7b      	subs	r3, r7, #1
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	220a      	movs	r2, #10
 8006ff8:	4658      	mov	r0, fp
 8006ffa:	f000 faf7 	bl	80075ec <__multadd>
 8006ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007000:	4681      	mov	r9, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8172 	beq.w	80072ec <_dtoa_r+0xb4c>
 8007008:	2300      	movs	r3, #0
 800700a:	4629      	mov	r1, r5
 800700c:	220a      	movs	r2, #10
 800700e:	4658      	mov	r0, fp
 8007010:	f000 faec 	bl	80075ec <__multadd>
 8007014:	9b00      	ldr	r3, [sp, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	4605      	mov	r5, r0
 800701a:	dc67      	bgt.n	80070ec <_dtoa_r+0x94c>
 800701c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800701e:	2b02      	cmp	r3, #2
 8007020:	dc41      	bgt.n	80070a6 <_dtoa_r+0x906>
 8007022:	e063      	b.n	80070ec <_dtoa_r+0x94c>
 8007024:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007026:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800702a:	e746      	b.n	8006eba <_dtoa_r+0x71a>
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	1e5c      	subs	r4, r3, #1
 8007030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007032:	42a3      	cmp	r3, r4
 8007034:	bfbf      	itttt	lt
 8007036:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007038:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800703a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800703c:	1ae3      	sublt	r3, r4, r3
 800703e:	bfb4      	ite	lt
 8007040:	18d2      	addlt	r2, r2, r3
 8007042:	1b1c      	subge	r4, r3, r4
 8007044:	9b07      	ldr	r3, [sp, #28]
 8007046:	bfbc      	itt	lt
 8007048:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800704a:	2400      	movlt	r4, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	bfb5      	itete	lt
 8007050:	eba8 0603 	sublt.w	r6, r8, r3
 8007054:	9b07      	ldrge	r3, [sp, #28]
 8007056:	2300      	movlt	r3, #0
 8007058:	4646      	movge	r6, r8
 800705a:	e730      	b.n	8006ebe <_dtoa_r+0x71e>
 800705c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800705e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007060:	4646      	mov	r6, r8
 8007062:	e735      	b.n	8006ed0 <_dtoa_r+0x730>
 8007064:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007066:	e75c      	b.n	8006f22 <_dtoa_r+0x782>
 8007068:	2300      	movs	r3, #0
 800706a:	e788      	b.n	8006f7e <_dtoa_r+0x7de>
 800706c:	3fe00000 	.word	0x3fe00000
 8007070:	40240000 	.word	0x40240000
 8007074:	40140000 	.word	0x40140000
 8007078:	9b02      	ldr	r3, [sp, #8]
 800707a:	e780      	b.n	8006f7e <_dtoa_r+0x7de>
 800707c:	2300      	movs	r3, #0
 800707e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007080:	e782      	b.n	8006f88 <_dtoa_r+0x7e8>
 8007082:	d099      	beq.n	8006fb8 <_dtoa_r+0x818>
 8007084:	9a08      	ldr	r2, [sp, #32]
 8007086:	331c      	adds	r3, #28
 8007088:	441a      	add	r2, r3
 800708a:	4498      	add	r8, r3
 800708c:	441e      	add	r6, r3
 800708e:	9208      	str	r2, [sp, #32]
 8007090:	e792      	b.n	8006fb8 <_dtoa_r+0x818>
 8007092:	4603      	mov	r3, r0
 8007094:	e7f6      	b.n	8007084 <_dtoa_r+0x8e4>
 8007096:	9b07      	ldr	r3, [sp, #28]
 8007098:	9704      	str	r7, [sp, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	dc20      	bgt.n	80070e0 <_dtoa_r+0x940>
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	dd1e      	ble.n	80070e4 <_dtoa_r+0x944>
 80070a6:	9b00      	ldr	r3, [sp, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f47f aec0 	bne.w	8006e2e <_dtoa_r+0x68e>
 80070ae:	4621      	mov	r1, r4
 80070b0:	2205      	movs	r2, #5
 80070b2:	4658      	mov	r0, fp
 80070b4:	f000 fa9a 	bl	80075ec <__multadd>
 80070b8:	4601      	mov	r1, r0
 80070ba:	4604      	mov	r4, r0
 80070bc:	4648      	mov	r0, r9
 80070be:	f000 fcad 	bl	8007a1c <__mcmp>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f77f aeb3 	ble.w	8006e2e <_dtoa_r+0x68e>
 80070c8:	4656      	mov	r6, sl
 80070ca:	2331      	movs	r3, #49	@ 0x31
 80070cc:	f806 3b01 	strb.w	r3, [r6], #1
 80070d0:	9b04      	ldr	r3, [sp, #16]
 80070d2:	3301      	adds	r3, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	e6ae      	b.n	8006e36 <_dtoa_r+0x696>
 80070d8:	9c07      	ldr	r4, [sp, #28]
 80070da:	9704      	str	r7, [sp, #16]
 80070dc:	4625      	mov	r5, r4
 80070de:	e7f3      	b.n	80070c8 <_dtoa_r+0x928>
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 8104 	beq.w	80072f4 <_dtoa_r+0xb54>
 80070ec:	2e00      	cmp	r6, #0
 80070ee:	dd05      	ble.n	80070fc <_dtoa_r+0x95c>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4632      	mov	r2, r6
 80070f4:	4658      	mov	r0, fp
 80070f6:	f000 fc25 	bl	8007944 <__lshift>
 80070fa:	4605      	mov	r5, r0
 80070fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d05a      	beq.n	80071b8 <_dtoa_r+0xa18>
 8007102:	6869      	ldr	r1, [r5, #4]
 8007104:	4658      	mov	r0, fp
 8007106:	f000 fa0f 	bl	8007528 <_Balloc>
 800710a:	4606      	mov	r6, r0
 800710c:	b928      	cbnz	r0, 800711a <_dtoa_r+0x97a>
 800710e:	4b84      	ldr	r3, [pc, #528]	@ (8007320 <_dtoa_r+0xb80>)
 8007110:	4602      	mov	r2, r0
 8007112:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007116:	f7ff bb5a 	b.w	80067ce <_dtoa_r+0x2e>
 800711a:	692a      	ldr	r2, [r5, #16]
 800711c:	3202      	adds	r2, #2
 800711e:	0092      	lsls	r2, r2, #2
 8007120:	f105 010c 	add.w	r1, r5, #12
 8007124:	300c      	adds	r0, #12
 8007126:	f000 ffaf 	bl	8008088 <memcpy>
 800712a:	2201      	movs	r2, #1
 800712c:	4631      	mov	r1, r6
 800712e:	4658      	mov	r0, fp
 8007130:	f000 fc08 	bl	8007944 <__lshift>
 8007134:	f10a 0301 	add.w	r3, sl, #1
 8007138:	9307      	str	r3, [sp, #28]
 800713a:	9b00      	ldr	r3, [sp, #0]
 800713c:	4453      	add	r3, sl
 800713e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007140:	9b02      	ldr	r3, [sp, #8]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	462f      	mov	r7, r5
 8007148:	930a      	str	r3, [sp, #40]	@ 0x28
 800714a:	4605      	mov	r5, r0
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	4621      	mov	r1, r4
 8007150:	3b01      	subs	r3, #1
 8007152:	4648      	mov	r0, r9
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	f7ff fa9a 	bl	800668e <quorem>
 800715a:	4639      	mov	r1, r7
 800715c:	9002      	str	r0, [sp, #8]
 800715e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007162:	4648      	mov	r0, r9
 8007164:	f000 fc5a 	bl	8007a1c <__mcmp>
 8007168:	462a      	mov	r2, r5
 800716a:	9008      	str	r0, [sp, #32]
 800716c:	4621      	mov	r1, r4
 800716e:	4658      	mov	r0, fp
 8007170:	f000 fc70 	bl	8007a54 <__mdiff>
 8007174:	68c2      	ldr	r2, [r0, #12]
 8007176:	4606      	mov	r6, r0
 8007178:	bb02      	cbnz	r2, 80071bc <_dtoa_r+0xa1c>
 800717a:	4601      	mov	r1, r0
 800717c:	4648      	mov	r0, r9
 800717e:	f000 fc4d 	bl	8007a1c <__mcmp>
 8007182:	4602      	mov	r2, r0
 8007184:	4631      	mov	r1, r6
 8007186:	4658      	mov	r0, fp
 8007188:	920e      	str	r2, [sp, #56]	@ 0x38
 800718a:	f000 fa0d 	bl	80075a8 <_Bfree>
 800718e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007190:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007192:	9e07      	ldr	r6, [sp, #28]
 8007194:	ea43 0102 	orr.w	r1, r3, r2
 8007198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800719a:	4319      	orrs	r1, r3
 800719c:	d110      	bne.n	80071c0 <_dtoa_r+0xa20>
 800719e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071a2:	d029      	beq.n	80071f8 <_dtoa_r+0xa58>
 80071a4:	9b08      	ldr	r3, [sp, #32]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dd02      	ble.n	80071b0 <_dtoa_r+0xa10>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	f883 8000 	strb.w	r8, [r3]
 80071b6:	e63f      	b.n	8006e38 <_dtoa_r+0x698>
 80071b8:	4628      	mov	r0, r5
 80071ba:	e7bb      	b.n	8007134 <_dtoa_r+0x994>
 80071bc:	2201      	movs	r2, #1
 80071be:	e7e1      	b.n	8007184 <_dtoa_r+0x9e4>
 80071c0:	9b08      	ldr	r3, [sp, #32]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	db04      	blt.n	80071d0 <_dtoa_r+0xa30>
 80071c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071c8:	430b      	orrs	r3, r1
 80071ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071cc:	430b      	orrs	r3, r1
 80071ce:	d120      	bne.n	8007212 <_dtoa_r+0xa72>
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	dded      	ble.n	80071b0 <_dtoa_r+0xa10>
 80071d4:	4649      	mov	r1, r9
 80071d6:	2201      	movs	r2, #1
 80071d8:	4658      	mov	r0, fp
 80071da:	f000 fbb3 	bl	8007944 <__lshift>
 80071de:	4621      	mov	r1, r4
 80071e0:	4681      	mov	r9, r0
 80071e2:	f000 fc1b 	bl	8007a1c <__mcmp>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	dc03      	bgt.n	80071f2 <_dtoa_r+0xa52>
 80071ea:	d1e1      	bne.n	80071b0 <_dtoa_r+0xa10>
 80071ec:	f018 0f01 	tst.w	r8, #1
 80071f0:	d0de      	beq.n	80071b0 <_dtoa_r+0xa10>
 80071f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071f6:	d1d8      	bne.n	80071aa <_dtoa_r+0xa0a>
 80071f8:	9a00      	ldr	r2, [sp, #0]
 80071fa:	2339      	movs	r3, #57	@ 0x39
 80071fc:	7013      	strb	r3, [r2, #0]
 80071fe:	4633      	mov	r3, r6
 8007200:	461e      	mov	r6, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007208:	2a39      	cmp	r2, #57	@ 0x39
 800720a:	d052      	beq.n	80072b2 <_dtoa_r+0xb12>
 800720c:	3201      	adds	r2, #1
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	e612      	b.n	8006e38 <_dtoa_r+0x698>
 8007212:	2a00      	cmp	r2, #0
 8007214:	dd07      	ble.n	8007226 <_dtoa_r+0xa86>
 8007216:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800721a:	d0ed      	beq.n	80071f8 <_dtoa_r+0xa58>
 800721c:	9a00      	ldr	r2, [sp, #0]
 800721e:	f108 0301 	add.w	r3, r8, #1
 8007222:	7013      	strb	r3, [r2, #0]
 8007224:	e608      	b.n	8006e38 <_dtoa_r+0x698>
 8007226:	9b07      	ldr	r3, [sp, #28]
 8007228:	9a07      	ldr	r2, [sp, #28]
 800722a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800722e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007230:	4293      	cmp	r3, r2
 8007232:	d028      	beq.n	8007286 <_dtoa_r+0xae6>
 8007234:	4649      	mov	r1, r9
 8007236:	2300      	movs	r3, #0
 8007238:	220a      	movs	r2, #10
 800723a:	4658      	mov	r0, fp
 800723c:	f000 f9d6 	bl	80075ec <__multadd>
 8007240:	42af      	cmp	r7, r5
 8007242:	4681      	mov	r9, r0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	f04f 020a 	mov.w	r2, #10
 800724c:	4639      	mov	r1, r7
 800724e:	4658      	mov	r0, fp
 8007250:	d107      	bne.n	8007262 <_dtoa_r+0xac2>
 8007252:	f000 f9cb 	bl	80075ec <__multadd>
 8007256:	4607      	mov	r7, r0
 8007258:	4605      	mov	r5, r0
 800725a:	9b07      	ldr	r3, [sp, #28]
 800725c:	3301      	adds	r3, #1
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	e774      	b.n	800714c <_dtoa_r+0x9ac>
 8007262:	f000 f9c3 	bl	80075ec <__multadd>
 8007266:	4629      	mov	r1, r5
 8007268:	4607      	mov	r7, r0
 800726a:	2300      	movs	r3, #0
 800726c:	220a      	movs	r2, #10
 800726e:	4658      	mov	r0, fp
 8007270:	f000 f9bc 	bl	80075ec <__multadd>
 8007274:	4605      	mov	r5, r0
 8007276:	e7f0      	b.n	800725a <_dtoa_r+0xaba>
 8007278:	9b00      	ldr	r3, [sp, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfcc      	ite	gt
 800727e:	461e      	movgt	r6, r3
 8007280:	2601      	movle	r6, #1
 8007282:	4456      	add	r6, sl
 8007284:	2700      	movs	r7, #0
 8007286:	4649      	mov	r1, r9
 8007288:	2201      	movs	r2, #1
 800728a:	4658      	mov	r0, fp
 800728c:	f000 fb5a 	bl	8007944 <__lshift>
 8007290:	4621      	mov	r1, r4
 8007292:	4681      	mov	r9, r0
 8007294:	f000 fbc2 	bl	8007a1c <__mcmp>
 8007298:	2800      	cmp	r0, #0
 800729a:	dcb0      	bgt.n	80071fe <_dtoa_r+0xa5e>
 800729c:	d102      	bne.n	80072a4 <_dtoa_r+0xb04>
 800729e:	f018 0f01 	tst.w	r8, #1
 80072a2:	d1ac      	bne.n	80071fe <_dtoa_r+0xa5e>
 80072a4:	4633      	mov	r3, r6
 80072a6:	461e      	mov	r6, r3
 80072a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ac:	2a30      	cmp	r2, #48	@ 0x30
 80072ae:	d0fa      	beq.n	80072a6 <_dtoa_r+0xb06>
 80072b0:	e5c2      	b.n	8006e38 <_dtoa_r+0x698>
 80072b2:	459a      	cmp	sl, r3
 80072b4:	d1a4      	bne.n	8007200 <_dtoa_r+0xa60>
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	3301      	adds	r3, #1
 80072ba:	9304      	str	r3, [sp, #16]
 80072bc:	2331      	movs	r3, #49	@ 0x31
 80072be:	f88a 3000 	strb.w	r3, [sl]
 80072c2:	e5b9      	b.n	8006e38 <_dtoa_r+0x698>
 80072c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007324 <_dtoa_r+0xb84>
 80072ca:	b11b      	cbz	r3, 80072d4 <_dtoa_r+0xb34>
 80072cc:	f10a 0308 	add.w	r3, sl, #8
 80072d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	4650      	mov	r0, sl
 80072d6:	b019      	add	sp, #100	@ 0x64
 80072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072de:	2b01      	cmp	r3, #1
 80072e0:	f77f ae37 	ble.w	8006f52 <_dtoa_r+0x7b2>
 80072e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e8:	2001      	movs	r0, #1
 80072ea:	e655      	b.n	8006f98 <_dtoa_r+0x7f8>
 80072ec:	9b00      	ldr	r3, [sp, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f77f aed6 	ble.w	80070a0 <_dtoa_r+0x900>
 80072f4:	4656      	mov	r6, sl
 80072f6:	4621      	mov	r1, r4
 80072f8:	4648      	mov	r0, r9
 80072fa:	f7ff f9c8 	bl	800668e <quorem>
 80072fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007302:	f806 8b01 	strb.w	r8, [r6], #1
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	eba6 020a 	sub.w	r2, r6, sl
 800730c:	4293      	cmp	r3, r2
 800730e:	ddb3      	ble.n	8007278 <_dtoa_r+0xad8>
 8007310:	4649      	mov	r1, r9
 8007312:	2300      	movs	r3, #0
 8007314:	220a      	movs	r2, #10
 8007316:	4658      	mov	r0, fp
 8007318:	f000 f968 	bl	80075ec <__multadd>
 800731c:	4681      	mov	r9, r0
 800731e:	e7ea      	b.n	80072f6 <_dtoa_r+0xb56>
 8007320:	08008858 	.word	0x08008858
 8007324:	080087dc 	.word	0x080087dc

08007328 <_free_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4605      	mov	r5, r0
 800732c:	2900      	cmp	r1, #0
 800732e:	d041      	beq.n	80073b4 <_free_r+0x8c>
 8007330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007334:	1f0c      	subs	r4, r1, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	bfb8      	it	lt
 800733a:	18e4      	addlt	r4, r4, r3
 800733c:	f000 f8e8 	bl	8007510 <__malloc_lock>
 8007340:	4a1d      	ldr	r2, [pc, #116]	@ (80073b8 <_free_r+0x90>)
 8007342:	6813      	ldr	r3, [r2, #0]
 8007344:	b933      	cbnz	r3, 8007354 <_free_r+0x2c>
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	6014      	str	r4, [r2, #0]
 800734a:	4628      	mov	r0, r5
 800734c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007350:	f000 b8e4 	b.w	800751c <__malloc_unlock>
 8007354:	42a3      	cmp	r3, r4
 8007356:	d908      	bls.n	800736a <_free_r+0x42>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	1821      	adds	r1, r4, r0
 800735c:	428b      	cmp	r3, r1
 800735e:	bf01      	itttt	eq
 8007360:	6819      	ldreq	r1, [r3, #0]
 8007362:	685b      	ldreq	r3, [r3, #4]
 8007364:	1809      	addeq	r1, r1, r0
 8007366:	6021      	streq	r1, [r4, #0]
 8007368:	e7ed      	b.n	8007346 <_free_r+0x1e>
 800736a:	461a      	mov	r2, r3
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	b10b      	cbz	r3, 8007374 <_free_r+0x4c>
 8007370:	42a3      	cmp	r3, r4
 8007372:	d9fa      	bls.n	800736a <_free_r+0x42>
 8007374:	6811      	ldr	r1, [r2, #0]
 8007376:	1850      	adds	r0, r2, r1
 8007378:	42a0      	cmp	r0, r4
 800737a:	d10b      	bne.n	8007394 <_free_r+0x6c>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	4401      	add	r1, r0
 8007380:	1850      	adds	r0, r2, r1
 8007382:	4283      	cmp	r3, r0
 8007384:	6011      	str	r1, [r2, #0]
 8007386:	d1e0      	bne.n	800734a <_free_r+0x22>
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	6053      	str	r3, [r2, #4]
 800738e:	4408      	add	r0, r1
 8007390:	6010      	str	r0, [r2, #0]
 8007392:	e7da      	b.n	800734a <_free_r+0x22>
 8007394:	d902      	bls.n	800739c <_free_r+0x74>
 8007396:	230c      	movs	r3, #12
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	e7d6      	b.n	800734a <_free_r+0x22>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	1821      	adds	r1, r4, r0
 80073a0:	428b      	cmp	r3, r1
 80073a2:	bf04      	itt	eq
 80073a4:	6819      	ldreq	r1, [r3, #0]
 80073a6:	685b      	ldreq	r3, [r3, #4]
 80073a8:	6063      	str	r3, [r4, #4]
 80073aa:	bf04      	itt	eq
 80073ac:	1809      	addeq	r1, r1, r0
 80073ae:	6021      	streq	r1, [r4, #0]
 80073b0:	6054      	str	r4, [r2, #4]
 80073b2:	e7ca      	b.n	800734a <_free_r+0x22>
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	bf00      	nop
 80073b8:	20000550 	.word	0x20000550

080073bc <malloc>:
 80073bc:	4b02      	ldr	r3, [pc, #8]	@ (80073c8 <malloc+0xc>)
 80073be:	4601      	mov	r1, r0
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	f000 b825 	b.w	8007410 <_malloc_r>
 80073c6:	bf00      	nop
 80073c8:	20000088 	.word	0x20000088

080073cc <sbrk_aligned>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	4e0f      	ldr	r6, [pc, #60]	@ (800740c <sbrk_aligned+0x40>)
 80073d0:	460c      	mov	r4, r1
 80073d2:	6831      	ldr	r1, [r6, #0]
 80073d4:	4605      	mov	r5, r0
 80073d6:	b911      	cbnz	r1, 80073de <sbrk_aligned+0x12>
 80073d8:	f000 fe46 	bl	8008068 <_sbrk_r>
 80073dc:	6030      	str	r0, [r6, #0]
 80073de:	4621      	mov	r1, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	f000 fe41 	bl	8008068 <_sbrk_r>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d103      	bne.n	80073f2 <sbrk_aligned+0x26>
 80073ea:	f04f 34ff 	mov.w	r4, #4294967295
 80073ee:	4620      	mov	r0, r4
 80073f0:	bd70      	pop	{r4, r5, r6, pc}
 80073f2:	1cc4      	adds	r4, r0, #3
 80073f4:	f024 0403 	bic.w	r4, r4, #3
 80073f8:	42a0      	cmp	r0, r4
 80073fa:	d0f8      	beq.n	80073ee <sbrk_aligned+0x22>
 80073fc:	1a21      	subs	r1, r4, r0
 80073fe:	4628      	mov	r0, r5
 8007400:	f000 fe32 	bl	8008068 <_sbrk_r>
 8007404:	3001      	adds	r0, #1
 8007406:	d1f2      	bne.n	80073ee <sbrk_aligned+0x22>
 8007408:	e7ef      	b.n	80073ea <sbrk_aligned+0x1e>
 800740a:	bf00      	nop
 800740c:	2000054c 	.word	0x2000054c

08007410 <_malloc_r>:
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	1ccd      	adds	r5, r1, #3
 8007416:	f025 0503 	bic.w	r5, r5, #3
 800741a:	3508      	adds	r5, #8
 800741c:	2d0c      	cmp	r5, #12
 800741e:	bf38      	it	cc
 8007420:	250c      	movcc	r5, #12
 8007422:	2d00      	cmp	r5, #0
 8007424:	4606      	mov	r6, r0
 8007426:	db01      	blt.n	800742c <_malloc_r+0x1c>
 8007428:	42a9      	cmp	r1, r5
 800742a:	d904      	bls.n	8007436 <_malloc_r+0x26>
 800742c:	230c      	movs	r3, #12
 800742e:	6033      	str	r3, [r6, #0]
 8007430:	2000      	movs	r0, #0
 8007432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800750c <_malloc_r+0xfc>
 800743a:	f000 f869 	bl	8007510 <__malloc_lock>
 800743e:	f8d8 3000 	ldr.w	r3, [r8]
 8007442:	461c      	mov	r4, r3
 8007444:	bb44      	cbnz	r4, 8007498 <_malloc_r+0x88>
 8007446:	4629      	mov	r1, r5
 8007448:	4630      	mov	r0, r6
 800744a:	f7ff ffbf 	bl	80073cc <sbrk_aligned>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	4604      	mov	r4, r0
 8007452:	d158      	bne.n	8007506 <_malloc_r+0xf6>
 8007454:	f8d8 4000 	ldr.w	r4, [r8]
 8007458:	4627      	mov	r7, r4
 800745a:	2f00      	cmp	r7, #0
 800745c:	d143      	bne.n	80074e6 <_malloc_r+0xd6>
 800745e:	2c00      	cmp	r4, #0
 8007460:	d04b      	beq.n	80074fa <_malloc_r+0xea>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	4639      	mov	r1, r7
 8007466:	4630      	mov	r0, r6
 8007468:	eb04 0903 	add.w	r9, r4, r3
 800746c:	f000 fdfc 	bl	8008068 <_sbrk_r>
 8007470:	4581      	cmp	r9, r0
 8007472:	d142      	bne.n	80074fa <_malloc_r+0xea>
 8007474:	6821      	ldr	r1, [r4, #0]
 8007476:	1a6d      	subs	r5, r5, r1
 8007478:	4629      	mov	r1, r5
 800747a:	4630      	mov	r0, r6
 800747c:	f7ff ffa6 	bl	80073cc <sbrk_aligned>
 8007480:	3001      	adds	r0, #1
 8007482:	d03a      	beq.n	80074fa <_malloc_r+0xea>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	442b      	add	r3, r5
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	f8d8 3000 	ldr.w	r3, [r8]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	bb62      	cbnz	r2, 80074ec <_malloc_r+0xdc>
 8007492:	f8c8 7000 	str.w	r7, [r8]
 8007496:	e00f      	b.n	80074b8 <_malloc_r+0xa8>
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	1b52      	subs	r2, r2, r5
 800749c:	d420      	bmi.n	80074e0 <_malloc_r+0xd0>
 800749e:	2a0b      	cmp	r2, #11
 80074a0:	d917      	bls.n	80074d2 <_malloc_r+0xc2>
 80074a2:	1961      	adds	r1, r4, r5
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	6025      	str	r5, [r4, #0]
 80074a8:	bf18      	it	ne
 80074aa:	6059      	strne	r1, [r3, #4]
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	bf08      	it	eq
 80074b0:	f8c8 1000 	streq.w	r1, [r8]
 80074b4:	5162      	str	r2, [r4, r5]
 80074b6:	604b      	str	r3, [r1, #4]
 80074b8:	4630      	mov	r0, r6
 80074ba:	f000 f82f 	bl	800751c <__malloc_unlock>
 80074be:	f104 000b 	add.w	r0, r4, #11
 80074c2:	1d23      	adds	r3, r4, #4
 80074c4:	f020 0007 	bic.w	r0, r0, #7
 80074c8:	1ac2      	subs	r2, r0, r3
 80074ca:	bf1c      	itt	ne
 80074cc:	1a1b      	subne	r3, r3, r0
 80074ce:	50a3      	strne	r3, [r4, r2]
 80074d0:	e7af      	b.n	8007432 <_malloc_r+0x22>
 80074d2:	6862      	ldr	r2, [r4, #4]
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	bf0c      	ite	eq
 80074d8:	f8c8 2000 	streq.w	r2, [r8]
 80074dc:	605a      	strne	r2, [r3, #4]
 80074de:	e7eb      	b.n	80074b8 <_malloc_r+0xa8>
 80074e0:	4623      	mov	r3, r4
 80074e2:	6864      	ldr	r4, [r4, #4]
 80074e4:	e7ae      	b.n	8007444 <_malloc_r+0x34>
 80074e6:	463c      	mov	r4, r7
 80074e8:	687f      	ldr	r7, [r7, #4]
 80074ea:	e7b6      	b.n	800745a <_malloc_r+0x4a>
 80074ec:	461a      	mov	r2, r3
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	d1fb      	bne.n	80074ec <_malloc_r+0xdc>
 80074f4:	2300      	movs	r3, #0
 80074f6:	6053      	str	r3, [r2, #4]
 80074f8:	e7de      	b.n	80074b8 <_malloc_r+0xa8>
 80074fa:	230c      	movs	r3, #12
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	4630      	mov	r0, r6
 8007500:	f000 f80c 	bl	800751c <__malloc_unlock>
 8007504:	e794      	b.n	8007430 <_malloc_r+0x20>
 8007506:	6005      	str	r5, [r0, #0]
 8007508:	e7d6      	b.n	80074b8 <_malloc_r+0xa8>
 800750a:	bf00      	nop
 800750c:	20000550 	.word	0x20000550

08007510 <__malloc_lock>:
 8007510:	4801      	ldr	r0, [pc, #4]	@ (8007518 <__malloc_lock+0x8>)
 8007512:	f7ff b8ba 	b.w	800668a <__retarget_lock_acquire_recursive>
 8007516:	bf00      	nop
 8007518:	20000548 	.word	0x20000548

0800751c <__malloc_unlock>:
 800751c:	4801      	ldr	r0, [pc, #4]	@ (8007524 <__malloc_unlock+0x8>)
 800751e:	f7ff b8b5 	b.w	800668c <__retarget_lock_release_recursive>
 8007522:	bf00      	nop
 8007524:	20000548 	.word	0x20000548

08007528 <_Balloc>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	69c6      	ldr	r6, [r0, #28]
 800752c:	4604      	mov	r4, r0
 800752e:	460d      	mov	r5, r1
 8007530:	b976      	cbnz	r6, 8007550 <_Balloc+0x28>
 8007532:	2010      	movs	r0, #16
 8007534:	f7ff ff42 	bl	80073bc <malloc>
 8007538:	4602      	mov	r2, r0
 800753a:	61e0      	str	r0, [r4, #28]
 800753c:	b920      	cbnz	r0, 8007548 <_Balloc+0x20>
 800753e:	4b18      	ldr	r3, [pc, #96]	@ (80075a0 <_Balloc+0x78>)
 8007540:	4818      	ldr	r0, [pc, #96]	@ (80075a4 <_Balloc+0x7c>)
 8007542:	216b      	movs	r1, #107	@ 0x6b
 8007544:	f000 fdae 	bl	80080a4 <__assert_func>
 8007548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800754c:	6006      	str	r6, [r0, #0]
 800754e:	60c6      	str	r6, [r0, #12]
 8007550:	69e6      	ldr	r6, [r4, #28]
 8007552:	68f3      	ldr	r3, [r6, #12]
 8007554:	b183      	cbz	r3, 8007578 <_Balloc+0x50>
 8007556:	69e3      	ldr	r3, [r4, #28]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800755e:	b9b8      	cbnz	r0, 8007590 <_Balloc+0x68>
 8007560:	2101      	movs	r1, #1
 8007562:	fa01 f605 	lsl.w	r6, r1, r5
 8007566:	1d72      	adds	r2, r6, #5
 8007568:	0092      	lsls	r2, r2, #2
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fdb8 	bl	80080e0 <_calloc_r>
 8007570:	b160      	cbz	r0, 800758c <_Balloc+0x64>
 8007572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007576:	e00e      	b.n	8007596 <_Balloc+0x6e>
 8007578:	2221      	movs	r2, #33	@ 0x21
 800757a:	2104      	movs	r1, #4
 800757c:	4620      	mov	r0, r4
 800757e:	f000 fdaf 	bl	80080e0 <_calloc_r>
 8007582:	69e3      	ldr	r3, [r4, #28]
 8007584:	60f0      	str	r0, [r6, #12]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e4      	bne.n	8007556 <_Balloc+0x2e>
 800758c:	2000      	movs	r0, #0
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	6802      	ldr	r2, [r0, #0]
 8007592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007596:	2300      	movs	r3, #0
 8007598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800759c:	e7f7      	b.n	800758e <_Balloc+0x66>
 800759e:	bf00      	nop
 80075a0:	080087e9 	.word	0x080087e9
 80075a4:	08008869 	.word	0x08008869

080075a8 <_Bfree>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	69c6      	ldr	r6, [r0, #28]
 80075ac:	4605      	mov	r5, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	b976      	cbnz	r6, 80075d0 <_Bfree+0x28>
 80075b2:	2010      	movs	r0, #16
 80075b4:	f7ff ff02 	bl	80073bc <malloc>
 80075b8:	4602      	mov	r2, r0
 80075ba:	61e8      	str	r0, [r5, #28]
 80075bc:	b920      	cbnz	r0, 80075c8 <_Bfree+0x20>
 80075be:	4b09      	ldr	r3, [pc, #36]	@ (80075e4 <_Bfree+0x3c>)
 80075c0:	4809      	ldr	r0, [pc, #36]	@ (80075e8 <_Bfree+0x40>)
 80075c2:	218f      	movs	r1, #143	@ 0x8f
 80075c4:	f000 fd6e 	bl	80080a4 <__assert_func>
 80075c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075cc:	6006      	str	r6, [r0, #0]
 80075ce:	60c6      	str	r6, [r0, #12]
 80075d0:	b13c      	cbz	r4, 80075e2 <_Bfree+0x3a>
 80075d2:	69eb      	ldr	r3, [r5, #28]
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075dc:	6021      	str	r1, [r4, #0]
 80075de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	080087e9 	.word	0x080087e9
 80075e8:	08008869 	.word	0x08008869

080075ec <__multadd>:
 80075ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f0:	690d      	ldr	r5, [r1, #16]
 80075f2:	4607      	mov	r7, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	461e      	mov	r6, r3
 80075f8:	f101 0c14 	add.w	ip, r1, #20
 80075fc:	2000      	movs	r0, #0
 80075fe:	f8dc 3000 	ldr.w	r3, [ip]
 8007602:	b299      	uxth	r1, r3
 8007604:	fb02 6101 	mla	r1, r2, r1, r6
 8007608:	0c1e      	lsrs	r6, r3, #16
 800760a:	0c0b      	lsrs	r3, r1, #16
 800760c:	fb02 3306 	mla	r3, r2, r6, r3
 8007610:	b289      	uxth	r1, r1
 8007612:	3001      	adds	r0, #1
 8007614:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007618:	4285      	cmp	r5, r0
 800761a:	f84c 1b04 	str.w	r1, [ip], #4
 800761e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007622:	dcec      	bgt.n	80075fe <__multadd+0x12>
 8007624:	b30e      	cbz	r6, 800766a <__multadd+0x7e>
 8007626:	68a3      	ldr	r3, [r4, #8]
 8007628:	42ab      	cmp	r3, r5
 800762a:	dc19      	bgt.n	8007660 <__multadd+0x74>
 800762c:	6861      	ldr	r1, [r4, #4]
 800762e:	4638      	mov	r0, r7
 8007630:	3101      	adds	r1, #1
 8007632:	f7ff ff79 	bl	8007528 <_Balloc>
 8007636:	4680      	mov	r8, r0
 8007638:	b928      	cbnz	r0, 8007646 <__multadd+0x5a>
 800763a:	4602      	mov	r2, r0
 800763c:	4b0c      	ldr	r3, [pc, #48]	@ (8007670 <__multadd+0x84>)
 800763e:	480d      	ldr	r0, [pc, #52]	@ (8007674 <__multadd+0x88>)
 8007640:	21ba      	movs	r1, #186	@ 0xba
 8007642:	f000 fd2f 	bl	80080a4 <__assert_func>
 8007646:	6922      	ldr	r2, [r4, #16]
 8007648:	3202      	adds	r2, #2
 800764a:	f104 010c 	add.w	r1, r4, #12
 800764e:	0092      	lsls	r2, r2, #2
 8007650:	300c      	adds	r0, #12
 8007652:	f000 fd19 	bl	8008088 <memcpy>
 8007656:	4621      	mov	r1, r4
 8007658:	4638      	mov	r0, r7
 800765a:	f7ff ffa5 	bl	80075a8 <_Bfree>
 800765e:	4644      	mov	r4, r8
 8007660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007664:	3501      	adds	r5, #1
 8007666:	615e      	str	r6, [r3, #20]
 8007668:	6125      	str	r5, [r4, #16]
 800766a:	4620      	mov	r0, r4
 800766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007670:	08008858 	.word	0x08008858
 8007674:	08008869 	.word	0x08008869

08007678 <__hi0bits>:
 8007678:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800767c:	4603      	mov	r3, r0
 800767e:	bf36      	itet	cc
 8007680:	0403      	lslcc	r3, r0, #16
 8007682:	2000      	movcs	r0, #0
 8007684:	2010      	movcc	r0, #16
 8007686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800768a:	bf3c      	itt	cc
 800768c:	021b      	lslcc	r3, r3, #8
 800768e:	3008      	addcc	r0, #8
 8007690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007694:	bf3c      	itt	cc
 8007696:	011b      	lslcc	r3, r3, #4
 8007698:	3004      	addcc	r0, #4
 800769a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800769e:	bf3c      	itt	cc
 80076a0:	009b      	lslcc	r3, r3, #2
 80076a2:	3002      	addcc	r0, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	db05      	blt.n	80076b4 <__hi0bits+0x3c>
 80076a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80076ac:	f100 0001 	add.w	r0, r0, #1
 80076b0:	bf08      	it	eq
 80076b2:	2020      	moveq	r0, #32
 80076b4:	4770      	bx	lr

080076b6 <__lo0bits>:
 80076b6:	6803      	ldr	r3, [r0, #0]
 80076b8:	4602      	mov	r2, r0
 80076ba:	f013 0007 	ands.w	r0, r3, #7
 80076be:	d00b      	beq.n	80076d8 <__lo0bits+0x22>
 80076c0:	07d9      	lsls	r1, r3, #31
 80076c2:	d421      	bmi.n	8007708 <__lo0bits+0x52>
 80076c4:	0798      	lsls	r0, r3, #30
 80076c6:	bf49      	itett	mi
 80076c8:	085b      	lsrmi	r3, r3, #1
 80076ca:	089b      	lsrpl	r3, r3, #2
 80076cc:	2001      	movmi	r0, #1
 80076ce:	6013      	strmi	r3, [r2, #0]
 80076d0:	bf5c      	itt	pl
 80076d2:	6013      	strpl	r3, [r2, #0]
 80076d4:	2002      	movpl	r0, #2
 80076d6:	4770      	bx	lr
 80076d8:	b299      	uxth	r1, r3
 80076da:	b909      	cbnz	r1, 80076e0 <__lo0bits+0x2a>
 80076dc:	0c1b      	lsrs	r3, r3, #16
 80076de:	2010      	movs	r0, #16
 80076e0:	b2d9      	uxtb	r1, r3
 80076e2:	b909      	cbnz	r1, 80076e8 <__lo0bits+0x32>
 80076e4:	3008      	adds	r0, #8
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	0719      	lsls	r1, r3, #28
 80076ea:	bf04      	itt	eq
 80076ec:	091b      	lsreq	r3, r3, #4
 80076ee:	3004      	addeq	r0, #4
 80076f0:	0799      	lsls	r1, r3, #30
 80076f2:	bf04      	itt	eq
 80076f4:	089b      	lsreq	r3, r3, #2
 80076f6:	3002      	addeq	r0, #2
 80076f8:	07d9      	lsls	r1, r3, #31
 80076fa:	d403      	bmi.n	8007704 <__lo0bits+0x4e>
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	f100 0001 	add.w	r0, r0, #1
 8007702:	d003      	beq.n	800770c <__lo0bits+0x56>
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	4770      	bx	lr
 8007708:	2000      	movs	r0, #0
 800770a:	4770      	bx	lr
 800770c:	2020      	movs	r0, #32
 800770e:	4770      	bx	lr

08007710 <__i2b>:
 8007710:	b510      	push	{r4, lr}
 8007712:	460c      	mov	r4, r1
 8007714:	2101      	movs	r1, #1
 8007716:	f7ff ff07 	bl	8007528 <_Balloc>
 800771a:	4602      	mov	r2, r0
 800771c:	b928      	cbnz	r0, 800772a <__i2b+0x1a>
 800771e:	4b05      	ldr	r3, [pc, #20]	@ (8007734 <__i2b+0x24>)
 8007720:	4805      	ldr	r0, [pc, #20]	@ (8007738 <__i2b+0x28>)
 8007722:	f240 1145 	movw	r1, #325	@ 0x145
 8007726:	f000 fcbd 	bl	80080a4 <__assert_func>
 800772a:	2301      	movs	r3, #1
 800772c:	6144      	str	r4, [r0, #20]
 800772e:	6103      	str	r3, [r0, #16]
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	08008858 	.word	0x08008858
 8007738:	08008869 	.word	0x08008869

0800773c <__multiply>:
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	4614      	mov	r4, r2
 8007742:	690a      	ldr	r2, [r1, #16]
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	429a      	cmp	r2, r3
 8007748:	bfa8      	it	ge
 800774a:	4623      	movge	r3, r4
 800774c:	460f      	mov	r7, r1
 800774e:	bfa4      	itt	ge
 8007750:	460c      	movge	r4, r1
 8007752:	461f      	movge	r7, r3
 8007754:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007758:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800775c:	68a3      	ldr	r3, [r4, #8]
 800775e:	6861      	ldr	r1, [r4, #4]
 8007760:	eb0a 0609 	add.w	r6, sl, r9
 8007764:	42b3      	cmp	r3, r6
 8007766:	b085      	sub	sp, #20
 8007768:	bfb8      	it	lt
 800776a:	3101      	addlt	r1, #1
 800776c:	f7ff fedc 	bl	8007528 <_Balloc>
 8007770:	b930      	cbnz	r0, 8007780 <__multiply+0x44>
 8007772:	4602      	mov	r2, r0
 8007774:	4b44      	ldr	r3, [pc, #272]	@ (8007888 <__multiply+0x14c>)
 8007776:	4845      	ldr	r0, [pc, #276]	@ (800788c <__multiply+0x150>)
 8007778:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800777c:	f000 fc92 	bl	80080a4 <__assert_func>
 8007780:	f100 0514 	add.w	r5, r0, #20
 8007784:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007788:	462b      	mov	r3, r5
 800778a:	2200      	movs	r2, #0
 800778c:	4543      	cmp	r3, r8
 800778e:	d321      	bcc.n	80077d4 <__multiply+0x98>
 8007790:	f107 0114 	add.w	r1, r7, #20
 8007794:	f104 0214 	add.w	r2, r4, #20
 8007798:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800779c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80077a0:	9302      	str	r3, [sp, #8]
 80077a2:	1b13      	subs	r3, r2, r4
 80077a4:	3b15      	subs	r3, #21
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	3304      	adds	r3, #4
 80077ac:	f104 0715 	add.w	r7, r4, #21
 80077b0:	42ba      	cmp	r2, r7
 80077b2:	bf38      	it	cc
 80077b4:	2304      	movcc	r3, #4
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	9b02      	ldr	r3, [sp, #8]
 80077ba:	9103      	str	r1, [sp, #12]
 80077bc:	428b      	cmp	r3, r1
 80077be:	d80c      	bhi.n	80077da <__multiply+0x9e>
 80077c0:	2e00      	cmp	r6, #0
 80077c2:	dd03      	ble.n	80077cc <__multiply+0x90>
 80077c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d05b      	beq.n	8007884 <__multiply+0x148>
 80077cc:	6106      	str	r6, [r0, #16]
 80077ce:	b005      	add	sp, #20
 80077d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	f843 2b04 	str.w	r2, [r3], #4
 80077d8:	e7d8      	b.n	800778c <__multiply+0x50>
 80077da:	f8b1 a000 	ldrh.w	sl, [r1]
 80077de:	f1ba 0f00 	cmp.w	sl, #0
 80077e2:	d024      	beq.n	800782e <__multiply+0xf2>
 80077e4:	f104 0e14 	add.w	lr, r4, #20
 80077e8:	46a9      	mov	r9, r5
 80077ea:	f04f 0c00 	mov.w	ip, #0
 80077ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077f2:	f8d9 3000 	ldr.w	r3, [r9]
 80077f6:	fa1f fb87 	uxth.w	fp, r7
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007800:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007804:	f8d9 7000 	ldr.w	r7, [r9]
 8007808:	4463      	add	r3, ip
 800780a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800780e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007812:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007816:	b29b      	uxth	r3, r3
 8007818:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800781c:	4572      	cmp	r2, lr
 800781e:	f849 3b04 	str.w	r3, [r9], #4
 8007822:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007826:	d8e2      	bhi.n	80077ee <__multiply+0xb2>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	f845 c003 	str.w	ip, [r5, r3]
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007834:	3104      	adds	r1, #4
 8007836:	f1b9 0f00 	cmp.w	r9, #0
 800783a:	d021      	beq.n	8007880 <__multiply+0x144>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	f104 0c14 	add.w	ip, r4, #20
 8007842:	46ae      	mov	lr, r5
 8007844:	f04f 0a00 	mov.w	sl, #0
 8007848:	f8bc b000 	ldrh.w	fp, [ip]
 800784c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007850:	fb09 770b 	mla	r7, r9, fp, r7
 8007854:	4457      	add	r7, sl
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800785c:	f84e 3b04 	str.w	r3, [lr], #4
 8007860:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007864:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007868:	f8be 3000 	ldrh.w	r3, [lr]
 800786c:	fb09 330a 	mla	r3, r9, sl, r3
 8007870:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007874:	4562      	cmp	r2, ip
 8007876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800787a:	d8e5      	bhi.n	8007848 <__multiply+0x10c>
 800787c:	9f01      	ldr	r7, [sp, #4]
 800787e:	51eb      	str	r3, [r5, r7]
 8007880:	3504      	adds	r5, #4
 8007882:	e799      	b.n	80077b8 <__multiply+0x7c>
 8007884:	3e01      	subs	r6, #1
 8007886:	e79b      	b.n	80077c0 <__multiply+0x84>
 8007888:	08008858 	.word	0x08008858
 800788c:	08008869 	.word	0x08008869

08007890 <__pow5mult>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	4615      	mov	r5, r2
 8007896:	f012 0203 	ands.w	r2, r2, #3
 800789a:	4607      	mov	r7, r0
 800789c:	460e      	mov	r6, r1
 800789e:	d007      	beq.n	80078b0 <__pow5mult+0x20>
 80078a0:	4c25      	ldr	r4, [pc, #148]	@ (8007938 <__pow5mult+0xa8>)
 80078a2:	3a01      	subs	r2, #1
 80078a4:	2300      	movs	r3, #0
 80078a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078aa:	f7ff fe9f 	bl	80075ec <__multadd>
 80078ae:	4606      	mov	r6, r0
 80078b0:	10ad      	asrs	r5, r5, #2
 80078b2:	d03d      	beq.n	8007930 <__pow5mult+0xa0>
 80078b4:	69fc      	ldr	r4, [r7, #28]
 80078b6:	b97c      	cbnz	r4, 80078d8 <__pow5mult+0x48>
 80078b8:	2010      	movs	r0, #16
 80078ba:	f7ff fd7f 	bl	80073bc <malloc>
 80078be:	4602      	mov	r2, r0
 80078c0:	61f8      	str	r0, [r7, #28]
 80078c2:	b928      	cbnz	r0, 80078d0 <__pow5mult+0x40>
 80078c4:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <__pow5mult+0xac>)
 80078c6:	481e      	ldr	r0, [pc, #120]	@ (8007940 <__pow5mult+0xb0>)
 80078c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80078cc:	f000 fbea 	bl	80080a4 <__assert_func>
 80078d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078d4:	6004      	str	r4, [r0, #0]
 80078d6:	60c4      	str	r4, [r0, #12]
 80078d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80078dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078e0:	b94c      	cbnz	r4, 80078f6 <__pow5mult+0x66>
 80078e2:	f240 2171 	movw	r1, #625	@ 0x271
 80078e6:	4638      	mov	r0, r7
 80078e8:	f7ff ff12 	bl	8007710 <__i2b>
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80078f2:	4604      	mov	r4, r0
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	f04f 0900 	mov.w	r9, #0
 80078fa:	07eb      	lsls	r3, r5, #31
 80078fc:	d50a      	bpl.n	8007914 <__pow5mult+0x84>
 80078fe:	4631      	mov	r1, r6
 8007900:	4622      	mov	r2, r4
 8007902:	4638      	mov	r0, r7
 8007904:	f7ff ff1a 	bl	800773c <__multiply>
 8007908:	4631      	mov	r1, r6
 800790a:	4680      	mov	r8, r0
 800790c:	4638      	mov	r0, r7
 800790e:	f7ff fe4b 	bl	80075a8 <_Bfree>
 8007912:	4646      	mov	r6, r8
 8007914:	106d      	asrs	r5, r5, #1
 8007916:	d00b      	beq.n	8007930 <__pow5mult+0xa0>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	b938      	cbnz	r0, 800792c <__pow5mult+0x9c>
 800791c:	4622      	mov	r2, r4
 800791e:	4621      	mov	r1, r4
 8007920:	4638      	mov	r0, r7
 8007922:	f7ff ff0b 	bl	800773c <__multiply>
 8007926:	6020      	str	r0, [r4, #0]
 8007928:	f8c0 9000 	str.w	r9, [r0]
 800792c:	4604      	mov	r4, r0
 800792e:	e7e4      	b.n	80078fa <__pow5mult+0x6a>
 8007930:	4630      	mov	r0, r6
 8007932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007936:	bf00      	nop
 8007938:	080088c4 	.word	0x080088c4
 800793c:	080087e9 	.word	0x080087e9
 8007940:	08008869 	.word	0x08008869

08007944 <__lshift>:
 8007944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	460c      	mov	r4, r1
 800794a:	6849      	ldr	r1, [r1, #4]
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	4607      	mov	r7, r0
 8007956:	4691      	mov	r9, r2
 8007958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800795c:	f108 0601 	add.w	r6, r8, #1
 8007960:	42b3      	cmp	r3, r6
 8007962:	db0b      	blt.n	800797c <__lshift+0x38>
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff fddf 	bl	8007528 <_Balloc>
 800796a:	4605      	mov	r5, r0
 800796c:	b948      	cbnz	r0, 8007982 <__lshift+0x3e>
 800796e:	4602      	mov	r2, r0
 8007970:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <__lshift+0xd0>)
 8007972:	4829      	ldr	r0, [pc, #164]	@ (8007a18 <__lshift+0xd4>)
 8007974:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007978:	f000 fb94 	bl	80080a4 <__assert_func>
 800797c:	3101      	adds	r1, #1
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	e7ee      	b.n	8007960 <__lshift+0x1c>
 8007982:	2300      	movs	r3, #0
 8007984:	f100 0114 	add.w	r1, r0, #20
 8007988:	f100 0210 	add.w	r2, r0, #16
 800798c:	4618      	mov	r0, r3
 800798e:	4553      	cmp	r3, sl
 8007990:	db33      	blt.n	80079fa <__lshift+0xb6>
 8007992:	6920      	ldr	r0, [r4, #16]
 8007994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007998:	f104 0314 	add.w	r3, r4, #20
 800799c:	f019 091f 	ands.w	r9, r9, #31
 80079a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079a8:	d02b      	beq.n	8007a02 <__lshift+0xbe>
 80079aa:	f1c9 0e20 	rsb	lr, r9, #32
 80079ae:	468a      	mov	sl, r1
 80079b0:	2200      	movs	r2, #0
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	fa00 f009 	lsl.w	r0, r0, r9
 80079b8:	4310      	orrs	r0, r2
 80079ba:	f84a 0b04 	str.w	r0, [sl], #4
 80079be:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c2:	459c      	cmp	ip, r3
 80079c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80079c8:	d8f3      	bhi.n	80079b2 <__lshift+0x6e>
 80079ca:	ebac 0304 	sub.w	r3, ip, r4
 80079ce:	3b15      	subs	r3, #21
 80079d0:	f023 0303 	bic.w	r3, r3, #3
 80079d4:	3304      	adds	r3, #4
 80079d6:	f104 0015 	add.w	r0, r4, #21
 80079da:	4584      	cmp	ip, r0
 80079dc:	bf38      	it	cc
 80079de:	2304      	movcc	r3, #4
 80079e0:	50ca      	str	r2, [r1, r3]
 80079e2:	b10a      	cbz	r2, 80079e8 <__lshift+0xa4>
 80079e4:	f108 0602 	add.w	r6, r8, #2
 80079e8:	3e01      	subs	r6, #1
 80079ea:	4638      	mov	r0, r7
 80079ec:	612e      	str	r6, [r5, #16]
 80079ee:	4621      	mov	r1, r4
 80079f0:	f7ff fdda 	bl	80075a8 <_Bfree>
 80079f4:	4628      	mov	r0, r5
 80079f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80079fe:	3301      	adds	r3, #1
 8007a00:	e7c5      	b.n	800798e <__lshift+0x4a>
 8007a02:	3904      	subs	r1, #4
 8007a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a0c:	459c      	cmp	ip, r3
 8007a0e:	d8f9      	bhi.n	8007a04 <__lshift+0xc0>
 8007a10:	e7ea      	b.n	80079e8 <__lshift+0xa4>
 8007a12:	bf00      	nop
 8007a14:	08008858 	.word	0x08008858
 8007a18:	08008869 	.word	0x08008869

08007a1c <__mcmp>:
 8007a1c:	690a      	ldr	r2, [r1, #16]
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6900      	ldr	r0, [r0, #16]
 8007a22:	1a80      	subs	r0, r0, r2
 8007a24:	b530      	push	{r4, r5, lr}
 8007a26:	d10e      	bne.n	8007a46 <__mcmp+0x2a>
 8007a28:	3314      	adds	r3, #20
 8007a2a:	3114      	adds	r1, #20
 8007a2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a3c:	4295      	cmp	r5, r2
 8007a3e:	d003      	beq.n	8007a48 <__mcmp+0x2c>
 8007a40:	d205      	bcs.n	8007a4e <__mcmp+0x32>
 8007a42:	f04f 30ff 	mov.w	r0, #4294967295
 8007a46:	bd30      	pop	{r4, r5, pc}
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d3f3      	bcc.n	8007a34 <__mcmp+0x18>
 8007a4c:	e7fb      	b.n	8007a46 <__mcmp+0x2a>
 8007a4e:	2001      	movs	r0, #1
 8007a50:	e7f9      	b.n	8007a46 <__mcmp+0x2a>
	...

08007a54 <__mdiff>:
 8007a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a58:	4689      	mov	r9, r1
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4648      	mov	r0, r9
 8007a60:	4614      	mov	r4, r2
 8007a62:	f7ff ffdb 	bl	8007a1c <__mcmp>
 8007a66:	1e05      	subs	r5, r0, #0
 8007a68:	d112      	bne.n	8007a90 <__mdiff+0x3c>
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f7ff fd5b 	bl	8007528 <_Balloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	b928      	cbnz	r0, 8007a82 <__mdiff+0x2e>
 8007a76:	4b3f      	ldr	r3, [pc, #252]	@ (8007b74 <__mdiff+0x120>)
 8007a78:	f240 2137 	movw	r1, #567	@ 0x237
 8007a7c:	483e      	ldr	r0, [pc, #248]	@ (8007b78 <__mdiff+0x124>)
 8007a7e:	f000 fb11 	bl	80080a4 <__assert_func>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a88:	4610      	mov	r0, r2
 8007a8a:	b003      	add	sp, #12
 8007a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a90:	bfbc      	itt	lt
 8007a92:	464b      	movlt	r3, r9
 8007a94:	46a1      	movlt	r9, r4
 8007a96:	4630      	mov	r0, r6
 8007a98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a9c:	bfba      	itte	lt
 8007a9e:	461c      	movlt	r4, r3
 8007aa0:	2501      	movlt	r5, #1
 8007aa2:	2500      	movge	r5, #0
 8007aa4:	f7ff fd40 	bl	8007528 <_Balloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	b918      	cbnz	r0, 8007ab4 <__mdiff+0x60>
 8007aac:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <__mdiff+0x120>)
 8007aae:	f240 2145 	movw	r1, #581	@ 0x245
 8007ab2:	e7e3      	b.n	8007a7c <__mdiff+0x28>
 8007ab4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ab8:	6926      	ldr	r6, [r4, #16]
 8007aba:	60c5      	str	r5, [r0, #12]
 8007abc:	f109 0310 	add.w	r3, r9, #16
 8007ac0:	f109 0514 	add.w	r5, r9, #20
 8007ac4:	f104 0e14 	add.w	lr, r4, #20
 8007ac8:	f100 0b14 	add.w	fp, r0, #20
 8007acc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ad0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	46d9      	mov	r9, fp
 8007ad8:	f04f 0c00 	mov.w	ip, #0
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ae2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	fa1f f38a 	uxth.w	r3, sl
 8007aec:	4619      	mov	r1, r3
 8007aee:	b283      	uxth	r3, r0
 8007af0:	1acb      	subs	r3, r1, r3
 8007af2:	0c00      	lsrs	r0, r0, #16
 8007af4:	4463      	add	r3, ip
 8007af6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007afa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b04:	4576      	cmp	r6, lr
 8007b06:	f849 3b04 	str.w	r3, [r9], #4
 8007b0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b0e:	d8e5      	bhi.n	8007adc <__mdiff+0x88>
 8007b10:	1b33      	subs	r3, r6, r4
 8007b12:	3b15      	subs	r3, #21
 8007b14:	f023 0303 	bic.w	r3, r3, #3
 8007b18:	3415      	adds	r4, #21
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	42a6      	cmp	r6, r4
 8007b1e:	bf38      	it	cc
 8007b20:	2304      	movcc	r3, #4
 8007b22:	441d      	add	r5, r3
 8007b24:	445b      	add	r3, fp
 8007b26:	461e      	mov	r6, r3
 8007b28:	462c      	mov	r4, r5
 8007b2a:	4544      	cmp	r4, r8
 8007b2c:	d30e      	bcc.n	8007b4c <__mdiff+0xf8>
 8007b2e:	f108 0103 	add.w	r1, r8, #3
 8007b32:	1b49      	subs	r1, r1, r5
 8007b34:	f021 0103 	bic.w	r1, r1, #3
 8007b38:	3d03      	subs	r5, #3
 8007b3a:	45a8      	cmp	r8, r5
 8007b3c:	bf38      	it	cc
 8007b3e:	2100      	movcc	r1, #0
 8007b40:	440b      	add	r3, r1
 8007b42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b46:	b191      	cbz	r1, 8007b6e <__mdiff+0x11a>
 8007b48:	6117      	str	r7, [r2, #16]
 8007b4a:	e79d      	b.n	8007a88 <__mdiff+0x34>
 8007b4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b50:	46e6      	mov	lr, ip
 8007b52:	0c08      	lsrs	r0, r1, #16
 8007b54:	fa1c fc81 	uxtah	ip, ip, r1
 8007b58:	4471      	add	r1, lr
 8007b5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b5e:	b289      	uxth	r1, r1
 8007b60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b64:	f846 1b04 	str.w	r1, [r6], #4
 8007b68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b6c:	e7dd      	b.n	8007b2a <__mdiff+0xd6>
 8007b6e:	3f01      	subs	r7, #1
 8007b70:	e7e7      	b.n	8007b42 <__mdiff+0xee>
 8007b72:	bf00      	nop
 8007b74:	08008858 	.word	0x08008858
 8007b78:	08008869 	.word	0x08008869

08007b7c <__d2b>:
 8007b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b80:	460f      	mov	r7, r1
 8007b82:	2101      	movs	r1, #1
 8007b84:	ec59 8b10 	vmov	r8, r9, d0
 8007b88:	4616      	mov	r6, r2
 8007b8a:	f7ff fccd 	bl	8007528 <_Balloc>
 8007b8e:	4604      	mov	r4, r0
 8007b90:	b930      	cbnz	r0, 8007ba0 <__d2b+0x24>
 8007b92:	4602      	mov	r2, r0
 8007b94:	4b23      	ldr	r3, [pc, #140]	@ (8007c24 <__d2b+0xa8>)
 8007b96:	4824      	ldr	r0, [pc, #144]	@ (8007c28 <__d2b+0xac>)
 8007b98:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b9c:	f000 fa82 	bl	80080a4 <__assert_func>
 8007ba0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ba8:	b10d      	cbz	r5, 8007bae <__d2b+0x32>
 8007baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	f1b8 0300 	subs.w	r3, r8, #0
 8007bb4:	d023      	beq.n	8007bfe <__d2b+0x82>
 8007bb6:	4668      	mov	r0, sp
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	f7ff fd7c 	bl	80076b6 <__lo0bits>
 8007bbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bc2:	b1d0      	cbz	r0, 8007bfa <__d2b+0x7e>
 8007bc4:	f1c0 0320 	rsb	r3, r0, #32
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	40c2      	lsrs	r2, r0
 8007bd0:	6163      	str	r3, [r4, #20]
 8007bd2:	9201      	str	r2, [sp, #4]
 8007bd4:	9b01      	ldr	r3, [sp, #4]
 8007bd6:	61a3      	str	r3, [r4, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf0c      	ite	eq
 8007bdc:	2201      	moveq	r2, #1
 8007bde:	2202      	movne	r2, #2
 8007be0:	6122      	str	r2, [r4, #16]
 8007be2:	b1a5      	cbz	r5, 8007c0e <__d2b+0x92>
 8007be4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007be8:	4405      	add	r5, r0
 8007bea:	603d      	str	r5, [r7, #0]
 8007bec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bf0:	6030      	str	r0, [r6, #0]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	b003      	add	sp, #12
 8007bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	6161      	str	r1, [r4, #20]
 8007bfc:	e7ea      	b.n	8007bd4 <__d2b+0x58>
 8007bfe:	a801      	add	r0, sp, #4
 8007c00:	f7ff fd59 	bl	80076b6 <__lo0bits>
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	6163      	str	r3, [r4, #20]
 8007c08:	3020      	adds	r0, #32
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	e7e8      	b.n	8007be0 <__d2b+0x64>
 8007c0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c16:	6038      	str	r0, [r7, #0]
 8007c18:	6918      	ldr	r0, [r3, #16]
 8007c1a:	f7ff fd2d 	bl	8007678 <__hi0bits>
 8007c1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c22:	e7e5      	b.n	8007bf0 <__d2b+0x74>
 8007c24:	08008858 	.word	0x08008858
 8007c28:	08008869 	.word	0x08008869

08007c2c <__ssputs_r>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	688e      	ldr	r6, [r1, #8]
 8007c32:	461f      	mov	r7, r3
 8007c34:	42be      	cmp	r6, r7
 8007c36:	680b      	ldr	r3, [r1, #0]
 8007c38:	4682      	mov	sl, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4690      	mov	r8, r2
 8007c3e:	d82d      	bhi.n	8007c9c <__ssputs_r+0x70>
 8007c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c48:	d026      	beq.n	8007c98 <__ssputs_r+0x6c>
 8007c4a:	6965      	ldr	r5, [r4, #20]
 8007c4c:	6909      	ldr	r1, [r1, #16]
 8007c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c52:	eba3 0901 	sub.w	r9, r3, r1
 8007c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c5a:	1c7b      	adds	r3, r7, #1
 8007c5c:	444b      	add	r3, r9
 8007c5e:	106d      	asrs	r5, r5, #1
 8007c60:	429d      	cmp	r5, r3
 8007c62:	bf38      	it	cc
 8007c64:	461d      	movcc	r5, r3
 8007c66:	0553      	lsls	r3, r2, #21
 8007c68:	d527      	bpl.n	8007cba <__ssputs_r+0x8e>
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	f7ff fbd0 	bl	8007410 <_malloc_r>
 8007c70:	4606      	mov	r6, r0
 8007c72:	b360      	cbz	r0, 8007cce <__ssputs_r+0xa2>
 8007c74:	6921      	ldr	r1, [r4, #16]
 8007c76:	464a      	mov	r2, r9
 8007c78:	f000 fa06 	bl	8008088 <memcpy>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	6126      	str	r6, [r4, #16]
 8007c8a:	6165      	str	r5, [r4, #20]
 8007c8c:	444e      	add	r6, r9
 8007c8e:	eba5 0509 	sub.w	r5, r5, r9
 8007c92:	6026      	str	r6, [r4, #0]
 8007c94:	60a5      	str	r5, [r4, #8]
 8007c96:	463e      	mov	r6, r7
 8007c98:	42be      	cmp	r6, r7
 8007c9a:	d900      	bls.n	8007c9e <__ssputs_r+0x72>
 8007c9c:	463e      	mov	r6, r7
 8007c9e:	6820      	ldr	r0, [r4, #0]
 8007ca0:	4632      	mov	r2, r6
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	f000 f9c6 	bl	8008034 <memmove>
 8007ca8:	68a3      	ldr	r3, [r4, #8]
 8007caa:	1b9b      	subs	r3, r3, r6
 8007cac:	60a3      	str	r3, [r4, #8]
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	4433      	add	r3, r6
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cba:	462a      	mov	r2, r5
 8007cbc:	f000 fa36 	bl	800812c <_realloc_r>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d1e0      	bne.n	8007c88 <__ssputs_r+0x5c>
 8007cc6:	6921      	ldr	r1, [r4, #16]
 8007cc8:	4650      	mov	r0, sl
 8007cca:	f7ff fb2d 	bl	8007328 <_free_r>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	f8ca 3000 	str.w	r3, [sl]
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce0:	e7e9      	b.n	8007cb6 <__ssputs_r+0x8a>
	...

08007ce4 <_svfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	4698      	mov	r8, r3
 8007cea:	898b      	ldrh	r3, [r1, #12]
 8007cec:	061b      	lsls	r3, r3, #24
 8007cee:	b09d      	sub	sp, #116	@ 0x74
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460d      	mov	r5, r1
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	d510      	bpl.n	8007d1a <_svfiprintf_r+0x36>
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	b973      	cbnz	r3, 8007d1a <_svfiprintf_r+0x36>
 8007cfc:	2140      	movs	r1, #64	@ 0x40
 8007cfe:	f7ff fb87 	bl	8007410 <_malloc_r>
 8007d02:	6028      	str	r0, [r5, #0]
 8007d04:	6128      	str	r0, [r5, #16]
 8007d06:	b930      	cbnz	r0, 8007d16 <_svfiprintf_r+0x32>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	b01d      	add	sp, #116	@ 0x74
 8007d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d16:	2340      	movs	r3, #64	@ 0x40
 8007d18:	616b      	str	r3, [r5, #20]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1e:	2320      	movs	r3, #32
 8007d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d28:	2330      	movs	r3, #48	@ 0x30
 8007d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ec8 <_svfiprintf_r+0x1e4>
 8007d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d32:	f04f 0901 	mov.w	r9, #1
 8007d36:	4623      	mov	r3, r4
 8007d38:	469a      	mov	sl, r3
 8007d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d3e:	b10a      	cbz	r2, 8007d44 <_svfiprintf_r+0x60>
 8007d40:	2a25      	cmp	r2, #37	@ 0x25
 8007d42:	d1f9      	bne.n	8007d38 <_svfiprintf_r+0x54>
 8007d44:	ebba 0b04 	subs.w	fp, sl, r4
 8007d48:	d00b      	beq.n	8007d62 <_svfiprintf_r+0x7e>
 8007d4a:	465b      	mov	r3, fp
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4629      	mov	r1, r5
 8007d50:	4638      	mov	r0, r7
 8007d52:	f7ff ff6b 	bl	8007c2c <__ssputs_r>
 8007d56:	3001      	adds	r0, #1
 8007d58:	f000 80a7 	beq.w	8007eaa <_svfiprintf_r+0x1c6>
 8007d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d5e:	445a      	add	r2, fp
 8007d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d62:	f89a 3000 	ldrb.w	r3, [sl]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 809f 	beq.w	8007eaa <_svfiprintf_r+0x1c6>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d76:	f10a 0a01 	add.w	sl, sl, #1
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	9307      	str	r3, [sp, #28]
 8007d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d84:	4654      	mov	r4, sl
 8007d86:	2205      	movs	r2, #5
 8007d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8c:	484e      	ldr	r0, [pc, #312]	@ (8007ec8 <_svfiprintf_r+0x1e4>)
 8007d8e:	f7f8 fa27 	bl	80001e0 <memchr>
 8007d92:	9a04      	ldr	r2, [sp, #16]
 8007d94:	b9d8      	cbnz	r0, 8007dce <_svfiprintf_r+0xea>
 8007d96:	06d0      	lsls	r0, r2, #27
 8007d98:	bf44      	itt	mi
 8007d9a:	2320      	movmi	r3, #32
 8007d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da0:	0711      	lsls	r1, r2, #28
 8007da2:	bf44      	itt	mi
 8007da4:	232b      	movmi	r3, #43	@ 0x2b
 8007da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007daa:	f89a 3000 	ldrb.w	r3, [sl]
 8007dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db0:	d015      	beq.n	8007dde <_svfiprintf_r+0xfa>
 8007db2:	9a07      	ldr	r2, [sp, #28]
 8007db4:	4654      	mov	r4, sl
 8007db6:	2000      	movs	r0, #0
 8007db8:	f04f 0c0a 	mov.w	ip, #10
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc2:	3b30      	subs	r3, #48	@ 0x30
 8007dc4:	2b09      	cmp	r3, #9
 8007dc6:	d94b      	bls.n	8007e60 <_svfiprintf_r+0x17c>
 8007dc8:	b1b0      	cbz	r0, 8007df8 <_svfiprintf_r+0x114>
 8007dca:	9207      	str	r2, [sp, #28]
 8007dcc:	e014      	b.n	8007df8 <_svfiprintf_r+0x114>
 8007dce:	eba0 0308 	sub.w	r3, r0, r8
 8007dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	46a2      	mov	sl, r4
 8007ddc:	e7d2      	b.n	8007d84 <_svfiprintf_r+0xa0>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	1d19      	adds	r1, r3, #4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	9103      	str	r1, [sp, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfbb      	ittet	lt
 8007dea:	425b      	neglt	r3, r3
 8007dec:	f042 0202 	orrlt.w	r2, r2, #2
 8007df0:	9307      	strge	r3, [sp, #28]
 8007df2:	9307      	strlt	r3, [sp, #28]
 8007df4:	bfb8      	it	lt
 8007df6:	9204      	strlt	r2, [sp, #16]
 8007df8:	7823      	ldrb	r3, [r4, #0]
 8007dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dfc:	d10a      	bne.n	8007e14 <_svfiprintf_r+0x130>
 8007dfe:	7863      	ldrb	r3, [r4, #1]
 8007e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e02:	d132      	bne.n	8007e6a <_svfiprintf_r+0x186>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	1d1a      	adds	r2, r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	9203      	str	r2, [sp, #12]
 8007e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e10:	3402      	adds	r4, #2
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ed8 <_svfiprintf_r+0x1f4>
 8007e18:	7821      	ldrb	r1, [r4, #0]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	f7f8 f9df 	bl	80001e0 <memchr>
 8007e22:	b138      	cbz	r0, 8007e34 <_svfiprintf_r+0x150>
 8007e24:	9b04      	ldr	r3, [sp, #16]
 8007e26:	eba0 000a 	sub.w	r0, r0, sl
 8007e2a:	2240      	movs	r2, #64	@ 0x40
 8007e2c:	4082      	lsls	r2, r0
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	3401      	adds	r4, #1
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e38:	4824      	ldr	r0, [pc, #144]	@ (8007ecc <_svfiprintf_r+0x1e8>)
 8007e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e3e:	2206      	movs	r2, #6
 8007e40:	f7f8 f9ce 	bl	80001e0 <memchr>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d036      	beq.n	8007eb6 <_svfiprintf_r+0x1d2>
 8007e48:	4b21      	ldr	r3, [pc, #132]	@ (8007ed0 <_svfiprintf_r+0x1ec>)
 8007e4a:	bb1b      	cbnz	r3, 8007e94 <_svfiprintf_r+0x1b0>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	3307      	adds	r3, #7
 8007e50:	f023 0307 	bic.w	r3, r3, #7
 8007e54:	3308      	adds	r3, #8
 8007e56:	9303      	str	r3, [sp, #12]
 8007e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5a:	4433      	add	r3, r6
 8007e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5e:	e76a      	b.n	8007d36 <_svfiprintf_r+0x52>
 8007e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e64:	460c      	mov	r4, r1
 8007e66:	2001      	movs	r0, #1
 8007e68:	e7a8      	b.n	8007dbc <_svfiprintf_r+0xd8>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	3401      	adds	r4, #1
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	4619      	mov	r1, r3
 8007e72:	f04f 0c0a 	mov.w	ip, #10
 8007e76:	4620      	mov	r0, r4
 8007e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e7c:	3a30      	subs	r2, #48	@ 0x30
 8007e7e:	2a09      	cmp	r2, #9
 8007e80:	d903      	bls.n	8007e8a <_svfiprintf_r+0x1a6>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0c6      	beq.n	8007e14 <_svfiprintf_r+0x130>
 8007e86:	9105      	str	r1, [sp, #20]
 8007e88:	e7c4      	b.n	8007e14 <_svfiprintf_r+0x130>
 8007e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e8e:	4604      	mov	r4, r0
 8007e90:	2301      	movs	r3, #1
 8007e92:	e7f0      	b.n	8007e76 <_svfiprintf_r+0x192>
 8007e94:	ab03      	add	r3, sp, #12
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <_svfiprintf_r+0x1f0>)
 8007e9c:	a904      	add	r1, sp, #16
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7fd fe98 	bl	8005bd4 <_printf_float>
 8007ea4:	1c42      	adds	r2, r0, #1
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	d1d6      	bne.n	8007e58 <_svfiprintf_r+0x174>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	065b      	lsls	r3, r3, #25
 8007eae:	f53f af2d 	bmi.w	8007d0c <_svfiprintf_r+0x28>
 8007eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007eb4:	e72c      	b.n	8007d10 <_svfiprintf_r+0x2c>
 8007eb6:	ab03      	add	r3, sp, #12
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	462a      	mov	r2, r5
 8007ebc:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <_svfiprintf_r+0x1f0>)
 8007ebe:	a904      	add	r1, sp, #16
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f7fe f91f 	bl	8006104 <_printf_i>
 8007ec6:	e7ed      	b.n	8007ea4 <_svfiprintf_r+0x1c0>
 8007ec8:	080089c0 	.word	0x080089c0
 8007ecc:	080089ca 	.word	0x080089ca
 8007ed0:	08005bd5 	.word	0x08005bd5
 8007ed4:	08007c2d 	.word	0x08007c2d
 8007ed8:	080089c6 	.word	0x080089c6

08007edc <__sflush_r>:
 8007edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee4:	0716      	lsls	r6, r2, #28
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	460c      	mov	r4, r1
 8007eea:	d454      	bmi.n	8007f96 <__sflush_r+0xba>
 8007eec:	684b      	ldr	r3, [r1, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dc02      	bgt.n	8007ef8 <__sflush_r+0x1c>
 8007ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dd48      	ble.n	8007f8a <__sflush_r+0xae>
 8007ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d045      	beq.n	8007f8a <__sflush_r+0xae>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f04:	682f      	ldr	r7, [r5, #0]
 8007f06:	6a21      	ldr	r1, [r4, #32]
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	d030      	beq.n	8007f6e <__sflush_r+0x92>
 8007f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	0759      	lsls	r1, r3, #29
 8007f12:	d505      	bpl.n	8007f20 <__sflush_r+0x44>
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	1ad2      	subs	r2, r2, r3
 8007f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f1a:	b10b      	cbz	r3, 8007f20 <__sflush_r+0x44>
 8007f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f24:	6a21      	ldr	r1, [r4, #32]
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b0      	blx	r6
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	d106      	bne.n	8007f3e <__sflush_r+0x62>
 8007f30:	6829      	ldr	r1, [r5, #0]
 8007f32:	291d      	cmp	r1, #29
 8007f34:	d82b      	bhi.n	8007f8e <__sflush_r+0xb2>
 8007f36:	4a2a      	ldr	r2, [pc, #168]	@ (8007fe0 <__sflush_r+0x104>)
 8007f38:	410a      	asrs	r2, r1
 8007f3a:	07d6      	lsls	r6, r2, #31
 8007f3c:	d427      	bmi.n	8007f8e <__sflush_r+0xb2>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	04d9      	lsls	r1, r3, #19
 8007f44:	6922      	ldr	r2, [r4, #16]
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	d504      	bpl.n	8007f54 <__sflush_r+0x78>
 8007f4a:	1c42      	adds	r2, r0, #1
 8007f4c:	d101      	bne.n	8007f52 <__sflush_r+0x76>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b903      	cbnz	r3, 8007f54 <__sflush_r+0x78>
 8007f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f56:	602f      	str	r7, [r5, #0]
 8007f58:	b1b9      	cbz	r1, 8007f8a <__sflush_r+0xae>
 8007f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	d002      	beq.n	8007f68 <__sflush_r+0x8c>
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7ff f9e0 	bl	8007328 <_free_r>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f6c:	e00d      	b.n	8007f8a <__sflush_r+0xae>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b0      	blx	r6
 8007f74:	4602      	mov	r2, r0
 8007f76:	1c50      	adds	r0, r2, #1
 8007f78:	d1c9      	bne.n	8007f0e <__sflush_r+0x32>
 8007f7a:	682b      	ldr	r3, [r5, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0c6      	beq.n	8007f0e <__sflush_r+0x32>
 8007f80:	2b1d      	cmp	r3, #29
 8007f82:	d001      	beq.n	8007f88 <__sflush_r+0xac>
 8007f84:	2b16      	cmp	r3, #22
 8007f86:	d11e      	bne.n	8007fc6 <__sflush_r+0xea>
 8007f88:	602f      	str	r7, [r5, #0]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e022      	b.n	8007fd4 <__sflush_r+0xf8>
 8007f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	e01b      	b.n	8007fce <__sflush_r+0xf2>
 8007f96:	690f      	ldr	r7, [r1, #16]
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	d0f6      	beq.n	8007f8a <__sflush_r+0xae>
 8007f9c:	0793      	lsls	r3, r2, #30
 8007f9e:	680e      	ldr	r6, [r1, #0]
 8007fa0:	bf08      	it	eq
 8007fa2:	694b      	ldreq	r3, [r1, #20]
 8007fa4:	600f      	str	r7, [r1, #0]
 8007fa6:	bf18      	it	ne
 8007fa8:	2300      	movne	r3, #0
 8007faa:	eba6 0807 	sub.w	r8, r6, r7
 8007fae:	608b      	str	r3, [r1, #8]
 8007fb0:	f1b8 0f00 	cmp.w	r8, #0
 8007fb4:	dde9      	ble.n	8007f8a <__sflush_r+0xae>
 8007fb6:	6a21      	ldr	r1, [r4, #32]
 8007fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fba:	4643      	mov	r3, r8
 8007fbc:	463a      	mov	r2, r7
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b0      	blx	r6
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dc08      	bgt.n	8007fd8 <__sflush_r+0xfc>
 8007fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd8:	4407      	add	r7, r0
 8007fda:	eba8 0800 	sub.w	r8, r8, r0
 8007fde:	e7e7      	b.n	8007fb0 <__sflush_r+0xd4>
 8007fe0:	dfbffffe 	.word	0xdfbffffe

08007fe4 <_fflush_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	690b      	ldr	r3, [r1, #16]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b913      	cbnz	r3, 8007ff4 <_fflush_r+0x10>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	b118      	cbz	r0, 8007ffe <_fflush_r+0x1a>
 8007ff6:	6a03      	ldr	r3, [r0, #32]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <_fflush_r+0x1a>
 8007ffa:	f7fe fa2f 	bl	800645c <__sinit>
 8007ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f3      	beq.n	8007fee <_fflush_r+0xa>
 8008006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008008:	07d0      	lsls	r0, r2, #31
 800800a:	d404      	bmi.n	8008016 <_fflush_r+0x32>
 800800c:	0599      	lsls	r1, r3, #22
 800800e:	d402      	bmi.n	8008016 <_fflush_r+0x32>
 8008010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008012:	f7fe fb3a 	bl	800668a <__retarget_lock_acquire_recursive>
 8008016:	4628      	mov	r0, r5
 8008018:	4621      	mov	r1, r4
 800801a:	f7ff ff5f 	bl	8007edc <__sflush_r>
 800801e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008020:	07da      	lsls	r2, r3, #31
 8008022:	4605      	mov	r5, r0
 8008024:	d4e4      	bmi.n	8007ff0 <_fflush_r+0xc>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	059b      	lsls	r3, r3, #22
 800802a:	d4e1      	bmi.n	8007ff0 <_fflush_r+0xc>
 800802c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800802e:	f7fe fb2d 	bl	800668c <__retarget_lock_release_recursive>
 8008032:	e7dd      	b.n	8007ff0 <_fflush_r+0xc>

08008034 <memmove>:
 8008034:	4288      	cmp	r0, r1
 8008036:	b510      	push	{r4, lr}
 8008038:	eb01 0402 	add.w	r4, r1, r2
 800803c:	d902      	bls.n	8008044 <memmove+0x10>
 800803e:	4284      	cmp	r4, r0
 8008040:	4623      	mov	r3, r4
 8008042:	d807      	bhi.n	8008054 <memmove+0x20>
 8008044:	1e43      	subs	r3, r0, #1
 8008046:	42a1      	cmp	r1, r4
 8008048:	d008      	beq.n	800805c <memmove+0x28>
 800804a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800804e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008052:	e7f8      	b.n	8008046 <memmove+0x12>
 8008054:	4402      	add	r2, r0
 8008056:	4601      	mov	r1, r0
 8008058:	428a      	cmp	r2, r1
 800805a:	d100      	bne.n	800805e <memmove+0x2a>
 800805c:	bd10      	pop	{r4, pc}
 800805e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008066:	e7f7      	b.n	8008058 <memmove+0x24>

08008068 <_sbrk_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d06      	ldr	r5, [pc, #24]	@ (8008084 <_sbrk_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	f7fa fb58 	bl	8002728 <_sbrk>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_sbrk_r+0x1a>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_sbrk_r+0x1a>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20000544 	.word	0x20000544

08008088 <memcpy>:
 8008088:	440a      	add	r2, r1
 800808a:	4291      	cmp	r1, r2
 800808c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008090:	d100      	bne.n	8008094 <memcpy+0xc>
 8008092:	4770      	bx	lr
 8008094:	b510      	push	{r4, lr}
 8008096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800809e:	4291      	cmp	r1, r2
 80080a0:	d1f9      	bne.n	8008096 <memcpy+0xe>
 80080a2:	bd10      	pop	{r4, pc}

080080a4 <__assert_func>:
 80080a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080a6:	4614      	mov	r4, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	4b09      	ldr	r3, [pc, #36]	@ (80080d0 <__assert_func+0x2c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4605      	mov	r5, r0
 80080b0:	68d8      	ldr	r0, [r3, #12]
 80080b2:	b954      	cbnz	r4, 80080ca <__assert_func+0x26>
 80080b4:	4b07      	ldr	r3, [pc, #28]	@ (80080d4 <__assert_func+0x30>)
 80080b6:	461c      	mov	r4, r3
 80080b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080bc:	9100      	str	r1, [sp, #0]
 80080be:	462b      	mov	r3, r5
 80080c0:	4905      	ldr	r1, [pc, #20]	@ (80080d8 <__assert_func+0x34>)
 80080c2:	f000 f86f 	bl	80081a4 <fiprintf>
 80080c6:	f000 f87f 	bl	80081c8 <abort>
 80080ca:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <__assert_func+0x38>)
 80080cc:	e7f4      	b.n	80080b8 <__assert_func+0x14>
 80080ce:	bf00      	nop
 80080d0:	20000088 	.word	0x20000088
 80080d4:	08008a16 	.word	0x08008a16
 80080d8:	080089e8 	.word	0x080089e8
 80080dc:	080089db 	.word	0x080089db

080080e0 <_calloc_r>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	fba1 5402 	umull	r5, r4, r1, r2
 80080e6:	b93c      	cbnz	r4, 80080f8 <_calloc_r+0x18>
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7ff f991 	bl	8007410 <_malloc_r>
 80080ee:	4606      	mov	r6, r0
 80080f0:	b928      	cbnz	r0, 80080fe <_calloc_r+0x1e>
 80080f2:	2600      	movs	r6, #0
 80080f4:	4630      	mov	r0, r6
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	220c      	movs	r2, #12
 80080fa:	6002      	str	r2, [r0, #0]
 80080fc:	e7f9      	b.n	80080f2 <_calloc_r+0x12>
 80080fe:	462a      	mov	r2, r5
 8008100:	4621      	mov	r1, r4
 8008102:	f7fe fa44 	bl	800658e <memset>
 8008106:	e7f5      	b.n	80080f4 <_calloc_r+0x14>

08008108 <__ascii_mbtowc>:
 8008108:	b082      	sub	sp, #8
 800810a:	b901      	cbnz	r1, 800810e <__ascii_mbtowc+0x6>
 800810c:	a901      	add	r1, sp, #4
 800810e:	b142      	cbz	r2, 8008122 <__ascii_mbtowc+0x1a>
 8008110:	b14b      	cbz	r3, 8008126 <__ascii_mbtowc+0x1e>
 8008112:	7813      	ldrb	r3, [r2, #0]
 8008114:	600b      	str	r3, [r1, #0]
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	1e10      	subs	r0, r2, #0
 800811a:	bf18      	it	ne
 800811c:	2001      	movne	r0, #1
 800811e:	b002      	add	sp, #8
 8008120:	4770      	bx	lr
 8008122:	4610      	mov	r0, r2
 8008124:	e7fb      	b.n	800811e <__ascii_mbtowc+0x16>
 8008126:	f06f 0001 	mvn.w	r0, #1
 800812a:	e7f8      	b.n	800811e <__ascii_mbtowc+0x16>

0800812c <_realloc_r>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	4680      	mov	r8, r0
 8008132:	4615      	mov	r5, r2
 8008134:	460c      	mov	r4, r1
 8008136:	b921      	cbnz	r1, 8008142 <_realloc_r+0x16>
 8008138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	4611      	mov	r1, r2
 800813e:	f7ff b967 	b.w	8007410 <_malloc_r>
 8008142:	b92a      	cbnz	r2, 8008150 <_realloc_r+0x24>
 8008144:	f7ff f8f0 	bl	8007328 <_free_r>
 8008148:	2400      	movs	r4, #0
 800814a:	4620      	mov	r0, r4
 800814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008150:	f000 f841 	bl	80081d6 <_malloc_usable_size_r>
 8008154:	4285      	cmp	r5, r0
 8008156:	4606      	mov	r6, r0
 8008158:	d802      	bhi.n	8008160 <_realloc_r+0x34>
 800815a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800815e:	d8f4      	bhi.n	800814a <_realloc_r+0x1e>
 8008160:	4629      	mov	r1, r5
 8008162:	4640      	mov	r0, r8
 8008164:	f7ff f954 	bl	8007410 <_malloc_r>
 8008168:	4607      	mov	r7, r0
 800816a:	2800      	cmp	r0, #0
 800816c:	d0ec      	beq.n	8008148 <_realloc_r+0x1c>
 800816e:	42b5      	cmp	r5, r6
 8008170:	462a      	mov	r2, r5
 8008172:	4621      	mov	r1, r4
 8008174:	bf28      	it	cs
 8008176:	4632      	movcs	r2, r6
 8008178:	f7ff ff86 	bl	8008088 <memcpy>
 800817c:	4621      	mov	r1, r4
 800817e:	4640      	mov	r0, r8
 8008180:	f7ff f8d2 	bl	8007328 <_free_r>
 8008184:	463c      	mov	r4, r7
 8008186:	e7e0      	b.n	800814a <_realloc_r+0x1e>

08008188 <__ascii_wctomb>:
 8008188:	4603      	mov	r3, r0
 800818a:	4608      	mov	r0, r1
 800818c:	b141      	cbz	r1, 80081a0 <__ascii_wctomb+0x18>
 800818e:	2aff      	cmp	r2, #255	@ 0xff
 8008190:	d904      	bls.n	800819c <__ascii_wctomb+0x14>
 8008192:	228a      	movs	r2, #138	@ 0x8a
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	4770      	bx	lr
 800819c:	700a      	strb	r2, [r1, #0]
 800819e:	2001      	movs	r0, #1
 80081a0:	4770      	bx	lr
	...

080081a4 <fiprintf>:
 80081a4:	b40e      	push	{r1, r2, r3}
 80081a6:	b503      	push	{r0, r1, lr}
 80081a8:	4601      	mov	r1, r0
 80081aa:	ab03      	add	r3, sp, #12
 80081ac:	4805      	ldr	r0, [pc, #20]	@ (80081c4 <fiprintf+0x20>)
 80081ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b2:	6800      	ldr	r0, [r0, #0]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	f000 f83f 	bl	8008238 <_vfiprintf_r>
 80081ba:	b002      	add	sp, #8
 80081bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c0:	b003      	add	sp, #12
 80081c2:	4770      	bx	lr
 80081c4:	20000088 	.word	0x20000088

080081c8 <abort>:
 80081c8:	b508      	push	{r3, lr}
 80081ca:	2006      	movs	r0, #6
 80081cc:	f000 fa08 	bl	80085e0 <raise>
 80081d0:	2001      	movs	r0, #1
 80081d2:	f7fa fa30 	bl	8002636 <_exit>

080081d6 <_malloc_usable_size_r>:
 80081d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081da:	1f18      	subs	r0, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfbc      	itt	lt
 80081e0:	580b      	ldrlt	r3, [r1, r0]
 80081e2:	18c0      	addlt	r0, r0, r3
 80081e4:	4770      	bx	lr

080081e6 <__sfputc_r>:
 80081e6:	6893      	ldr	r3, [r2, #8]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	b410      	push	{r4}
 80081ee:	6093      	str	r3, [r2, #8]
 80081f0:	da08      	bge.n	8008204 <__sfputc_r+0x1e>
 80081f2:	6994      	ldr	r4, [r2, #24]
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	db01      	blt.n	80081fc <__sfputc_r+0x16>
 80081f8:	290a      	cmp	r1, #10
 80081fa:	d103      	bne.n	8008204 <__sfputc_r+0x1e>
 80081fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008200:	f000 b932 	b.w	8008468 <__swbuf_r>
 8008204:	6813      	ldr	r3, [r2, #0]
 8008206:	1c58      	adds	r0, r3, #1
 8008208:	6010      	str	r0, [r2, #0]
 800820a:	7019      	strb	r1, [r3, #0]
 800820c:	4608      	mov	r0, r1
 800820e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008212:	4770      	bx	lr

08008214 <__sfputs_r>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	4606      	mov	r6, r0
 8008218:	460f      	mov	r7, r1
 800821a:	4614      	mov	r4, r2
 800821c:	18d5      	adds	r5, r2, r3
 800821e:	42ac      	cmp	r4, r5
 8008220:	d101      	bne.n	8008226 <__sfputs_r+0x12>
 8008222:	2000      	movs	r0, #0
 8008224:	e007      	b.n	8008236 <__sfputs_r+0x22>
 8008226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822a:	463a      	mov	r2, r7
 800822c:	4630      	mov	r0, r6
 800822e:	f7ff ffda 	bl	80081e6 <__sfputc_r>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d1f3      	bne.n	800821e <__sfputs_r+0xa>
 8008236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008238 <_vfiprintf_r>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	460d      	mov	r5, r1
 800823e:	b09d      	sub	sp, #116	@ 0x74
 8008240:	4614      	mov	r4, r2
 8008242:	4698      	mov	r8, r3
 8008244:	4606      	mov	r6, r0
 8008246:	b118      	cbz	r0, 8008250 <_vfiprintf_r+0x18>
 8008248:	6a03      	ldr	r3, [r0, #32]
 800824a:	b90b      	cbnz	r3, 8008250 <_vfiprintf_r+0x18>
 800824c:	f7fe f906 	bl	800645c <__sinit>
 8008250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008252:	07d9      	lsls	r1, r3, #31
 8008254:	d405      	bmi.n	8008262 <_vfiprintf_r+0x2a>
 8008256:	89ab      	ldrh	r3, [r5, #12]
 8008258:	059a      	lsls	r2, r3, #22
 800825a:	d402      	bmi.n	8008262 <_vfiprintf_r+0x2a>
 800825c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800825e:	f7fe fa14 	bl	800668a <__retarget_lock_acquire_recursive>
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	071b      	lsls	r3, r3, #28
 8008266:	d501      	bpl.n	800826c <_vfiprintf_r+0x34>
 8008268:	692b      	ldr	r3, [r5, #16]
 800826a:	b99b      	cbnz	r3, 8008294 <_vfiprintf_r+0x5c>
 800826c:	4629      	mov	r1, r5
 800826e:	4630      	mov	r0, r6
 8008270:	f000 f938 	bl	80084e4 <__swsetup_r>
 8008274:	b170      	cbz	r0, 8008294 <_vfiprintf_r+0x5c>
 8008276:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008278:	07dc      	lsls	r4, r3, #31
 800827a:	d504      	bpl.n	8008286 <_vfiprintf_r+0x4e>
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	b01d      	add	sp, #116	@ 0x74
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	0598      	lsls	r0, r3, #22
 800828a:	d4f7      	bmi.n	800827c <_vfiprintf_r+0x44>
 800828c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800828e:	f7fe f9fd 	bl	800668c <__retarget_lock_release_recursive>
 8008292:	e7f3      	b.n	800827c <_vfiprintf_r+0x44>
 8008294:	2300      	movs	r3, #0
 8008296:	9309      	str	r3, [sp, #36]	@ 0x24
 8008298:	2320      	movs	r3, #32
 800829a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800829e:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a2:	2330      	movs	r3, #48	@ 0x30
 80082a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008454 <_vfiprintf_r+0x21c>
 80082a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082ac:	f04f 0901 	mov.w	r9, #1
 80082b0:	4623      	mov	r3, r4
 80082b2:	469a      	mov	sl, r3
 80082b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b8:	b10a      	cbz	r2, 80082be <_vfiprintf_r+0x86>
 80082ba:	2a25      	cmp	r2, #37	@ 0x25
 80082bc:	d1f9      	bne.n	80082b2 <_vfiprintf_r+0x7a>
 80082be:	ebba 0b04 	subs.w	fp, sl, r4
 80082c2:	d00b      	beq.n	80082dc <_vfiprintf_r+0xa4>
 80082c4:	465b      	mov	r3, fp
 80082c6:	4622      	mov	r2, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff ffa2 	bl	8008214 <__sfputs_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	f000 80a7 	beq.w	8008424 <_vfiprintf_r+0x1ec>
 80082d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082d8:	445a      	add	r2, fp
 80082da:	9209      	str	r2, [sp, #36]	@ 0x24
 80082dc:	f89a 3000 	ldrb.w	r3, [sl]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 809f 	beq.w	8008424 <_vfiprintf_r+0x1ec>
 80082e6:	2300      	movs	r3, #0
 80082e8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f0:	f10a 0a01 	add.w	sl, sl, #1
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80082fe:	4654      	mov	r4, sl
 8008300:	2205      	movs	r2, #5
 8008302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008306:	4853      	ldr	r0, [pc, #332]	@ (8008454 <_vfiprintf_r+0x21c>)
 8008308:	f7f7 ff6a 	bl	80001e0 <memchr>
 800830c:	9a04      	ldr	r2, [sp, #16]
 800830e:	b9d8      	cbnz	r0, 8008348 <_vfiprintf_r+0x110>
 8008310:	06d1      	lsls	r1, r2, #27
 8008312:	bf44      	itt	mi
 8008314:	2320      	movmi	r3, #32
 8008316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800831a:	0713      	lsls	r3, r2, #28
 800831c:	bf44      	itt	mi
 800831e:	232b      	movmi	r3, #43	@ 0x2b
 8008320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008324:	f89a 3000 	ldrb.w	r3, [sl]
 8008328:	2b2a      	cmp	r3, #42	@ 0x2a
 800832a:	d015      	beq.n	8008358 <_vfiprintf_r+0x120>
 800832c:	9a07      	ldr	r2, [sp, #28]
 800832e:	4654      	mov	r4, sl
 8008330:	2000      	movs	r0, #0
 8008332:	f04f 0c0a 	mov.w	ip, #10
 8008336:	4621      	mov	r1, r4
 8008338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833c:	3b30      	subs	r3, #48	@ 0x30
 800833e:	2b09      	cmp	r3, #9
 8008340:	d94b      	bls.n	80083da <_vfiprintf_r+0x1a2>
 8008342:	b1b0      	cbz	r0, 8008372 <_vfiprintf_r+0x13a>
 8008344:	9207      	str	r2, [sp, #28]
 8008346:	e014      	b.n	8008372 <_vfiprintf_r+0x13a>
 8008348:	eba0 0308 	sub.w	r3, r0, r8
 800834c:	fa09 f303 	lsl.w	r3, r9, r3
 8008350:	4313      	orrs	r3, r2
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	46a2      	mov	sl, r4
 8008356:	e7d2      	b.n	80082fe <_vfiprintf_r+0xc6>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	9103      	str	r1, [sp, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfbb      	ittet	lt
 8008364:	425b      	neglt	r3, r3
 8008366:	f042 0202 	orrlt.w	r2, r2, #2
 800836a:	9307      	strge	r3, [sp, #28]
 800836c:	9307      	strlt	r3, [sp, #28]
 800836e:	bfb8      	it	lt
 8008370:	9204      	strlt	r2, [sp, #16]
 8008372:	7823      	ldrb	r3, [r4, #0]
 8008374:	2b2e      	cmp	r3, #46	@ 0x2e
 8008376:	d10a      	bne.n	800838e <_vfiprintf_r+0x156>
 8008378:	7863      	ldrb	r3, [r4, #1]
 800837a:	2b2a      	cmp	r3, #42	@ 0x2a
 800837c:	d132      	bne.n	80083e4 <_vfiprintf_r+0x1ac>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	9203      	str	r2, [sp, #12]
 8008386:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800838a:	3402      	adds	r4, #2
 800838c:	9305      	str	r3, [sp, #20]
 800838e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008464 <_vfiprintf_r+0x22c>
 8008392:	7821      	ldrb	r1, [r4, #0]
 8008394:	2203      	movs	r2, #3
 8008396:	4650      	mov	r0, sl
 8008398:	f7f7 ff22 	bl	80001e0 <memchr>
 800839c:	b138      	cbz	r0, 80083ae <_vfiprintf_r+0x176>
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	eba0 000a 	sub.w	r0, r0, sl
 80083a4:	2240      	movs	r2, #64	@ 0x40
 80083a6:	4082      	lsls	r2, r0
 80083a8:	4313      	orrs	r3, r2
 80083aa:	3401      	adds	r4, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	4829      	ldr	r0, [pc, #164]	@ (8008458 <_vfiprintf_r+0x220>)
 80083b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083b8:	2206      	movs	r2, #6
 80083ba:	f7f7 ff11 	bl	80001e0 <memchr>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d03f      	beq.n	8008442 <_vfiprintf_r+0x20a>
 80083c2:	4b26      	ldr	r3, [pc, #152]	@ (800845c <_vfiprintf_r+0x224>)
 80083c4:	bb1b      	cbnz	r3, 800840e <_vfiprintf_r+0x1d6>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	3307      	adds	r3, #7
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	3308      	adds	r3, #8
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d4:	443b      	add	r3, r7
 80083d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d8:	e76a      	b.n	80082b0 <_vfiprintf_r+0x78>
 80083da:	fb0c 3202 	mla	r2, ip, r2, r3
 80083de:	460c      	mov	r4, r1
 80083e0:	2001      	movs	r0, #1
 80083e2:	e7a8      	b.n	8008336 <_vfiprintf_r+0xfe>
 80083e4:	2300      	movs	r3, #0
 80083e6:	3401      	adds	r4, #1
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	4619      	mov	r1, r3
 80083ec:	f04f 0c0a 	mov.w	ip, #10
 80083f0:	4620      	mov	r0, r4
 80083f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f6:	3a30      	subs	r2, #48	@ 0x30
 80083f8:	2a09      	cmp	r2, #9
 80083fa:	d903      	bls.n	8008404 <_vfiprintf_r+0x1cc>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0c6      	beq.n	800838e <_vfiprintf_r+0x156>
 8008400:	9105      	str	r1, [sp, #20]
 8008402:	e7c4      	b.n	800838e <_vfiprintf_r+0x156>
 8008404:	fb0c 2101 	mla	r1, ip, r1, r2
 8008408:	4604      	mov	r4, r0
 800840a:	2301      	movs	r3, #1
 800840c:	e7f0      	b.n	80083f0 <_vfiprintf_r+0x1b8>
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4b12      	ldr	r3, [pc, #72]	@ (8008460 <_vfiprintf_r+0x228>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	4630      	mov	r0, r6
 800841a:	f7fd fbdb 	bl	8005bd4 <_printf_float>
 800841e:	4607      	mov	r7, r0
 8008420:	1c78      	adds	r0, r7, #1
 8008422:	d1d6      	bne.n	80083d2 <_vfiprintf_r+0x19a>
 8008424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	d405      	bmi.n	8008436 <_vfiprintf_r+0x1fe>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	059a      	lsls	r2, r3, #22
 800842e:	d402      	bmi.n	8008436 <_vfiprintf_r+0x1fe>
 8008430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008432:	f7fe f92b 	bl	800668c <__retarget_lock_release_recursive>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	065b      	lsls	r3, r3, #25
 800843a:	f53f af1f 	bmi.w	800827c <_vfiprintf_r+0x44>
 800843e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008440:	e71e      	b.n	8008280 <_vfiprintf_r+0x48>
 8008442:	ab03      	add	r3, sp, #12
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	462a      	mov	r2, r5
 8008448:	4b05      	ldr	r3, [pc, #20]	@ (8008460 <_vfiprintf_r+0x228>)
 800844a:	a904      	add	r1, sp, #16
 800844c:	4630      	mov	r0, r6
 800844e:	f7fd fe59 	bl	8006104 <_printf_i>
 8008452:	e7e4      	b.n	800841e <_vfiprintf_r+0x1e6>
 8008454:	080089c0 	.word	0x080089c0
 8008458:	080089ca 	.word	0x080089ca
 800845c:	08005bd5 	.word	0x08005bd5
 8008460:	08008215 	.word	0x08008215
 8008464:	080089c6 	.word	0x080089c6

08008468 <__swbuf_r>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	460e      	mov	r6, r1
 800846c:	4614      	mov	r4, r2
 800846e:	4605      	mov	r5, r0
 8008470:	b118      	cbz	r0, 800847a <__swbuf_r+0x12>
 8008472:	6a03      	ldr	r3, [r0, #32]
 8008474:	b90b      	cbnz	r3, 800847a <__swbuf_r+0x12>
 8008476:	f7fd fff1 	bl	800645c <__sinit>
 800847a:	69a3      	ldr	r3, [r4, #24]
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	071a      	lsls	r2, r3, #28
 8008482:	d501      	bpl.n	8008488 <__swbuf_r+0x20>
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	b943      	cbnz	r3, 800849a <__swbuf_r+0x32>
 8008488:	4621      	mov	r1, r4
 800848a:	4628      	mov	r0, r5
 800848c:	f000 f82a 	bl	80084e4 <__swsetup_r>
 8008490:	b118      	cbz	r0, 800849a <__swbuf_r+0x32>
 8008492:	f04f 37ff 	mov.w	r7, #4294967295
 8008496:	4638      	mov	r0, r7
 8008498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	6922      	ldr	r2, [r4, #16]
 800849e:	1a98      	subs	r0, r3, r2
 80084a0:	6963      	ldr	r3, [r4, #20]
 80084a2:	b2f6      	uxtb	r6, r6
 80084a4:	4283      	cmp	r3, r0
 80084a6:	4637      	mov	r7, r6
 80084a8:	dc05      	bgt.n	80084b6 <__swbuf_r+0x4e>
 80084aa:	4621      	mov	r1, r4
 80084ac:	4628      	mov	r0, r5
 80084ae:	f7ff fd99 	bl	8007fe4 <_fflush_r>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d1ed      	bne.n	8008492 <__swbuf_r+0x2a>
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	60a3      	str	r3, [r4, #8]
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	6022      	str	r2, [r4, #0]
 80084c2:	701e      	strb	r6, [r3, #0]
 80084c4:	6962      	ldr	r2, [r4, #20]
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d004      	beq.n	80084d6 <__swbuf_r+0x6e>
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	07db      	lsls	r3, r3, #31
 80084d0:	d5e1      	bpl.n	8008496 <__swbuf_r+0x2e>
 80084d2:	2e0a      	cmp	r6, #10
 80084d4:	d1df      	bne.n	8008496 <__swbuf_r+0x2e>
 80084d6:	4621      	mov	r1, r4
 80084d8:	4628      	mov	r0, r5
 80084da:	f7ff fd83 	bl	8007fe4 <_fflush_r>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d0d9      	beq.n	8008496 <__swbuf_r+0x2e>
 80084e2:	e7d6      	b.n	8008492 <__swbuf_r+0x2a>

080084e4 <__swsetup_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4b29      	ldr	r3, [pc, #164]	@ (800858c <__swsetup_r+0xa8>)
 80084e8:	4605      	mov	r5, r0
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	460c      	mov	r4, r1
 80084ee:	b118      	cbz	r0, 80084f8 <__swsetup_r+0x14>
 80084f0:	6a03      	ldr	r3, [r0, #32]
 80084f2:	b90b      	cbnz	r3, 80084f8 <__swsetup_r+0x14>
 80084f4:	f7fd ffb2 	bl	800645c <__sinit>
 80084f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fc:	0719      	lsls	r1, r3, #28
 80084fe:	d422      	bmi.n	8008546 <__swsetup_r+0x62>
 8008500:	06da      	lsls	r2, r3, #27
 8008502:	d407      	bmi.n	8008514 <__swsetup_r+0x30>
 8008504:	2209      	movs	r2, #9
 8008506:	602a      	str	r2, [r5, #0]
 8008508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	e033      	b.n	800857c <__swsetup_r+0x98>
 8008514:	0758      	lsls	r0, r3, #29
 8008516:	d512      	bpl.n	800853e <__swsetup_r+0x5a>
 8008518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800851a:	b141      	cbz	r1, 800852e <__swsetup_r+0x4a>
 800851c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008520:	4299      	cmp	r1, r3
 8008522:	d002      	beq.n	800852a <__swsetup_r+0x46>
 8008524:	4628      	mov	r0, r5
 8008526:	f7fe feff 	bl	8007328 <_free_r>
 800852a:	2300      	movs	r3, #0
 800852c:	6363      	str	r3, [r4, #52]	@ 0x34
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008534:	81a3      	strh	r3, [r4, #12]
 8008536:	2300      	movs	r3, #0
 8008538:	6063      	str	r3, [r4, #4]
 800853a:	6923      	ldr	r3, [r4, #16]
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	f043 0308 	orr.w	r3, r3, #8
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	b94b      	cbnz	r3, 800855e <__swsetup_r+0x7a>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008554:	d003      	beq.n	800855e <__swsetup_r+0x7a>
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f000 f883 	bl	8008664 <__smakebuf_r>
 800855e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008562:	f013 0201 	ands.w	r2, r3, #1
 8008566:	d00a      	beq.n	800857e <__swsetup_r+0x9a>
 8008568:	2200      	movs	r2, #0
 800856a:	60a2      	str	r2, [r4, #8]
 800856c:	6962      	ldr	r2, [r4, #20]
 800856e:	4252      	negs	r2, r2
 8008570:	61a2      	str	r2, [r4, #24]
 8008572:	6922      	ldr	r2, [r4, #16]
 8008574:	b942      	cbnz	r2, 8008588 <__swsetup_r+0xa4>
 8008576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800857a:	d1c5      	bne.n	8008508 <__swsetup_r+0x24>
 800857c:	bd38      	pop	{r3, r4, r5, pc}
 800857e:	0799      	lsls	r1, r3, #30
 8008580:	bf58      	it	pl
 8008582:	6962      	ldrpl	r2, [r4, #20]
 8008584:	60a2      	str	r2, [r4, #8]
 8008586:	e7f4      	b.n	8008572 <__swsetup_r+0x8e>
 8008588:	2000      	movs	r0, #0
 800858a:	e7f7      	b.n	800857c <__swsetup_r+0x98>
 800858c:	20000088 	.word	0x20000088

08008590 <_raise_r>:
 8008590:	291f      	cmp	r1, #31
 8008592:	b538      	push	{r3, r4, r5, lr}
 8008594:	4605      	mov	r5, r0
 8008596:	460c      	mov	r4, r1
 8008598:	d904      	bls.n	80085a4 <_raise_r+0x14>
 800859a:	2316      	movs	r3, #22
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	f04f 30ff 	mov.w	r0, #4294967295
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80085a6:	b112      	cbz	r2, 80085ae <_raise_r+0x1e>
 80085a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085ac:	b94b      	cbnz	r3, 80085c2 <_raise_r+0x32>
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 f830 	bl	8008614 <_getpid_r>
 80085b4:	4622      	mov	r2, r4
 80085b6:	4601      	mov	r1, r0
 80085b8:	4628      	mov	r0, r5
 80085ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085be:	f000 b817 	b.w	80085f0 <_kill_r>
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d00a      	beq.n	80085dc <_raise_r+0x4c>
 80085c6:	1c59      	adds	r1, r3, #1
 80085c8:	d103      	bne.n	80085d2 <_raise_r+0x42>
 80085ca:	2316      	movs	r3, #22
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	2001      	movs	r0, #1
 80085d0:	e7e7      	b.n	80085a2 <_raise_r+0x12>
 80085d2:	2100      	movs	r1, #0
 80085d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80085d8:	4620      	mov	r0, r4
 80085da:	4798      	blx	r3
 80085dc:	2000      	movs	r0, #0
 80085de:	e7e0      	b.n	80085a2 <_raise_r+0x12>

080085e0 <raise>:
 80085e0:	4b02      	ldr	r3, [pc, #8]	@ (80085ec <raise+0xc>)
 80085e2:	4601      	mov	r1, r0
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f7ff bfd3 	b.w	8008590 <_raise_r>
 80085ea:	bf00      	nop
 80085ec:	20000088 	.word	0x20000088

080085f0 <_kill_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d07      	ldr	r5, [pc, #28]	@ (8008610 <_kill_r+0x20>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	f7fa f80a 	bl	8002616 <_kill>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	d102      	bne.n	800860c <_kill_r+0x1c>
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	b103      	cbz	r3, 800860c <_kill_r+0x1c>
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	bd38      	pop	{r3, r4, r5, pc}
 800860e:	bf00      	nop
 8008610:	20000544 	.word	0x20000544

08008614 <_getpid_r>:
 8008614:	f7f9 bff7 	b.w	8002606 <_getpid>

08008618 <__swhatbuf_r>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	460c      	mov	r4, r1
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	2900      	cmp	r1, #0
 8008622:	b096      	sub	sp, #88	@ 0x58
 8008624:	4615      	mov	r5, r2
 8008626:	461e      	mov	r6, r3
 8008628:	da0d      	bge.n	8008646 <__swhatbuf_r+0x2e>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008630:	f04f 0100 	mov.w	r1, #0
 8008634:	bf14      	ite	ne
 8008636:	2340      	movne	r3, #64	@ 0x40
 8008638:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800863c:	2000      	movs	r0, #0
 800863e:	6031      	str	r1, [r6, #0]
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	b016      	add	sp, #88	@ 0x58
 8008644:	bd70      	pop	{r4, r5, r6, pc}
 8008646:	466a      	mov	r2, sp
 8008648:	f000 f848 	bl	80086dc <_fstat_r>
 800864c:	2800      	cmp	r0, #0
 800864e:	dbec      	blt.n	800862a <__swhatbuf_r+0x12>
 8008650:	9901      	ldr	r1, [sp, #4]
 8008652:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008656:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800865a:	4259      	negs	r1, r3
 800865c:	4159      	adcs	r1, r3
 800865e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008662:	e7eb      	b.n	800863c <__swhatbuf_r+0x24>

08008664 <__smakebuf_r>:
 8008664:	898b      	ldrh	r3, [r1, #12]
 8008666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008668:	079d      	lsls	r5, r3, #30
 800866a:	4606      	mov	r6, r0
 800866c:	460c      	mov	r4, r1
 800866e:	d507      	bpl.n	8008680 <__smakebuf_r+0x1c>
 8008670:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	2301      	movs	r3, #1
 800867a:	6163      	str	r3, [r4, #20]
 800867c:	b003      	add	sp, #12
 800867e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008680:	ab01      	add	r3, sp, #4
 8008682:	466a      	mov	r2, sp
 8008684:	f7ff ffc8 	bl	8008618 <__swhatbuf_r>
 8008688:	9f00      	ldr	r7, [sp, #0]
 800868a:	4605      	mov	r5, r0
 800868c:	4639      	mov	r1, r7
 800868e:	4630      	mov	r0, r6
 8008690:	f7fe febe 	bl	8007410 <_malloc_r>
 8008694:	b948      	cbnz	r0, 80086aa <__smakebuf_r+0x46>
 8008696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869a:	059a      	lsls	r2, r3, #22
 800869c:	d4ee      	bmi.n	800867c <__smakebuf_r+0x18>
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	f043 0302 	orr.w	r3, r3, #2
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	e7e2      	b.n	8008670 <__smakebuf_r+0xc>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	6020      	str	r0, [r4, #0]
 80086ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086ba:	b15b      	cbz	r3, 80086d4 <__smakebuf_r+0x70>
 80086bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c0:	4630      	mov	r0, r6
 80086c2:	f000 f81d 	bl	8008700 <_isatty_r>
 80086c6:	b128      	cbz	r0, 80086d4 <__smakebuf_r+0x70>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	431d      	orrs	r5, r3
 80086d8:	81a5      	strh	r5, [r4, #12]
 80086da:	e7cf      	b.n	800867c <__smakebuf_r+0x18>

080086dc <_fstat_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d07      	ldr	r5, [pc, #28]	@ (80086fc <_fstat_r+0x20>)
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f7f9 fff4 	bl	80026d6 <_fstat>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d102      	bne.n	80086f8 <_fstat_r+0x1c>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	b103      	cbz	r3, 80086f8 <_fstat_r+0x1c>
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
 80086fa:	bf00      	nop
 80086fc:	20000544 	.word	0x20000544

08008700 <_isatty_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d06      	ldr	r5, [pc, #24]	@ (800871c <_isatty_r+0x1c>)
 8008704:	2300      	movs	r3, #0
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	f7f9 fff3 	bl	80026f6 <_isatty>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_isatty_r+0x1a>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_isatty_r+0x1a>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	20000544 	.word	0x20000544

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
